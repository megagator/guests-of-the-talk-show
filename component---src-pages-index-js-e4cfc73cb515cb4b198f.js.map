{"version":3,"file":"component---src-pages-index-js-e4cfc73cb515cb4b198f.js","mappings":"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","sources":["webpack://guests-of-the-talk-show/./src/components/AppearancesTable.js","webpack://guests-of-the-talk-show/./src/pages/index.js"],"sourcesContent":["import * as React from 'react'\nimport { Link } from 'gatsby'\n\nimport isoToLocaleString from '../utilities/isoToLocaleString.js'\nimport slugify from '../utilities/slugify.js'\n\nimport * as mainStyle from '../style/main.module.css'\nimport * as tableStyle from '../style/appearances_table.module.css'\n\nimport Guests from '../../content/guests.json'\n\nconst latestAppearanceEpisode = (appearances) => {\n  const latest = appearances[0]\n  return (\n    <span>\n      <span>\n        <Link\n          to={`/episode/${latest.episodeNumber}-${slugify(\n            latest.episodeTitle\n          )}`}\n        >\n          {latest.episodeNumber}: {latest.episodeTitle}\n        </Link>\n      </span>\n      <span>{isoToLocaleString(latest.date)}</span>\n    </span>\n  )\n}\n\n// sudo-enums\nconst SortKey = {\n  Appearances: 'appearances',\n  GuestName: 'guest-name',\n  PodcastNumber: 'podcast-number',\n}\nconst SortOrder = {\n  Asc: 'ascending',\n  Desc: 'descending',\n}\n\nconst makeSortTitle = (currentSort, currentOrder, buttonsSort) => {\n  const sortString = buttonsSort.replace('-', ' ')\n\n  let order = currentOrder\n  if (currentSort === buttonsSort) {\n    if (currentOrder === SortOrder.Asc) {\n      order = SortOrder.Desc\n    } else {\n      order = SortOrder.Asc\n    }\n  }\n\n  return `Sort the table by the ${sortString}, ${order}`\n}\n\nconst AppearanceTable = () => {\n  let [sort, setSort] = React.useState(SortKey.PodcastNumber)\n  let [order, setOrder] = React.useState(SortOrder.Desc)\n\n  const reorderTable = (newSort) => {\n    if (sort === newSort) {\n      if (order === SortOrder.Desc) {\n        setOrder(SortOrder.Asc)\n      } else {\n        setOrder(SortOrder.Desc)\n      }\n    } else {\n      setSort(newSort)\n    }\n  }\n\n  const arrayedGuests = Object.keys(Guests).map((key) => ({\n    key: key,\n    value: Guests[key],\n  }))\n\n  arrayedGuests.sort((a, b) => {\n    let sortResult = 0\n    switch (sort) {\n      default:\n      case SortKey.Appearances:\n        sortResult = a.value.length - b.value.length\n        break\n      case SortKey.GuestName:\n        sortResult = a.key.localeCompare(b.key)\n        break\n      case SortKey.PodcastNumber:\n        sortResult = a.value[0].episodeNumber - b.value[0].episodeNumber\n        break\n    }\n\n    // defaults to ascending\n    if (order === SortOrder.Desc) {\n      sortResult = sortResult * -1\n    }\n\n    return sortResult\n  })\n\n  const sortedGuests = {}\n  for (const item of arrayedGuests) {\n    sortedGuests[item.key] = item.value\n  }\n\n  return (\n    <div className={tableStyle.graph_wrapper}>\n      <table className={tableStyle.graph}>\n        <thead>\n          <tr>\n            <td>\n              <button\n                onClick={() => reorderTable(SortKey.Appearances)}\n                className={`${mainStyle.title} ${\n                  sort === SortKey.Appearances ? tableStyle.active : ''\n                } ${\n                  order === SortOrder.Asc\n                    ? tableStyle.sort_asc\n                    : tableStyle.sort_desc\n                }`}\n                title={makeSortTitle(sort, order, SortKey.Appearances)}\n              >\n                Shows\n              </button>\n            </td>\n            <td>\n              <button\n                onClick={() => reorderTable(SortKey.GuestName)}\n                className={`${mainStyle.title} ${\n                  sort === SortKey.GuestName ? tableStyle.active : ''\n                } ${\n                  order === SortOrder.Asc\n                    ? tableStyle.sort_asc\n                    : tableStyle.sort_desc\n                }`}\n                title={makeSortTitle(sort, order, SortKey.GuestName)}\n              >\n                Guest\n              </button>\n            </td>\n            <td>\n              <button\n                onClick={() => reorderTable(SortKey.PodcastNumber)}\n                className={`${mainStyle.title} ${\n                  sort === SortKey.PodcastNumber ? tableStyle.active : ''\n                } ${\n                  order === SortOrder.Asc\n                    ? tableStyle.sort_asc\n                    : tableStyle.sort_desc\n                }`}\n                title={makeSortTitle(sort, order, SortKey.PodcastNumber)}\n              >\n                Last Podcast\n              </button>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(sortedGuests).map((guest, i) => {\n            return (\n              <tr key={guest} className={mainStyle.event}>\n                <td>\n                  <strong>{Guests[guest].length}</strong>\n                </td>\n                <td>\n                  <Link to={`/guest/${slugify(guest)}`}>{guest}</Link>\n                </td>\n                <td>{latestAppearanceEpisode(Guests[guest])}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default AppearanceTable\n","import * as React from 'react'\n\nimport * as mainStyle from '../style/main.module.css'\n\nimport Header from '../components/Header.js'\nimport AppearanceTable from '../components/AppearancesTable.js'\nimport DurationChart from '../components/DurationChart.js'\nimport { Helmet } from 'react-helmet'\nimport WeekChart from '../components/WeekChart'\n\nconst IndexPage = () => {\n  return (\n    <main className={mainStyle.container}>\n      <Helmet>\n        <title>Guests of The Talk Show</title>\n      </Helmet>\n      <div className={mainStyle.container}>\n        <Header />\n        <AppearanceTable />\n        <DurationChart />\n        <WeekChart />\n      </div>\n    </main>\n  )\n}\n// Step 3: Export your component\nexport default IndexPage\n"],"names":["SortKey","SortOrder","makeSortTitle","currentSort","currentOrder","buttonsSort","sortString","replace","order","React","sort","setSort","setOrder","reorderTable","newSort","arrayedGuests","Object","keys","Guests","map","key","value","a","b","sortResult","length","localeCompare","episodeNumber","sortedGuests","item","className","tableStyle","onClick","mainStyle","title","guest","i","to","slugify","appearances","latest","episodeTitle","isoToLocaleString","date","Helmet","Header","DurationChart","WeekChart"],"sourceRoot":""}