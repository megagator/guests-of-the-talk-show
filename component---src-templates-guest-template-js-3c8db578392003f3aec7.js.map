{"version":3,"file":"component---src-templates-guest-template-js-3c8db578392003f3aec7.js","mappings":"olCAYA,IAAMA,EACK,UADLA,EAGM,WAENC,EACC,YADDA,EAEE,aAGFC,EAAgB,SAACC,EAAaC,EAAcC,GAChD,IAAIC,EAAQF,EASZ,OARID,IAAgBE,IAEhBC,EADEF,IAAiBH,EACXA,EAEAA,GAIN,yBAA0BI,EAAhC,KAAgDC,GA+GlD,EA5GqB,SAACC,GACpB,MAAsBC,EAAAA,SAAeR,GAAhCS,EAAL,KAAWC,EAAX,KACA,EAAwBF,EAAAA,SAAeP,GAAlCK,EAAL,KAAYK,EAAZ,KAEMC,EAAe,SAACC,GAChBJ,IAASI,EAETF,EADEL,IAAUL,EACHA,EAEAA,GAGXS,EAAQG,IAINC,EAAmBC,EAAAA,QAAgB,SAACC,GACxC,cAAoBA,EAAIC,UAAxB,aAAgC,CAC9B,GAD8B,UAChBV,EAAMW,MAClB,OAAO,EAIX,OAAO,KAsBT,OAnBAJ,EAAiBL,MAAK,SAACU,EAAGC,GACxB,IAAIC,EAAa,EACjB,OAAQZ,GACN,QACA,KAAKT,EACHqB,EAAaF,EAAEG,OAASF,EAAEE,OAC1B,MACF,KAAKtB,EACHqB,EAAaF,EAAEI,gBAAkBH,EAAEG,gBAQvC,OAJIjB,IAAUL,IACZoB,IAA2B,GAGtBA,KAIP,uBAAKG,UAAcC,EAAAA,GAAL,IAAiCC,EAAAA,aAC7C,yBAAOF,UAAWC,EAAAA,IAChB,6BACE,0BACE,0BACE,0BACEE,QAAS,kBAAMf,EAAaZ,IAC5BwB,UAAcE,EAAAA,GAAL,KACPjB,IAAST,EAAkByB,EAAAA,GAAoB,IADxC,KAGPnB,IAAUL,EACNwB,EAAAA,GACAA,EAAAA,IAENG,MAAO1B,EAAcO,EAAMH,EAAON,IAEjCA,IAGL,0BACE,0BACE2B,QAAS,kBAAMf,EAAaZ,IAC5BwB,UAAcE,EAAAA,GAAL,KACPjB,IAAST,EAAmByB,EAAAA,GAAoB,IADzC,KAGPnB,IAAUL,EACNwB,EAAAA,GACAA,EAAAA,IAENG,MAAO1B,EAAcO,EAAMH,EAAON,IAEjCA,MAKT,6BACGc,EAAiBe,KAAI,SAACb,EAAKc,GAC1B,OACE,sBAAIC,IAAG,WAAaf,EAAIM,OAAUE,UAAWC,EAAAA,GAC3C,0BACE,4BACE,4BACE,gBAAC,KAAD,CAAMO,GAAE,YAAchB,EAAIiB,MACpBjB,EAAIM,OADV,KACqBN,EAAIY,QAG3B,6BAAOM,EAAAA,EAAAA,GAAiBlB,EAAImB,YAGhC,sBAAIX,UAAWE,EAAAA,KACZU,EAAAA,EAAAA,GAAiBpB,EAAIO,0B,8BC7FxC,EA3BsB,SAAChB,GACrB,IACQW,EADgBX,EAAhB8B,YACAnB,MAER,OACE,wBAAMM,UAAWE,EAAAA,IACf,gBAACY,EAAA,EAAD,KACE,6BAAQpB,EAAR,8BAEF,uBAAKM,UAAWE,EAAAA,IACd,gBAACa,EAAA,EAAD,CAAQC,YAAY,IACpB,sBACEhB,UAAcE,EAAAA,GAAL,IAAwBA,EAAAA,GAAxB,IAA4CA,EAAAA,GAA5C,IAAkEA,EAAAA,IAE1ER,GAEH,gBAACuB,EAAD,CAAavB,MAAOA,IACpB,gBAACwB,EAAA,EAAD,CAAexB,MAAOA,IACtB,uBAAKM,UAAWE,EAAAA,IACd,gBAACiB,EAAA,EAAD,CAAWzB,MAAOA,IAClB,gBAAC0B,EAAA,EAAD,CAAY1B,MAAOA,EAAO2B,MAAM","sources":["webpack://guests-of-the-talk-show/./src/components/EpisodeList.js","webpack://guests-of-the-talk-show/./src/templates/guestTemplate.js"],"sourcesContent":["import * as React from 'react'\nimport { Link } from 'gatsby'\n\nimport friendlyDuration from '../utilities/friendlyDuration.js'\nimport isoToLocalString from '../utilities/isoToLocaleString.js'\n\nimport * as mainStyle from '../style/main.module.css'\nimport * as tableStyle from '../style/appearances_table.module.css'\n\nimport Episodes from '../../content/episodes.json'\n\n// sudo-enums\nconst SortKey = {\n  Episode: 'Episode',\n  Date: 'Date',\n  Duration: 'Duration',\n}\nconst SortOrder = {\n  Asc: 'ascending',\n  Desc: 'descending',\n}\n\nconst makeSortTitle = (currentSort, currentOrder, buttonsSort) => {\n  let order = currentOrder\n  if (currentSort === buttonsSort) {\n    if (currentOrder === SortOrder.Asc) {\n      order = SortOrder.Desc\n    } else {\n      order = SortOrder.Asc\n    }\n  }\n\n  return `Sort the table by the ${buttonsSort}, ${order}`\n}\n\nconst EpsisodeList = (props) => {\n  let [sort, setSort] = React.useState(SortKey.Episode)\n  let [order, setOrder] = React.useState(SortOrder.Desc)\n\n  const reorderTable = (newSort) => {\n    if (sort === newSort) {\n      if (order === SortOrder.Desc) {\n        setOrder(SortOrder.Asc)\n      } else {\n        setOrder(SortOrder.Desc)\n      }\n    } else {\n      setSort(newSort)\n    }\n  }\n\n  const filteredEpisodes = Episodes.filter((epi) => {\n    for (const guest of epi.guests) {\n      if (guest === props.guest) {\n        return true\n      }\n    }\n\n    return false\n  })\n\n  filteredEpisodes.sort((a, b) => {\n    let sortResult = 0\n    switch (sort) {\n      default:\n      case SortKey.Episode:\n        sortResult = a.number - b.number\n        break\n      case SortKey.Duration:\n        sortResult = a.durationSeconds - b.durationSeconds\n    }\n\n    // defaults to ascending\n    if (order === SortOrder.Desc) {\n      sortResult = sortResult * -1\n    }\n\n    return sortResult\n  })\n\n  return (\n    <div className={`${tableStyle.graph_wrapper} ${mainStyle.appearances}`}>\n      <table className={tableStyle.graph}>\n        <thead>\n          <tr>\n            <td>\n              <button\n                onClick={() => reorderTable(SortKey.Episode)}\n                className={`${mainStyle.title} ${\n                  sort === SortKey.Episode ? tableStyle.active : ''\n                } ${\n                  order === SortOrder.Asc\n                    ? tableStyle.sort_asc\n                    : tableStyle.sort_desc\n                }`}\n                title={makeSortTitle(sort, order, SortKey.Episode)}\n              >\n                {SortKey.Episode}\n              </button>\n            </td>\n            <td>\n              <button\n                onClick={() => reorderTable(SortKey.Duration)}\n                className={`${mainStyle.title} ${\n                  sort === SortKey.Duration ? tableStyle.active : ''\n                } ${\n                  order === SortOrder.Asc\n                    ? tableStyle.sort_asc\n                    : tableStyle.sort_desc\n                }`}\n                title={makeSortTitle(sort, order, SortKey.Duration)}\n              >\n                {SortKey.Duration}\n              </button>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredEpisodes.map((epi, i) => {\n            return (\n              <tr key={`episode_${epi.number}`} className={tableStyle.event}>\n                <td>\n                  <span>\n                    <span>\n                      <Link to={`/episode/${epi.slug}`}>\n                        {`${epi.number}: ${epi.title}`}\n                      </Link>\n                    </span>\n                    <span>{isoToLocalString(epi.pubDate)}</span>\n                  </span>\n                </td>\n                <td className={mainStyle.right}>\n                  {friendlyDuration(epi.durationSeconds)}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default EpsisodeList\n","import React from 'react'\n\nimport Header from '../components/Header.js'\nimport DurationChart from '../components/DurationChart.js'\nimport EpisodeList from '../components/EpisodeList.js'\nimport GuestStats from '../components/GuestStats.js'\n\nimport * as mainStyle from '../style/main.module.css'\nimport * as guestStyle from '../style/guest.module.css'\nimport { Helmet } from 'react-helmet'\nimport WeekChart from '../components/WeekChart.js'\n\nconst guestTemplate = (props) => {\n  const { pageContext } = props\n  const { guest } = pageContext\n\n  return (\n    <main className={mainStyle.container}>\n      <Helmet>\n        <title>{guest} | Guest of The Talk Show</title>\n      </Helmet>\n      <div className={mainStyle.container}>\n        <Header isSingular={true} />\n        <h1\n          className={`${mainStyle.title} ${mainStyle.center} ${mainStyle.m_bot_lg} ${mainStyle.m_top_lg}`}\n        >\n          {guest}\n        </h1>\n        <EpisodeList guest={guest} />\n        <DurationChart guest={guest} />\n        <div className={mainStyle.stats_wrapper}>\n          <WeekChart guest={guest} />\n          <GuestStats guest={guest} thing=\"Appearances\" />\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default guestTemplate\n"],"names":["SortKey","SortOrder","makeSortTitle","currentSort","currentOrder","buttonsSort","order","props","React","sort","setSort","setOrder","reorderTable","newSort","filteredEpisodes","Episodes","epi","guests","guest","a","b","sortResult","number","durationSeconds","className","tableStyle","mainStyle","onClick","title","map","i","key","to","slug","isoToLocalString","pubDate","friendlyDuration","pageContext","Helmet","Header","isSingular","EpisodeList","DurationChart","WeekChart","GuestStats","thing"],"sourceRoot":""}