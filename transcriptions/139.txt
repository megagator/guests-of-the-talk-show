[00:00.000 --> 00:06.280]  I always end up seeking back to figure out what part I missed where the podcast started
[00:06.280 --> 00:11.640]  and then I realized it just starts.
[00:11.640 --> 00:15.000]  That is how it goes Craig.
[00:15.000 --> 00:21.340]  So this is a great thrill for me to be speaking to you.
[00:21.340 --> 00:29.720]  Craig Federigi, senior vice president of software engineering at what's the company?
[00:29.720 --> 00:30.720]  Apple.
[00:30.720 --> 00:31.720]  Apple.
[00:31.720 --> 00:32.720]  Apple.
[00:32.720 --> 00:34.240]  Yes.
[00:34.240 --> 00:42.600]  And we are talking on the occasion of the open sourcing of Swift which went live last week.
[00:42.600 --> 00:44.000]  What day was it last week?
[00:44.000 --> 00:46.960]  It was last Thursday, wasn't it?
[00:46.960 --> 00:47.960]  Yeah.
[00:47.960 --> 00:49.720]  It's been huge.
[00:49.720 --> 00:50.720]  Yeah.
[00:50.720 --> 00:51.720]  Yeah.
[00:51.720 --> 00:52.720]  It was incredibly exciting for us.
[00:52.720 --> 00:53.720]  Yeah.
[00:53.720 --> 00:55.920]  So we're speaking as we speak it's about a week later.
[00:55.920 --> 01:00.720]  So how do you think this first week of Swift as an open source project has gone?
[01:00.720 --> 01:01.720]  Yeah.
[01:01.720 --> 01:02.720]  Really, really well.
[01:02.720 --> 01:07.120]  I mean, the level of activity on GitHub is off the charts.
[01:07.120 --> 01:12.840]  I mean, we've had really high aspirations for Swift from the beginning, but at every step
[01:12.840 --> 01:18.960]  it's been pretty amazing for us how much bigger it's gone than we could have ever hoped.
[01:18.960 --> 01:24.560]  And I think already on GitHub we're a more active project than I think all the other languages
[01:24.560 --> 01:28.480]  that are on GitHub, which is just incredible for first week.
[01:28.480 --> 01:37.960]  I think over 60,000 people that have taken a clone of the project, so it's pretty amazing.
[01:37.960 --> 01:42.160]  And the team is just ecstatic over the whole thing.
[01:42.160 --> 01:43.160]  Yeah.
[01:43.160 --> 01:46.640]  There's different ways for a big company, especially a big company, to do a quote-unquote
[01:46.640 --> 01:47.880]  open source project.
[01:47.880 --> 01:51.560]  There's sort of like, yes, technically it's open source, but it's really just sort of
[01:51.560 --> 01:58.080]  a zip file with a open source license, and there it goes, you know, have at it.
[01:58.080 --> 02:06.480]  And then there's the actively engaging in a community manner with the outer world.
[02:06.480 --> 02:11.560]  And so when you guys announced the WWDC Swift would be open source, I think there were
[02:11.560 --> 02:15.160]  some skeptics who thought maybe it was going to be a, well, technically it's open source
[02:15.160 --> 02:16.160]  and there it is.
[02:16.160 --> 02:23.360]  This is really like full throttle, fully engaged with the world outside Cupertino.
[02:23.360 --> 02:24.360]  Yeah.
[02:24.360 --> 02:25.360]  I mean, it's funny.
[02:25.360 --> 02:30.600]  I guess there always will be skeptics, but anyone who's been watching our team in the
[02:30.600 --> 02:41.120]  context of the LLVM world, Clang, LLDB, and our WebKit team would see how much developing
[02:41.120 --> 02:45.280]  in the open is in the spirit of those teams.
[02:45.280 --> 02:51.680]  And so the Swift team has been, among the most, engaged with our developer community of
[02:51.680 --> 02:57.680]  any group in Apple, even prior to open sourcing, in terms of from the first launch of
[02:57.680 --> 03:03.560]  our announcement of Swift 1.0 and the App Store, I mean, at the WWDC and how much they
[03:03.560 --> 03:08.440]  were engaging with all the feedback that was coming in and modifying the language right
[03:08.440 --> 03:16.600]  up to 1.0 and then beyond. And this is really an extension of how the only way they really
[03:16.600 --> 03:18.680]  have ever wanted to work.
[03:18.680 --> 03:23.360]  And so yeah, they are very excited to be working completely in the open.
[03:23.360 --> 03:30.840]  And it really is a case where as all the features in Swift that will be announcing officially
[03:30.840 --> 03:36.080]  to the world at our next developer conference, you can sort of see them unfold before
[03:36.080 --> 03:40.760]  your eyes and the time leading up to that as they're working on them in the open on
[03:40.760 --> 03:41.760]  GitHub.
[03:41.760 --> 03:47.240]  Yeah, just like everything else Apple does, it's very, very similar to everything else
[03:47.240 --> 03:48.240]  we do.
[03:48.240 --> 03:52.960]  The thing that to me is most telling, and I know that GitHub makes it easy to track all
[03:52.960 --> 03:57.360]  these changes and see how many people are involved. But to me, if you just want a quick look
[03:57.360 --> 04:05.400]  at just how much this is a collaboration between the Swift team at Apple and the outside
[04:05.400 --> 04:12.800]  world, it's the Swift evolution mailing list where, you know, you guys have been upfront
[04:12.800 --> 04:19.280]  about this right from Swift 1.0 in 2014 that this is not a finished language. We didn't,
[04:19.280 --> 04:24.760]  you know, you didn't go and finish a language. And here it is. Have at it's, you know,
[04:24.760 --> 04:29.600]  we're still working on this. A lot of what we're going to be working on is tell us what
[04:29.600 --> 04:35.200]  you need. And here on the mailing list, there are people actively engaging and employees
[04:35.200 --> 04:40.480]  from Apple, you know, Chris Latner and the people on his team are fully engaging with these
[04:40.480 --> 04:45.640]  ideas and proposals that are coming from outside the company already one week, you know,
[04:45.640 --> 04:47.600]  one week into it being an open source project.
[04:47.600 --> 04:54.480]  Oh, yeah. I mean, I think our team is a really seasoned team in the world of developing
[04:54.480 --> 05:02.800]  languages. And we know that a language really can't be developed in a vacuum. It is a product
[05:02.800 --> 05:08.720]  of how people use it in the problems that people are trying to solve. And so we knew from
[05:08.720 --> 05:13.120]  the outset with Swift 1.0 that we could come up with the language that a first step you
[05:13.120 --> 05:18.320]  have to crystallize your basic ideas and have a starting point. But we knew we needed feedback
[05:18.320 --> 05:24.880]  then to work toward the language that that ultimately Swift has and has become and will become
[05:24.880 --> 05:31.040]  in the future. But that we needed to have this kind of open, open dialogue and open sourcing
[05:31.040 --> 05:37.600]  is, as you say, just really accelerating and deepening the kind of feedback that we're getting.
[05:37.600 --> 05:43.280]  And so it's really energizing for us. And I think it's really exciting for a lot of the
[05:43.280 --> 05:50.480]  developers in our community as well to be a part of it. What are the other reasons to go open
[05:50.480 --> 05:56.720]  source with with a new programming language? Well, you know, when we talked about it just briefly
[05:56.720 --> 06:06.800]  at WWDC, I think we laid out the big ones, which are for us, Swift is we think the primary
[06:06.800 --> 06:12.800]  programming language that developers should be taught to programming in, actually. I mean, if you're
[06:12.800 --> 06:18.080]  going to learn computer science, Swift is a fantastic learning language. And if you're a developer
[06:18.080 --> 06:25.280]  who is going to invest a huge part of your career in mastering Swift and developing
[06:25.280 --> 06:30.800]  code in Swift, you're going to want the ability to use that code in every context possible. And
[06:30.800 --> 06:34.320]  you're going to want to use your skill in that language and all the environments in which you
[06:34.320 --> 06:42.320]  have to work to do your job. So whether you're scripting your build system or writing web services,
[06:42.320 --> 06:47.760]  of course, writing your mobile applications, we want to make sure that that you can invest
[06:48.320 --> 06:53.920]  in Swift in that way and know that it's going to be available to you everywhere. And so we saw open
[06:53.920 --> 07:00.960]  sourcing as a critical element to make Swift reach its potential to be the language, the major
[07:00.960 --> 07:07.280]  language for the next 20 years of programming in our industry. It's a really ambitious goal.
[07:07.280 --> 07:14.240]  It is, it is. But I think, you know, at every point along the way, because this has been our
[07:14.240 --> 07:22.480]  vision from before we first unleash Swift on the world. But at every step, actually, the reaction
[07:23.040 --> 07:29.440]  has really done our expectations. So maybe our goal isn't so outlandish.
[07:31.120 --> 07:35.920]  Do you think that I would say that that for education purposes, it really has to be open source
[07:35.920 --> 07:42.240]  because there's really no way that a language is going to take root as a teaching language if it's
[07:42.240 --> 07:49.200]  proprietary to an Apple platform or any other vendors platform?
[07:49.760 --> 07:55.920]  Right. You know, we had a lot of universities who would teach a specialized mobile programming
[07:55.920 --> 08:01.600]  course or an iOS programming course. And in that context, of course, they teach Swift and Stanford
[08:01.600 --> 08:07.760]  has an outstanding course that's on iTunes U about programming in Swift to program on iOS.
[08:08.320 --> 08:13.200]  But when it comes to bringing it into the core curriculum that every student in the university
[08:13.200 --> 08:18.240]  has to take to, let's say, learn computer science, making it open source, having it available to
[08:18.240 --> 08:25.040]  every student on whatever platform they're going to use to do their work is we think ultimately
[08:25.040 --> 08:32.560]  huge enabler. And so many of the people we talked to, the professors wanted to use the language
[08:32.560 --> 08:40.160]  in these ways. But they needed it to be open source for this to happen. And so we're really
[08:40.160 --> 08:47.200]  excited to follow through with them on this. Why not open source it? What were the downsides
[08:47.200 --> 08:52.080]  that were debated before you decide, you know, made the decision to go open source within?
[08:52.080 --> 09:03.440]  You know, there really weren't, we of course talked it over at length. We had a tough time
[09:03.440 --> 09:09.680]  coming up with a significant reason not to do it. It was more a when question, you know,
[09:09.680 --> 09:15.920]  is it now? And we knew after one oh that we weren't quite there, that we wanted to get that
[09:15.920 --> 09:21.600]  first round of feedback, begin to stabilize the definition of the language. But as we got close
[09:21.600 --> 09:29.120]  to WWDC this last year, we realized we were where we needed to be to take a step that we knew
[09:29.120 --> 09:32.880]  was going to happen. It was going to be this year or it was going to be the following year.
[09:32.880 --> 09:39.600]  And we realized we were where we needed to be. And so we moved ahead and the hunger out there
[09:40.560 --> 09:48.160]  was so great. We thought, let's do it now. But the downsides are really limited. I mean, I think
[09:48.160 --> 09:55.040]  it's inevitable but positive that Swift will be used in all kinds of contexts outside of Apple.
[09:55.040 --> 10:02.000]  And that's kind of the point. So that's fine. It's clear we're going to get a lot of people
[10:02.000 --> 10:08.560]  wanting to do things with the language that aren't directly related to Apple's line of business.
[10:08.560 --> 10:15.040]  And that's okay, right? That's that's actually fine as well. So they're just, there weren't a
[10:15.040 --> 10:22.400]  lot of downsides and we think the upsides are tremendous. One of the areas that I would,
[10:22.400 --> 10:27.440]  I think it's definitely, I see so much excitement about it already is in terms of being cross-platform
[10:27.440 --> 10:32.960]  is the use of Swift on servers. And you know, a lot of that is certainly going to be Linux.
[10:32.960 --> 10:39.920]  And you guys have already done the port to Linux. That's right. And that's an area where I feel like
[10:39.920 --> 10:45.840]  we, I have no idea. I feel like it's going to be used. But it's like, it's so early we don't know
[10:45.840 --> 10:49.600]  where that's going to be. But do you see that happening that it's going to be used for a lot of
[10:49.600 --> 10:55.760]  server-based development that's really outside Apple's platforms? Oh, totally. Yeah. I mean,
[10:55.760 --> 11:03.520]  you know, from really the outset, IBM, for instance, jumped all over Swift for building their mobile
[11:03.520 --> 11:10.240]  apps. And almost immediately they were coming back to us with, we really want to use this on the
[11:10.240 --> 11:15.920]  server. How can we, how can we get this on the server? And of course with an Apple, there's tremendous
[11:15.920 --> 11:21.360]  passion for Swift. And our own iCloud team has been, you know, completely chomping at the bit to be
[11:21.360 --> 11:28.400]  able to apply it in many of the things they do. So I think it's, it's going to be the first,
[11:28.400 --> 11:34.880]  among the first kind of breakout uses of Swift. And of course, these days, so many mobile applications
[11:34.880 --> 11:40.400]  are part mobile app, part server code. And in a lot of cases, you, you at the very least want to share
[11:40.400 --> 11:44.720]  your, your knowledge, but very often you want to share parts of your code, parts of your model
[11:44.720 --> 11:50.240]  layer, some of your utility libraries, you want to, and, and having Swift enabling you to do that
[11:50.800 --> 11:56.400]  is going to be huge for a lot of our community. Yeah, I can definitely see that. And I, that to me is
[11:56.400 --> 12:03.920]  sort of the building for the future version or aspects of Swift versus say objective C, which
[12:03.920 --> 12:11.920]  has roots from, you know, 20 or even 30 years ago. And the fact that the cloud or whatever you want
[12:11.920 --> 12:17.840]  to call it, but, you know, clients offer running on a device, talking to servers somewhere off on the
[12:17.840 --> 12:24.000]  internet is part of, I would say almost certainly the overwhelming majority of apps that are being
[12:24.000 --> 12:28.880]  written for, for these platforms that having a language that makes sense in both ends of the
[12:28.880 --> 12:36.160]  communication is huge. Exactly. Exactly. And, you know, if you, if you look at where, I think it is
[12:36.160 --> 12:44.640]  for a lot of developers prior to Swift, they probably were using objective C. If they had high
[12:44.640 --> 12:49.600]  performance code, they had to write part of objective C is C. And so they were dropping down into
[12:49.600 --> 12:55.280]  C to do some of the more optimized work, which can be almost another language. There's a real
[12:55.280 --> 13:01.600]  continuum there within the environment. They might have been using a scripting language for part
[13:01.600 --> 13:07.840]  of what they do. And then they might be using a server side language, like Java. And Swift is
[13:07.840 --> 13:14.080]  uniquely capable of spanning from really easy and natural kind of scripting expressive uses.
[13:14.080 --> 13:18.640]  It's a great application programming language. But it was also designed to be a great systems
[13:18.640 --> 13:24.000]  language and be really fast so that you can do C kind of high performance work without
[13:24.000 --> 13:31.280]  compromises of Swift. And then it's going to work in the cloud as well. So I think it's going to
[13:31.280 --> 13:37.280]  really unify the environment for a lot of developers. How would you describe a systems language?
[13:37.280 --> 13:42.480]  Because I, this is, this is right from the, one of my notes here from the Swift programming
[13:42.480 --> 13:49.040]  language. It says Swift is intended to be, quote, the first industrial quality systems programming
[13:49.040 --> 13:53.440]  language that is as expressive and enjoyable as a scripting language is designed to scale from
[13:53.440 --> 13:58.560]  Hello World to an entire operating system. What, what does a systems programming language?
[14:00.720 --> 14:08.160]  Well, there's, there's some, some low level bits and some, some matters of, of, spirit, I think.
[14:08.160 --> 14:14.080]  And in terms of low level bits, Swift has a very predictable memory management model,
[14:15.120 --> 14:22.400]  a very, a very contained runtime. If you look at traditional scripting languages or languages,
[14:23.360 --> 14:31.520]  like Java, they, they run garbage collectors. You really can't control memory in a, in a
[14:31.520 --> 14:38.960]  significant ways, Swift builds on our arc technology that, that first came to objective C to provide
[14:38.960 --> 14:43.600]  really high performance and really predictable and manageable memory management, which means that
[14:43.600 --> 14:48.720]  if you wanted to write everything from an operating system kernel to a, you know, high performance
[14:48.720 --> 14:55.520]  graphics library, you could do that without inheriting a huge per process memory footprint overhead.
[14:55.520 --> 15:03.760]  And you, you see that when you see how apples, OS and apps are able to run in a lower memory
[15:03.760 --> 15:08.400]  footprint and we're able to ship devices with different memory footprints, then, then some of
[15:08.400 --> 15:14.960]  our competitors who use languages that don't have this characteristic. But Swift is also designed
[15:14.960 --> 15:23.600]  so that when it can be fast, it's as fast as can be. So we aren't taking the overhead of
[15:23.600 --> 15:33.440]  dynamic dispatch for every call, but yet we can provide dynamism when, when needed. We can optimize
[15:33.440 --> 15:42.400]  views in array and in Swift. We can be every bit as optimal and do auto vectorization and parallelization
[15:43.600 --> 15:48.800]  in ways that you would expect from optimized C code, but are very hard to do if you were trying to
[15:48.800 --> 15:56.880]  optimize Ruby or Python or even an objective C, you know, NS array built on top of the foundation
[15:56.880 --> 16:03.440]  classes. And so you can go very, very low level and get very predictable peak performance out of
[16:03.440 --> 16:08.800]  your hardware. Yeah. So in other words, it's, it, it, at least compared, it's just compared to
[16:08.800 --> 16:13.920]  Objective C that Objective C, there's so many great things we could say about it. It's served,
[16:13.920 --> 16:19.680]  you know, Apple so incredibly well. It still will for the foreseeable future in so many ways,
[16:19.680 --> 16:27.120]  but there's this big butt, which is that sometimes you need to, let's say, drop down into C or C
[16:27.120 --> 16:34.000]  plus plus. And now you're losing all of the stuff that you love about Objective C because you need
[16:34.000 --> 16:39.440]  to drop down temporarily for performance reasons. And Swift, you don't need to do that. You can write
[16:39.440 --> 16:45.040]  the high performance code right in Swift. That's right. I mean, Swift, I think when we first
[16:45.040 --> 16:51.520]  introduced Swift, we said we were imagining a world where we took what we loved about Objective C
[16:51.520 --> 16:59.360]  without caring for the baggage of C. But what that meant is Swift has to replace C in its role
[16:59.360 --> 17:06.320]  in Objective C programming. And it does that really well while bringing all of these higher levels
[17:06.320 --> 17:11.840]  of abstraction and higher productivity programming techniques to writing that kind of high
[17:11.840 --> 17:21.200]  performance systems code, but also so great for app code. So one thing that Swift is not, I mean,
[17:21.200 --> 17:27.120]  and I think we've already covered this, but it's not Objective C with prettier better syntax.
[17:27.120 --> 17:35.040]  Right. And it's the syntax of Objective C that people find off putting at least at first. And I know
[17:35.040 --> 17:39.760]  that, you know, that's a debate that people who love Objective C and have used it for decades,
[17:39.760 --> 17:46.080]  you know, it's a never-ending argument. But at least at first, even if you really, really love
[17:46.080 --> 17:51.760]  Objective C, I feel like you can't avoid the fact that at first, it looks weird.
[17:51.760 --> 18:00.080]  Uh-huh. I'll admit, I'm an Objective C lover. And you know, there were plenty of good debates
[18:00.080 --> 18:05.280]  internally about, you know, should we have a small talk inspired syntax? Should we, should we
[18:06.400 --> 18:17.440]  stick with something like Objective C? But it is a, in the end, it can go either way. And what we
[18:17.440 --> 18:25.920]  were able to retain in Swift are the sort of literate nature of APIs that Objective C enabled,
[18:25.920 --> 18:31.360]  the readability of code with the labeled arguments. Uh, and we brought all of that to Swift
[18:32.080 --> 18:36.480]  while at the same time having a syntax that is just much more concise. And at this point,
[18:36.480 --> 18:40.320]  with the sort of evolution of people's expectations around programming languages,
[18:40.960 --> 18:47.120]  just much more natural for them. Like, is, is part of the thinking there that in terms of the,
[18:47.120 --> 18:55.440]  the small talk inspired dynamic runtime that you didn't need a new language to do that, because you
[18:55.440 --> 19:02.160]  already have Objective C. And that you can go, you know, that for the future, for the next 20 years,
[19:02.160 --> 19:08.480]  that that sort of, that sort of model of, of looking at frameworks and programming languages
[19:09.120 --> 19:14.480]  isn't the best way to go from here going forward. Now, I would, I would really separate,
[19:14.480 --> 19:22.560]  I know it's, I would separate the, the syntax from some of the underlying aspects of the runtime
[19:22.560 --> 19:30.320]  and the programming model. Uh, Swift, you know, some of my favorite features from Objective C
[19:31.280 --> 19:38.560]  are things like protocols and categories, uh, which it would just Swift or called, uh,
[19:38.560 --> 19:48.320]  extensions, uh, and, uh, those literate APIs as well as, um, first class, uh, classes with,
[19:48.320 --> 19:53.040]  with class methods, you know, all of these things that were so important for us to build great
[19:53.040 --> 20:01.760]  APIs, uh, and great extensible frameworks were, were brought to Swift along with things like, um,
[20:01.760 --> 20:08.960]  labeled arguments. And slowly, we've also been bringing back, um, much of the dynamism. Now,
[20:08.960 --> 20:14.480]  there's some things that are possible and Objective C. And most of the dynamism that, um, you,
[20:14.480 --> 20:19.360]  you really want is the ability to, um, figure out what classes this really to be able to cast
[20:19.360 --> 20:25.600]  the class dynamically to a particular, uh, protocol, uh, to be able to do a kind of response
[20:25.600 --> 20:30.080]  to select or perform, select or check, um, all of these things are possible in Swift today.
[20:30.800 --> 20:34.640]  Uh, and there's some other things that aren't, but that, um, certainly we consider important
[20:34.640 --> 20:40.080]  to ultimately bring, uh, bring to the language. So this thing about a dynamic programming model
[20:40.080 --> 20:45.600]  is, is still, um, very important, uh, to us. Now, there's some very unsafe things that people do
[20:45.600 --> 20:49.760]  and Objective C. And I've, you know, been guilty of this myself where you walk the objective,
[20:49.760 --> 20:55.360]  if you run time and hack the method table and, um, and that's cool. Um, but it is, it is highly
[20:55.360 --> 20:59.200]  unsafe and doesn't lead to very, a maintainable scalable large programs. Some of those techniques,
[20:59.200 --> 21:04.560]  but the vast, vast majority of what makes Objective C great and dynamic, um, is, is part of,
[21:04.560 --> 21:09.520]  either part of Swift now or certainly part of our ongoing ambition for the language.
[21:09.520 --> 21:14.560]  But the thing we, we didn't want to bring from Objective C is that in Objective C,
[21:14.560 --> 21:21.440]  you're paying the overhead of that dynamism all the time. Uh, you know, you're trying to use
[21:21.440 --> 21:26.240]  an array or some, some class and you've got the compiler with both hands tied behind its back
[21:26.240 --> 21:32.720]  in terms of opportunities for optimization. And then you're forcing the developer to then modify
[21:32.720 --> 21:36.720]  the way they've written their code and maybe drop down to C for something where performance matters.
[21:36.720 --> 21:43.520]  Um, for Swift, because it's safer, has more type information, it gives the compiler what it needs
[21:43.520 --> 21:49.680]  to optimize when it can. Um, but that, that alone doesn't stand in the way of all the, in my opinion,
[21:49.680 --> 21:56.800]  all the dynamism that matters. In, in layman's terms, and I, you know, probably way more in the
[21:56.800 --> 22:04.560]  layman's side, it's been a long time since I've programmed regularly, but, um, it, it, you know,
[22:04.560 --> 22:09.200]  for people listening, I think that the big difference is that with, with Objective C,
[22:10.160 --> 22:13.760]  and what you meet, what, what, you know, people may not even know what a runtime is, but more or
[22:13.760 --> 22:18.080]  less what it means is you compile the app. It starts running. And a lot of the stuff gets decided
[22:19.280 --> 22:25.680]  within the app while it's running. And with Swift, by, by doing these things at compile time and
[22:25.680 --> 22:31.360]  knowing more of the type information forcing you to, to, to, to be a little more specific
[22:31.360 --> 22:38.320]  about the type information upfront, it, it, it, it enables the compiler to do more efficient
[22:38.320 --> 22:43.360]  things before the app is even running because it's, it's happening at the time that the app is
[22:43.360 --> 22:50.000]  compiled. That's right. That's right. And then it permits all kinds of optimizations because maybe
[22:50.000 --> 22:56.960]  if, if the compiler can determine ahead of time that absolutely this object you're about to
[22:56.960 --> 23:02.960]  message is of a certain type and we know it's, you've done whole module optimization and we know
[23:02.960 --> 23:08.160]  what the result of that, what that method is, sometimes the compiler could even inline the
[23:08.160 --> 23:13.760]  implementation and even involve the overhead of a function call. So a let alone a dynamic method
[23:13.760 --> 23:18.720]  dispatch. And so you really, that's, that's part of how you can get these incredible, you know,
[23:18.720 --> 23:26.720]  handoff to my C kinds of performance numbers out of what looks, what, what you get to write
[23:26.720 --> 23:33.920]  as, as very high level code. So, so Swift, I think has a, a really excellent balance there,
[23:33.920 --> 23:41.520]  but the key is we still have a runtime where you can look at your classes and, and introspect them.
[23:41.520 --> 23:50.720]  And, and there's, there's more of, more of that coming. Which, which partly is, is on an open
[23:50.720 --> 23:55.360]  roadmap and partly is, you know, in terms of the frameworks for the operating system, obviously
[23:55.360 --> 23:58.400]  is the sort of thing that you're not going to be able to talk about in advance because that's not
[23:58.400 --> 24:04.320]  the stuff that, that's open source. That's right. I mean, some of it, honestly, you will, you will see us
[24:06.160 --> 24:11.360]  bringing up over the course of the coming months in the context of the open source project because
[24:11.360 --> 24:19.360]  certain things that, that our team is, will, will take on, will, will bring them forward as
[24:19.360 --> 24:23.600]  proposals to the open source community and then you'll see us start to implement them. So,
[24:23.600 --> 24:27.280]  I don't want, I don't want to jump the gun and pre-announce everything that, that the team is,
[24:27.280 --> 24:32.720]  is thinking. But as soon as they, you know, and they've already pre-announced a bunch of the things
[24:32.720 --> 24:36.880]  and, you know, big, big part of the focus we wanted to make sure was clear right out of the gates
[24:36.880 --> 24:44.320]  with Swift was that the goal for Swift 3 was really to stabilize the binary interface
[24:45.280 --> 24:50.960]  and to refine the APIs and finalize our API guidelines and all of those things because we want,
[24:50.960 --> 24:57.440]  I think, I think it's the, the next important step is to really stabilize the language and the
[24:57.440 --> 25:02.080]  environment for, for our community. And that's a, that's a big task. One of the things that's been
[25:02.080 --> 25:11.280]  so great about Objective C is it has this great stability where, that have enabled us to write
[25:11.280 --> 25:15.440]  frameworks with binary compatible interfaces release over release of release, something that,
[25:15.440 --> 25:23.280]  that, you know, languages like C++ really couldn't get right. And we absolutely need to bring
[25:23.280 --> 25:28.960]  that to, to Swift. So we've, we brought forward some of those goals, but there are other things
[25:28.960 --> 25:35.520]  of course that will be added to the 3.0 ambitions as time goes on over the coming months.
[25:37.760 --> 25:42.160]  One of the complaints I've seen, and, and, and part of this is just, it's impossible to avoid,
[25:42.160 --> 25:49.600]  I think with, with how early in its evolution, Swift was unveiled to the world. But that I've,
[25:49.600 --> 25:53.600]  what I've seen from developer friends and, and just commentary on the internet is that it's
[25:54.160 --> 26:03.600]  hard right now to write a large scale application in Swift. Apple, Apple has more people working
[26:03.600 --> 26:08.560]  on coco apps than any other company in the world for obvious reasons. Right. You know,
[26:08.560 --> 26:15.600]  how has the feedback from the internal developers, the people, you know, the people who work for
[26:15.600 --> 26:20.960]  you, the engineers who work for you with extensive experience shipping user facing apps, shaped
[26:20.960 --> 26:26.640]  the direction of Swift from 1.0 to what's, what's on a roadmap for 3.0? Yeah. Well, I mean,
[26:27.600 --> 26:32.000]  of course there are elements, we've, we've all, all types here with an Apple, right? Just like the,
[26:32.000 --> 26:40.480]  they're, they're people that are, like in the external community, objective, you know, they start
[26:40.480 --> 26:45.760]  out with the, I love objective C. I don't want to change to, okay, hold on. Maybe there's something
[26:45.760 --> 26:51.840]  to the Swift thing to, let me give it a try to, oh my God, I love it. And so they've, we've gone
[26:51.840 --> 26:59.200]  through all the phases internally. You know, we've had some really great adoption by teams like,
[26:59.200 --> 27:04.080]  that the team that does the doc and window management on OS 10 who've
[27:05.040 --> 27:10.800]  converted, implemented all their new features for El Capitan in, in Swift and started mass
[27:10.800 --> 27:16.240]  converting all of their code and say that they just couldn't imagine going back and that they're,
[27:16.240 --> 27:20.720]  they're more productive with it. Part, part of what our internal teams need to deal with, though,
[27:20.720 --> 27:29.920]  is that they're working on, let's say the current version of Swift 2.0 while it's not done yet.
[27:30.560 --> 27:36.400]  And so it's, it's, I mean, while it's not even WWDC level done yet, right? And so,
[27:37.520 --> 27:43.440]  and they're working on the interfaces in terms of our internal frameworks that haven't been
[27:43.440 --> 27:49.440]  modernized for Swift. And so it can be, you know, they get it rough. They got to, they got to
[27:49.440 --> 27:54.640]  really love it to, to make that leap because they're working on a very, very bleeding edge
[27:54.640 --> 28:00.640]  environment when we use it internally. Thankfully with, with Swift 2.0 now, you know, well out
[28:00.640 --> 28:05.680]  the door, that's, that's stabilized things a good bit and, and they're really open to it. But
[28:06.960 --> 28:13.760]  there's, there's been just a lot of, of feedback. And a lot of it has helped with the impedance,
[28:13.760 --> 28:19.760]  making sure the impedance between objective C and Swift is, is absolutely minimized because of
[28:19.760 --> 28:24.320]  course we have and will continue to have and continue to continue to write any more
[28:25.040 --> 28:32.400]  objective C code. And so the ability of Swift, an objective C code to work together completely
[28:33.040 --> 28:37.040]  naturally is, is a huge focus. And, you know, a bunch of things like
[28:38.080 --> 28:41.760]  generic collections support for, for lightweight generics and objective C
[28:41.760 --> 28:47.920]  were, you know, big pain point internally. And something that we fixed in the language and is
[28:47.920 --> 28:56.960]  now great for all of our, all of our app developers externally. So it's, it's been a, it's been a
[28:56.960 --> 29:02.480]  not dissimilar road for us internally to, to what you see outside. But in terms of Swift and,
[29:02.480 --> 29:07.600]  and writing big apps, it's certainly the case that when Swift 1.0 came out, you know, heck, it
[29:07.600 --> 29:12.320]  didn't, we didn't support incremental compilation in, in the very first update. And so that was,
[29:12.320 --> 29:16.240]  that was going to be a limiting factor for productivity for, for people that had big apps.
[29:17.120 --> 29:21.600]  A lot of that stuff has changed. And then in 2.0, having a good error handling model,
[29:22.560 --> 29:27.440]  having availability checks so you could span API versions, these sorts of things.
[29:28.240 --> 29:33.680]  I think it really addressed the vast majority of, of the pain points that, that we were
[29:33.680 --> 29:38.560]  experiencing that, I think the community was experiencing about writing larger apps. And so much
[29:38.560 --> 29:48.000]  about Swift is actually inherently better for building big apps. Because it makes it handles, handles
[29:48.000 --> 29:54.480]  modules and namespaces in a way more naturally than objective C. It makes the API contracts a
[29:54.480 --> 30:00.080]  little more clear or the code more maintainable. So, uh, where, where, we're, we're very comfortable.
[30:00.080 --> 30:04.880]  Objective C's namespace management was more or less, let's just all agree to put unique
[30:04.880 --> 30:11.120]  initials. Right. That it's, yeah, it's amazing that's taken us this far. But yes, yes, that is,
[30:11.120 --> 30:16.800]  that's basically been the answer. So, yes, so exactly, it is, you know, I don't think, you know,
[30:16.800 --> 30:21.440]  I don't think, maybe the bar wasn't that high. Exactly. We, we have vaulted over it.
[30:22.240 --> 30:27.120]  How do you manage as, as the, you know, chief mofo in charge of all this? How do you manage,
[30:27.120 --> 30:33.120]  how do you manage the enthusiasm that you clearly have for Swift? And the, what to me seems to
[30:33.120 --> 30:39.120]  like a sincere belief that Swift is the way forward with the necessary conservativeness that
[30:39.120 --> 30:44.480]  you need, you know, so that there still has to be a lot of Objective C written, like how,
[30:44.480 --> 30:49.040]  how aggressive can you be about putting teams on, sure, go ahead and do that in Swift?
[30:50.560 --> 30:56.160]  You know, it's, it's, it's really, I mean, people here are idealistic yet really pragmatic. And
[30:56.160 --> 31:02.560]  I think you see that as a, as an apple characteristic in, in many, many elements of, of what we,
[31:02.560 --> 31:09.200]  what we do. And so teams know with the nature of, of what we're trying to get done in their area,
[31:09.200 --> 31:16.960]  in a given year, the nature of their code base, whether Swift is the right answer for them,
[31:16.960 --> 31:23.360]  or where it's the right answer. Even teams where, for one reason or the other, they can't jump
[31:23.360 --> 31:29.840]  right on Objective C, or, or rather, a Objective C conversion to Swift. Now, they, then you
[31:29.840 --> 31:35.760]  Swift heavily for writing all their unit tests, which is great, because then at least as they're
[31:35.760 --> 31:43.360]  introducing new APIs, they're experiencing their own APIs in Swift, and, and leaving on, you know,
[31:43.360 --> 31:48.160]  sort of, sort of eating their own dog food in that regard. We do have some constraints internally,
[31:48.160 --> 31:54.400]  which, which we're addressing, but because we, I mean, it's a, it's a, maybe maybe maybe there's
[31:54.400 --> 31:59.040]  something in, in our closet a little bit, but we, we still support running 32 bit apps on the Mac.
[31:59.760 --> 32:06.960]  And the 32 bit runtime doesn't actually support Swift right now. And so what that means is if
[32:06.960 --> 32:15.600]  we've implemented a framework that's available to 32 bit code, we actually can't write it in Swift.
[32:15.600 --> 32:22.880]  And if, if that code, if that framework is used across iOS and OS 10, as many of our frameworks
[32:22.880 --> 32:29.280]  are, that introduces a little stumbling block as well. So, you know, teams recognize what's practical
[32:29.280 --> 32:34.640]  and what's not practical and find ways to use Swift wherever they can. There's no, no shortage of,
[32:34.640 --> 32:42.400]  of enthusiasm. I, this has been so geeky and so funny about that.
[32:42.400 --> 32:49.120]  No, it's the best possible way. I really enjoyed. I loved, I saw you did a whole round of interviews
[32:49.120 --> 32:53.440]  last week and I read them all and it was great. And I didn't want to cover the same ground. And I
[32:53.440 --> 32:58.400]  don't think we did. I think this was, this is truly, truly eye opening to me. And I really, I certainly
[32:58.400 --> 33:04.080]  appreciate your time, but I really appreciate the openness that you've had here. Is there anything
[33:04.080 --> 33:07.520]  else you want to say before before we wrap up the segment, anything else you wanted to talk about
[33:07.520 --> 33:15.120]  with Swift? I just want to say how, you know, to the world or at least the subset of the world
[33:15.120 --> 33:20.400]  that listens to your podcast, which must be most of them, that how proud I am of the team that's
[33:20.400 --> 33:25.040]  made Swift possible. You know, I mean, of course there's Chris Lattner, but he's, he's part of an
[33:25.040 --> 33:31.120]  incredible team with, with folks like Ted Kremenac and Doug Gregor. And even, you know, people,
[33:31.120 --> 33:38.560]  Swift is, while we have our incredible compiler team, we've also got people who have been writing
[33:38.560 --> 33:45.760]  deep frameworks and apps with an apple for, for, for, in some cases, since the beginning of next
[33:45.760 --> 33:52.080]  step, I mean, people like Ali Ozer, who you may know from his talks at WWDC has been so vital
[33:52.080 --> 33:57.680]  in shaping the language and how the language fits our frameworks and fits the needs of our developers.
[33:57.680 --> 34:02.560]  And I'm just so thrilled with the work that all of them do in the passion that they put into
[34:02.560 --> 34:07.600]  making Swift a success. And I just want to get that out there for everyone because we're,
[34:07.600 --> 34:12.720]  and they're, they're, you know, hundreds, hundreds more behind them. It's been an incredible effort
[34:12.720 --> 34:19.520]  by our team. Would you agree with this? Would I, I think that Apple is in a unique position
[34:19.520 --> 34:26.160]  to, if Swift achieves what you guys have set out to do, which is to make it like the default
[34:26.160 --> 34:30.880]  language that people might learn to program on for the next few decades. Apple's in a unique
[34:30.880 --> 34:36.880]  position to make that happen because you have these platforms, especially iOS, but the Mac,
[34:36.880 --> 34:42.400]  the Watch, anything else that might be coming in the future? TV, TV, let's talk about the TV.
[34:42.400 --> 34:52.400]  That, it, are so popular and are such a draw that they've made objective C, you know, like the
[34:52.400 --> 34:57.120]  second or third most popular programming language on some of these, you know, the lists of what
[34:57.120 --> 35:01.760]  books people bought, which I think to someone like you who's been, you know, started in the next
[35:01.760 --> 35:06.960]  days, you know, if you would have found out that in the year 2015, objective C is the second most
[35:06.960 --> 35:10.960]  popular language, you'd be like, what? I wouldn't have believed it. Right. I would not have believed
[35:10.960 --> 35:15.920]  a language that there's some initial reluctance of people to, you know, to get on board with. Now
[35:15.920 --> 35:22.880]  there's this language that is so approachable and, and really almost has like a syntax level,
[35:22.880 --> 35:27.040]  you know, and when you're talking about like hello world type stuff, really almost looks like pure
[35:27.040 --> 35:32.880]  pseudo code. Yeah. That Apple is in the unique position where the draw is there with the platforms
[35:34.000 --> 35:40.960]  to really, really make this explode in popularity. Yeah, I mean, I couldn't
[35:40.960 --> 35:48.320]  consider any better. I think we, we, when we created Swift, we, while we wanted it, of course,
[35:48.320 --> 35:55.680]  to be a great language, we also from the outset wanted it to be a great language for, for our platforms
[35:55.680 --> 36:03.200]  and the fact that it and embody the lessons that that we learned from creating so many deep
[36:03.200 --> 36:11.440]  frameworks and great apps over so many years. And what that's meant is on day one Swift was, what
[36:11.440 --> 36:16.240]  wasn't a restart for the community. It wasn't a, hey, well, let me learn a whole new set of frameworks.
[36:16.240 --> 36:21.600]  Let me wait for Apple to create a whole new set of frameworks. Swift has been this, this automatic
[36:21.600 --> 36:26.000]  transition for people who wanted to maybe who were new to our platform and wanted to get started.
[36:26.000 --> 36:31.040]  The whole world was open to them on our platform there. And I think that's been so huge to driving
[36:31.040 --> 36:36.800]  the energy around it. And then others have been drawn in just by the greatness of Swift as it
[36:36.800 --> 36:41.120]  is. I mean, it's amazing. These Swift language conferences where people talking about different
[36:41.120 --> 36:44.960]  functional programming paradigms and Swift and all these different things you can do with the
[36:44.960 --> 36:49.440]  language just based on what an amazing new language it is. So you bring those two communities
[36:49.440 --> 36:57.680]  together and it's, it's magic right now. Thank you so much, Craig. I really appreciate the time.
[36:57.680 --> 37:02.720]  Yeah, thank you, John. So honored to speak with you. So thank you so much.
[37:04.720 --> 37:05.760]  Where's Craig? Did I miss him?
[37:09.200 --> 37:14.880]  You know what? Since that ran as the first segment, I might as well just jump right into a
[37:14.880 --> 37:20.080]  sponsor read, which I was definitely not going to do in the middle of talking to Craig Federigh.
[37:21.600 --> 37:23.920]  You totally should have. He would have just sat there patiently.
[37:23.920 --> 37:30.320]  I feel like I could have done anything. He was incredibly gracious. It was absolutely,
[37:30.320 --> 37:37.600]  I mean, I expected him to be nice, but he's, you know, very nice. Let me tell you about our
[37:37.600 --> 37:43.600]  good friends at Casper. You guys know Casper. They're the company who's URL. I frequently get
[37:43.600 --> 37:50.240]  wrong. And I won't today. These guys make obsessively engineered mattresses and they sell them
[37:50.240 --> 37:54.720]  and incredibly fair prices. Just the right sink, just the right bounce. You don't have to sit
[37:54.720 --> 38:00.240]  there and go through their website and pick three different types of mattresses. Do you want springs?
[38:00.240 --> 38:05.200]  Do you want memory foam? Do you want latex foam? Now these guys are mattress experts. They're
[38:05.200 --> 38:10.000]  like the apple of mattresses where they figured it out themselves and they sell one type of mattress.
[38:10.000 --> 38:15.280]  It's their own custom blend of latex foam and memory foam that has just the right sink, just the
[38:15.280 --> 38:21.840]  right bounce. So you don't have to worry about that. All you do is pick what size, what size you want.
[38:21.840 --> 38:25.280]  You want, you want to do what you want. You want a queen size. You want a king size. You want a twin size,
[38:25.280 --> 38:30.640]  whatever you need. As you do, you go to the website, you order it, comes to your house in a little box,
[38:30.640 --> 38:35.760]  put it in a room where you want it. You open it up and it makes a noise and it just soaks up the
[38:35.760 --> 38:40.160]  air and there it is. Now you say, I don't want to buy a mattress without trying it. It's risk-free.
[38:40.160 --> 38:45.280]  You get a hundred days to try sleeping on this on your actual bed in your actual house,
[38:45.280 --> 38:50.000]  hundred days. And if you don't like it, it's painless return. You just go to their website,
[38:50.000 --> 38:54.240]  tell them you want to send it back. They'll take care of, they'll send somebody to your house and
[38:54.240 --> 38:59.120]  get this mattress out of your house. Couldn't be easier. There's no hard sell if you decide to send it
[38:59.120 --> 39:04.880]  back. Couldn't not be easier. Mattresses, they're made in America and the prices are unbelievable.
[39:04.880 --> 39:09.680]  500 bucks for a twin size mattress up to 950 for a king size mattress. If you've shopped for
[39:09.680 --> 39:14.640]  a premium king size mattress in the last few years, you know how great a price point that is.
[39:14.640 --> 39:20.000]  I think it's fair to say that that's about half the price that you would pay for a premium mattress
[39:20.000 --> 39:24.880]  at like a retail mattress store. So really, really great. Couldn't not be easier. You don't have to
[39:24.880 --> 39:28.960]  go to the store. You don't have to get this mattress home. You don't have to wait. It couldn't be easier.
[39:29.760 --> 39:36.080]  Where do you go to find out more? Let me get this right. Casper.com slash talk show.
[39:36.080 --> 39:41.760]  Casper.com slash talk show. If you want to get a mattress and talk about great holiday gift ideas,
[39:41.760 --> 39:46.240]  boy buying somebody a mattress is about as good as it gets. Put one under the Christmas tree.
[39:46.240 --> 39:52.160]  Use that URL and you will save 50 bucks off any of those prices I just told you about. So go get
[39:52.160 --> 40:00.080]  your kids new mattresses for Christmas at Casper.com. So here's the deal. So people will probably
[40:00.080 --> 40:06.800]  wonder how did Craig Federigi end up on the talk show. And what happened was Apple got in touch
[40:06.800 --> 40:14.160]  with me when they started doing the, I guess it was a couple days actually before Swift,
[40:14.160 --> 40:17.440]  the open source thing was actually announced and when they started reaching out to the press,
[40:18.480 --> 40:22.800]  they asked whether I'd be interested in having him on the podcast. And I was like, yeah.
[40:24.720 --> 40:28.000]  Just said, let me check. Let me check my schedule. I don't know. There might
[40:28.000 --> 40:36.320]  mulch might be on that weekend. I can't bump him. I was like, oh yeah. And so no real ground rules,
[40:36.320 --> 40:41.680]  you know, it was very similar to when Phil Schiller was on the live show back at WWDC. It wasn't
[40:41.680 --> 40:47.200]  like they wanted questions in advance or anything like that. Their only request was, you know,
[40:47.200 --> 40:51.440]  that it'd be limited to, you know, somewhere around 20 minutes. So I think the fact that we went
[40:51.440 --> 40:56.160]  about 30 or 35 minutes was probably pretty good for me. We've learned a two X multiply and
[40:56.160 --> 41:01.840]  multipliers acceptable in their time limits. Well, I did, I was to absolutely watch in the clock
[41:01.840 --> 41:06.560]  while we talked and I felt like when we were rolling up around 20, it really felt like he was having
[41:06.560 --> 41:11.280]  a good time. He was very comfortable. And I think that was definitely, you know, Apple PR is concerned
[41:11.280 --> 41:16.480]  would be, you know, they want to limit his exposure in case it was not comfortable, which I think
[41:16.480 --> 41:22.480]  is reasonable. Yeah, I wonder if they would have cut you off, like not that you want to run
[41:22.480 --> 41:30.640]  that experiment. But you know, we got to wrap this up or some more questions. Probably because,
[41:30.640 --> 41:37.040]  you know, Bill Evans from Apple PR was was listening in. It was there. So I would suspect that if
[41:37.040 --> 41:40.960]  I went nuts and just kept him hanging, he probably would have texted me or something like that.
[41:41.840 --> 41:46.080]  There's like an eight. Come on. Would have been friendly. Yeah, we're just talking about
[41:46.080 --> 41:50.240]  open sourcing swiff. I don't know how bad it could get, right? You're just talking about programming,
[41:50.240 --> 41:55.600]  right? Couple of nerds having a conversation. Yeah. Well, I'll tell you, I would love to hear
[41:55.600 --> 41:59.120]  your thoughts on the interview because, and this is really, you know, I'm telling you right now,
[41:59.120 --> 42:03.840]  you were my, is this the right term, you were my spirit animal going into the interview. I thought,
[42:04.480 --> 42:11.280]  okay, I've only got 20 or 30 minutes in my mind. If I can make Syracuse a half happy with this
[42:11.280 --> 42:16.480]  interview, then I'll consider my job well done. Well, that type of interview was tough, I think,
[42:16.480 --> 42:21.200]  because, so you've got Greg making the rounds through the tech press to talk about open sourcing
[42:21.200 --> 42:28.960]  swiff. You know, essentially what his job is doing that press tour to, it's to tell everyone
[42:28.960 --> 42:33.760]  how great it is that Apple doing this thing, right? Well, twofold. I would say twofold. First,
[42:33.760 --> 42:39.120]  it's to tell everybody how great Swift is. And then second is how great it is that they're making
[42:39.120 --> 42:44.640]  it open source. Right. But like his, his job on that press door is not to do what I think a lot of
[42:44.640 --> 42:51.680]  people might want out of an interview, whether it be podcast or text, which is especially programmers,
[42:51.680 --> 42:55.360]  and especially the direction that you took your interview with Greg getting more technical and
[42:55.360 --> 43:01.520]  everything is people want to have not in a mean way, but in a sort of a use net old style way,
[43:01.520 --> 43:07.520]  an argument about programming with a guy who is in charge of a really big platform that a lot
[43:07.520 --> 43:11.200]  of people are working for like the, not like a, like it's not like a mean one, but you want to
[43:11.200 --> 43:15.360]  debate whether I don't know what you want to, you just want to talk to the guy who's in charge.
[43:15.360 --> 43:21.280]  Now finally, I get to sort of, you know, complain about square brackets or tabs versus spaces or
[43:21.920 --> 43:26.560]  my pet peeve and Swift or the app store or whatever. You know what I mean? Like,
[43:27.200 --> 43:32.320]  and I think that's more pronounced with Apple people because Apple has in the past tended not to
[43:32.320 --> 43:38.240]  make the important decision makers, especially the important technical people available to the
[43:38.240 --> 43:45.040]  public in any way. So there was no other venue for you to, you know, air your grievances is like
[43:45.040 --> 43:49.600]  you got to talk to the people who were the most polished in the highest level, and if your concern
[43:49.600 --> 43:56.000]  was about some minor feature of some framework or API, and you couldn't corner someone in a hallway
[43:56.000 --> 44:01.120]  at WHDC, there was no venue for that. So I think, I mean, that's changing now as you could
[44:01.120 --> 44:06.320]  discuss in the interview, but a lot of people might go into this thinking that they're going to hear
[44:06.320 --> 44:10.800]  or like they want it to be more adversarial, but like it's, I think, I think it's impossible to be
[44:10.800 --> 44:15.200]  adversarial with Craig because he's the nicest person in the universe. And if he ever yells at people
[44:15.200 --> 44:18.880]  in meetings, you would never know it from seeing anything he doesn't public. He seems just like
[44:19.920 --> 44:24.320]  a super nice guy enthusiastic and upbeat and positive all the time. So you're not going to have
[44:24.320 --> 44:28.400]  that with him. And if he does not the purpose of the press tour, so it's a waste of time for you to do
[44:28.400 --> 44:35.360]  that, you can use that time much more valuable to engage in interesting conversation that's still on
[44:35.360 --> 44:38.640]  topic. And I think he did that. Yeah, it's the same way I approached the interview with Schiller,
[44:38.640 --> 44:42.560]  where it's there were definitely questions that in theory, I would like to ask like if I could
[44:42.560 --> 44:48.160]  get them on the stand under oath and make them answer questions. There are very interesting questions
[44:48.160 --> 44:53.040]  that I would like to ask that if I did ask and they weren't under oath, that I don't think they
[44:53.040 --> 44:58.000]  would answer. And I don't want to waste time on questions that they're not going to answer. So for
[44:58.000 --> 45:06.080]  example, I'm not going to try to pick Federige's mind about whether they need a new kernel to have
[45:06.080 --> 45:11.040]  like a real-time operating system for the car. That's not going to be a fruitful afternoon of
[45:11.040 --> 45:18.160]  conversation. Exactly. And in addition to the fact that he obviously isn't going to answer that
[45:18.160 --> 45:24.800]  and he can't talk about it. And even if I wanted to get cute and say, theoretically, of course,
[45:24.800 --> 45:28.480]  you know, but you know, that there's these real-time considerations for something like a car that
[45:28.480 --> 45:32.480]  you don't have with these consumer devices like phones and blah, blah, blah. He's not going to get
[45:32.480 --> 45:37.680]  into it. And the second thing in addition to wasting precious time is I feel like asking questions
[45:37.680 --> 45:42.000]  like that would immediately raise their shields like, wow, he just asked a stupid question that I
[45:42.000 --> 45:47.040]  can't answer. Now I've got to be careful that he's not going to, you know, I want them to feel like,
[45:47.040 --> 45:51.200]  hey, this is going well. And it's they're not necessarily softball questions, but that they're
[45:51.200 --> 45:55.840]  questions that I sort of think I was hoping to talk about. Yeah. And the thing is in this
[45:55.840 --> 46:00.240]  in this particular realm, specifically in the open source effort, we've seen through their actions
[46:00.240 --> 46:05.040]  that they are being much more open with Swift and the open source effort than they have ever been
[46:05.040 --> 46:09.520]  before in terms of telling you what they're going to do in the future and having public roadmaps
[46:09.520 --> 46:13.200]  and doing development in the open. You kind of brought this up in the interview with like,
[46:13.840 --> 46:17.440]  how Swift's development is out in the open and he and Craig said how all of the animals and
[46:17.440 --> 46:21.600]  everything, but the contrast that you could have, you know, maybe this would have put them on
[46:21.600 --> 46:26.000]  the defensive is the contrast is something like the the Darwin open source releases and
[46:26.000 --> 46:29.280]  Darwin has been open source from the beginning, but it just hasn't been developed in the same way
[46:29.280 --> 46:33.440]  and maybe it can't be for a variety of reasons because there's just too much proprietary stuff
[46:33.440 --> 46:38.480]  revealing their plans for, you know, whatever devices and stuff they're going to make in the future.
[46:40.320 --> 46:44.320]  But they there's so much more open and he was more open here saying, oh, yeah, we're going to
[46:44.320 --> 46:47.760]  these features and this is what we're going to, you know, we're going to have more things like this
[46:47.760 --> 46:52.800]  by the time WWC rolls around when has any Apple that they wouldn't even tell you if they're
[46:52.800 --> 46:57.440]  going to have a new battery charger in time, you know, they could tell you anything about the
[46:57.440 --> 47:02.480]  future, not that he was promising specific things, but sort of in the vague sort of this is kind
[47:02.480 --> 47:06.240]  of what we're thinking kind of what we're planning because I think it's understood especially
[47:06.240 --> 47:10.160]  within the realm of this open source things like you can see it happening like if it's not available
[47:10.160 --> 47:14.720]  at WWC open mystery why you'll see every single check in every single debate on the mailing list
[47:14.720 --> 47:19.440]  and when WWC comes around it will be ready or it won't and when everyone can see that no one's
[47:19.440 --> 47:24.400]  going to be like, you promised this thing by WWC and we still can't do it. Why you, you know,
[47:24.400 --> 47:29.440]  it's like we'll just look at the mailing list. Look at the source code. It didn't get done or
[47:29.440 --> 47:34.480]  there was debate about how it should be done or whatever. So having that stuff in the open just
[47:34.480 --> 47:38.720]  makes it so much easier to have those conversations. There are no gotchas. It's like just you can watch
[47:38.720 --> 47:45.920]  it happening. It's not magic. Right. It's not like, okay, it's early December as promised before the
[47:45.920 --> 47:50.400]  end of the year. We've made this thing open source. Here's the zip file, you know, with all the source
[47:50.400 --> 47:54.640]  and there's a, you know, a patchy or whatever. Whatever. What other license are they using? I think it's
[47:54.640 --> 48:00.080]  a patchy to point out. They're using the, you know, it's got an open source license to have at it
[48:00.080 --> 48:04.720]  and here's where we planned it. Here's our roadmap for the first Swift 3.0 and then they go into
[48:04.720 --> 48:11.280]  radio silence and then early June at WWDC we find out whether that maps are not like you said
[48:11.280 --> 48:15.120]  from the point from here to there every single day there are going to be these debates. I mean,
[48:15.120 --> 48:20.880]  to me, though, I mentioned it in the interview that the Swift evolution mailing list is remarkable
[48:20.880 --> 48:25.920]  because you really have to like look at the email addresses to see who's from Apple and who's not
[48:25.920 --> 48:31.440]  because there's really serious and very thoughtful proposals coming from outside Apple. And it's
[48:31.440 --> 48:37.760]  very clear that people inside Apple are giving them their full consideration. It is truly a
[48:37.760 --> 48:44.240]  collaborative relationship, right? You know, eight days into it. Yeah, definitely. I'm assuming
[48:44.240 --> 48:48.640]  it will calm down a little bit as the volume has been tremendous. I had to switch to the digest
[48:48.640 --> 48:52.480]  form of that mailing list because it was just filling my, you know, email invite. You don't know
[48:52.480 --> 48:56.240]  I'm filtering into a folder. It was just too many emails in a day. So let me just try taking the
[48:56.240 --> 49:00.240]  digest version of it. But like I'm assuming a traffic will die down a little bit. But yeah, you're
[49:00.240 --> 49:04.800]  right. It used to the old model with the open source. Like Darwin was the big one that they gave
[49:04.800 --> 49:08.800]  you a big dump. And then I don't know how many people even contributed or even could contribute.
[49:10.160 --> 49:13.840]  And then you wouldn't, you wouldn't see anything from them until the next major version,
[49:13.840 --> 49:18.960]  like I think just the other day they finally put out the El Capitan version of the Darwin open
[49:18.960 --> 49:23.040]  source stuff. And so if they can't with this big source dump, even if they had been accepting
[49:23.040 --> 49:27.760]  like feedback, if you didn't see anything from Apple until that video really see, it would just be
[49:27.760 --> 49:33.040]  like like a typical right only sort of black hole for information. Like they'd have discussions with
[49:33.040 --> 49:35.680]  you. And you could say things, but you never knew Apple was going to do it. You just have to sit
[49:35.680 --> 49:39.440]  around and wait and wait and wait. And then at June, they'd be a bunch of slides and people would
[49:39.440 --> 49:44.720]  applaud or not. Here it all happens in real time in front of you. I guess the open question is still
[49:45.440 --> 49:50.720]  how often do the people at Apple push their changes back up to their repository, how much
[49:50.720 --> 49:55.200]  development, but that's true of any open source thing. You can, you can have your local clone of
[49:55.200 --> 49:59.360]  repository and do a bunch of changes to it and not push them back up to the main repository for a
[49:59.360 --> 50:07.600]  while. To some degree, there has to be development going on in Apple that doesn't immediately get
[50:07.600 --> 50:12.640]  pushed out to the public. I mean, I don't know if there's a vetting process involved in that or
[50:12.640 --> 50:17.760]  just the internal coordination of deciding in their particular what they're going to do versus
[50:17.760 --> 50:22.800]  what the community's doing. I'm sure they'll navigate it just fine, but it's just like any other
[50:22.800 --> 50:27.920]  open source thing. If there does come a point where the community wants to pull Swiss heavily
[50:27.920 --> 50:31.200]  in one direction, Apple wants to pull it in another. You could end up with a fork, but we're so far
[50:31.200 --> 50:36.080]  from that now. Now everyone is come by on. Everyone's excited to be working on Swift and Swift is this
[50:36.080 --> 50:40.000]  one thing. Apple is clearly in a driver's seat having invented it and having the platform where it's
[50:40.000 --> 50:45.280]  most useful. So I think things will be smooth sailing. It's smooth as they can be an open source for
[50:45.280 --> 50:55.200]  the foreseeable future. Yeah, and I think it must help in a certain degree that just about every
[50:55.200 --> 50:59.680]  programming language I know of and certainly all the ones people are passionate about have somebody
[50:59.680 --> 51:08.880]  who was the dictator in charge who invented it and infused it with their personal, here's what I
[51:08.880 --> 51:13.600]  think this programming language should be like it. All the great programming languages to me,
[51:13.600 --> 51:21.360]  I think have this opinionated route or origin. And Chris Latner is obviously that individual with
[51:21.360 --> 51:28.720]  Swift. And I think it's very clear, both publicly and from what I've heard privately that it was
[51:28.720 --> 51:32.640]  what has happened was always his intention that it would go open source and that it wouldn't,
[51:32.640 --> 51:36.400]  you know, and it's not like it took this long because there was a debate internally. It really was
[51:36.400 --> 51:40.720]  what Craig said in the interview, which was didn't make sense to go open source right out of the
[51:40.720 --> 51:44.720]  bat. We had to make, you know, it's still too liquid, you know, wait till it solidifies a little
[51:44.720 --> 51:48.480]  bit. And then at that point, you know, it's just a matter of matter of if, but when I think
[51:48.480 --> 51:53.920]  was his exact words. And I think it really helps that Latner was on board with that from the beginning
[51:53.920 --> 51:59.120]  in terms of wanting to have this sort of, it's not like, it's not like somebody else at Apple is
[51:59.120 --> 52:05.840]  forcing him and his team to participate in this. Well, that's the unspoken part of that is like,
[52:05.840 --> 52:11.760]  all right, so it didn't make sense to go because 2.0 was too new. Why would it be bad? Obviously,
[52:11.760 --> 52:16.480]  pre 1.0 is like, you have a secret and this is a global. I'm keeping the secret. And so I can
[52:16.480 --> 52:21.440]  come to WBC and say we have a new programming language. So pre 1.0, you can, you know, pre
[52:21.440 --> 52:24.400]  announcement. You can say that's the reason it's not open source because it was a secret. And we
[52:24.400 --> 52:27.840]  didn't even know if we could do it. And we had to decide internally. And so that makes sense.
[52:27.840 --> 52:32.240]  Once everybody knows Swift is the thing, why is it not open source at that point? And it's like,
[52:32.240 --> 52:36.000]  oh, it's too new. We're not ready. We really need to work it out. Why do you need to work it out?
[52:36.000 --> 52:40.400]  Why can't you work it out when it's in the open? Why does it have to be closed source while
[52:40.400 --> 52:43.600]  you're working these things out? And I would say that the Swift right now is still,
[52:43.600 --> 52:46.960]  by the standards of most other mature programming language, still heavily in flux. I mean,
[52:46.960 --> 52:50.400]  if we're crying out loud there, they're ripping out plus plus and minus minus at this point
[52:50.400 --> 52:54.800]  and thinking about what they're going to do with like, you know, people are proposing new keywords.
[52:54.800 --> 53:02.560]  It's like, this is a pretty liquid. So why was it closed source between the announcement and now?
[53:02.560 --> 53:05.520]  And the answer to that are pretty obvious. Like, they don't think they need to say that we
[53:05.520 --> 53:10.160]  will basically know supporting an open source project has overhead. Like, you can work, you can go
[53:10.160 --> 53:14.240]  much faster when you don't have to worry about other people's input. That sounds bad. And it's
[53:14.240 --> 53:18.960]  like, oh, you're being, but like, there is a lot of overhead, especially for a company like Apple
[53:18.960 --> 53:23.040]  in terms of intellectual property and making sure this is dividing what I'm doing, what's open
[53:23.040 --> 53:29.200]  and what's not. It's a lot of work to do all the things that are required to be a good
[53:29.200 --> 53:34.720]  maintainer of an open source project. And they just, you know, it would have made them go slower,
[53:34.720 --> 53:41.280]  right? So now they're at the point where the trade off is worth it. They're okay with going a
[53:41.280 --> 53:46.000]  little bit slower. Now, across the input is a little bit more valuable because in that beginning
[53:46.000 --> 53:49.840]  part, so much basic stuff didn't work. I mean, Craig mentioned that he had an incremental
[53:49.840 --> 53:55.840]  compilation of his like, just, you just want it to hold together. It's a feasible at all.
[53:55.840 --> 53:59.760]  Can we ship something? Can we get it working enough in Xcode? So like the playground is not crash
[53:59.760 --> 54:05.360]  all the time, right? You know, that's that's basically I would assume the the answer that
[54:05.360 --> 54:10.000]  wasn't given there is that it's not like they and of course the internal debate, which is not going
[54:10.000 --> 54:14.640]  to tell you about the details of the internal debate. But, but yeah, you can go much faster
[54:14.640 --> 54:18.800]  when you don't have to worry about the outside worlds opinions or input and you don't have to
[54:18.800 --> 54:24.000]  support them and you don't have to maintain, you know, a source repository with clean source code
[54:24.000 --> 54:29.120]  and a mailing list and all the other things that go with that. Yeah, I think it's just sort of a
[54:31.120 --> 54:38.720]  one, two, like a two-step process. Like first step was Swift 1.0. This is good enough to show
[54:38.720 --> 54:43.360]  you guys and let you guys start playing with, even though let's face it, you can't start working with
[54:43.360 --> 54:48.960]  it yet. We'll get it into a shape where it's, you know, you can start using it and I've been asking
[54:48.960 --> 54:52.880]  around and I do there are, you know, it's not just an apple there, you know, real developers that
[54:52.880 --> 55:00.160]  real, you know, apps that, you know, people out there, you know, top apps to borrow a phrase from
[55:00.160 --> 55:04.480]  Raiders the last start. There are top apps that have new parts of it, you know, maybe not entirely
[55:04.480 --> 55:09.360]  written in Swift, that's probably still very rare, but new features are being written in Swift in real
[55:09.360 --> 55:15.520]  apps, you know, that you're using today. Um, but I think stage two is this is where I think Latin
[55:15.520 --> 55:21.600]  earned his team thing. We had this, this vision for what we would start with and we're not there yet
[55:21.600 --> 55:25.920]  and this is the point where there's this, the fundamental aspects of the language we're,
[55:25.920 --> 55:30.160]  we're settled on now and now we're willing to start listening to how we can make it better to suit
[55:30.160 --> 55:38.480]  your needs. Yeah, I, I, like I said, I think the language is just so young friend in the grand scheme of
[55:38.480 --> 55:45.520]  things. Uh, it, you know, you're going to do with like human analogy, like maybe you can sit up now
[55:46.800 --> 55:50.400]  like it's not, it doesn't need to be held in one of those big tube things, like it can sit up
[55:50.400 --> 55:54.720]  occasionally, it totals over, it falls over a little bit, it can sit up, but this is like,
[55:54.720 --> 56:00.960]  uh, the best and the worst part, uh, because it's kind of like, uh, there's so much potential,
[56:01.600 --> 56:07.040]  uh, but, uh, Craig talked about Swift 3.0 and how they're really working on getting the
[56:07.040 --> 56:12.400]  ABI nailed down and everything. And that's just got to be terrifying because you know the standards
[56:12.400 --> 56:16.880]  of binary compatibility that Apple aspires to like with Objective C, I think Marco has brought
[56:16.880 --> 56:21.520]  this up on eight to be a few times, like you could have built an iPhone app for the original iPhone
[56:21.520 --> 56:27.280]  and, and, and theory, if you stayed to, uh, you know, still well supported API, is that binary
[56:27.280 --> 56:34.240]  was still run, like they don't, Apple is not in the habit of breaking, uh, backward compatibility
[56:34.240 --> 56:38.320]  for binary libraries and everything in that frequently, which is surprising for a company that is
[56:38.320 --> 56:43.120]  so gung-ho about, uh, moving on from the past and hardware design and software design, they're
[56:43.120 --> 56:47.360]  really good about that. And so mailing that stuff down like that, like 3.0 is not that far away,
[56:47.360 --> 56:52.000]  and it's like, boy, you really only get one shot at, at doing this right, because there's not
[56:52.000 --> 56:57.040]  going to be another 64 to 32 to 64 bit transition for them to use to paper over like they did with
[56:57.040 --> 57:00.880]  like, you know, the Objective C stuff where they're like, well, where we're going on 30 to 64,
[57:00.880 --> 57:04.160]  it's going to break into any of the anyways. And now's our chance to do something a little bit
[57:04.160 --> 57:08.880]  differently. There's not going to be a 64 to 128 transition in the foreseeable future. So they really
[57:08.880 --> 57:13.840]  have to get their ABI, uh, something that doesn't have some terrible mistake that ties their
[57:13.840 --> 57:19.360]  hands in the future. Um, and that is supportable for, for literally decades. And or maybe
[57:19.360 --> 57:25.440]  if it's not a mistake, it's like not like missing some sort of thing that everybody thinks is okay
[57:25.440 --> 57:30.320]  today, but five, six, seven years ago from now, everybody thinks, oh, man, that's, it would be so
[57:30.320 --> 57:34.080]  great if we didn't have that, if we weren't stuck with that decision. Or there's going to be some
[57:34.080 --> 57:39.120]  language feature that is much more difficult to support with the ABI as a design or, you know,
[57:39.120 --> 57:43.440]  I'm just going to say, oh, well, it doesn't, you know, the way quantum computers work in 50 years is
[57:43.440 --> 57:47.040]  different than that. But even just like, you just thought there's a particular language feature that
[57:47.040 --> 57:50.960]  they're like, we don't have time for it. Concurrency is a great example on the Swift 3.0 like
[57:50.960 --> 57:56.000]  Swift evolution mailing list and road map or whatever. They're like language level concurrency,
[57:56.720 --> 58:00.320]  uh, not not planned for 3.0. We don't have time for it. It's too big a feature if we're going to
[58:00.320 --> 58:05.120]  say that as post 3.0. But they're going to have the ABI nailed down. So I really hope there's nothing
[58:05.120 --> 58:11.440]  about, you know, uh, language level concurrency features that would be easier to do with a different
[58:11.440 --> 58:16.720]  ABI not that it's going to preclude them doing this. And I'm assuming like based on past experience
[58:16.720 --> 58:21.520]  that they're looking for an ABI that we really, really solid. But thus far, everything until now
[58:21.520 --> 58:25.760]  has been a communication from, from Apple about Swift as soon, we're going to break your crap all the
[58:25.760 --> 58:30.560]  time. Uh, we're, we are not maintaining source compatibility. We're, we're adding keywords, we're
[58:30.560 --> 58:34.720]  removing things. We're, we're changing how operators work with. And, and they're a solution to
[58:34.720 --> 58:38.640]  this has been like, we're going to use Xcode to translate your old code to your new code for you.
[58:38.640 --> 58:42.960]  But we're not going to support your old code, like just forget it. Um, because they're, they
[58:42.960 --> 58:47.520]  don't want to be held back by the past is kind of the nightmare of, you know, come out with
[58:47.520 --> 58:52.880]  language. And then let literally thousands of developers start writing real applications with it
[58:52.880 --> 58:57.520]  and shipping them to customers. And then be like, Oh my God, we can never change this part of the
[58:57.520 --> 59:01.760]  language for so many people have all this code out there. Like we just, we, we set it out to, to
[59:01.760 --> 59:05.680]  loosen the world. Now we can never take away plus plus and minus minus that'll break everyone's
[59:05.680 --> 59:10.800]  apps. And Apple's like, no, we reserved the right to change this, how this language looks on the
[59:10.800 --> 59:15.280]  page to make your source code that you think is perfectly good, syntactically invalid. So it won't
[59:15.280 --> 59:19.200]  even compile. And the way we're going to manage that is by giving you tools to translate your source
[59:19.200 --> 59:25.280]  code. Yeah. That's one of my favorite changes in the, I guess it's the, it just came out in the
[59:25.280 --> 59:29.840]  Swift evolution or maybe the new version of Swift that they released as they open sourced it where
[59:29.840 --> 59:35.520]  they got rid of these plus plus and minus minus operators. Um, and again, just to take a big
[59:35.520 --> 59:40.560]  step back, and I read the interviews that Federica did with like Mashable and a few other outlets
[59:40.560 --> 59:45.920]  last week, I was half happy and half worried because I was happy because his interviews with like
[59:45.920 --> 59:52.080]  ours, Technica and, and Mashable covered the basics, you know, and it was like a foundation of what
[59:52.080 --> 59:56.320]  Apple's official stance was towards this open sourcing of Swift. And I thought that means I don't
[59:56.320 --> 59:59.920]  have to waste time talking about those things with them. And we can go deeper. But then I thought
[59:59.920 --> 1:00:04.000]  what if that's all he wants to talk about is this, he doesn't want to get nerdy at all. And I was
[1:00:04.000 --> 1:00:08.720]  like, because I kind of want some of this stuff to be a little technical. But then the way the
[1:00:08.720 --> 1:00:13.600]  interview went, there's absolutely no problem getting them to go technical. I just worry now that
[1:00:13.600 --> 1:00:18.720]  maybe it's a little bit over over people's heads for everybody who listens to the show. And so
[1:00:18.720 --> 1:00:23.440]  just here's one example, I don't want to over explain, but the, the plus plus minus minus operators
[1:00:23.440 --> 1:00:29.040]  are one that's very easy for even a non programmer to understand. And in every language, jeez, I know
[1:00:29.040 --> 1:00:34.640]  if since C you've been able to take a variable, let's say the variable is X. And if X is an integer
[1:00:35.280 --> 1:00:41.920]  and it's currently equal to four, if you write in your source code X plus plus, that turns the
[1:00:41.920 --> 1:00:48.880]  variable to five. It just adds one to the, to the variable. And I never really given a lot of thought
[1:00:48.880 --> 1:00:55.440]  to it. But like it seems like every language, just about every C style syntax language since
[1:00:55.440 --> 1:01:02.160]  has taken that and kept it and Swift had it. And then in the, where we're going, it was like,
[1:01:02.160 --> 1:01:05.680]  we're going to get rid of it. And here's why. And I thought the explanation for why was
[1:01:06.400 --> 1:01:11.440]  terrifically cogent. You know, it was like, yeah, that's, that's sort of like unreadable. And you
[1:01:11.440 --> 1:01:17.440]  can, it'd be a lot easier if you just set, you know, X plus equals one. So you know, it's adding
[1:01:17.440 --> 1:01:22.800]  one to it. So there's the, the nuance of post post decrement and pre decrement where you can have
[1:01:22.800 --> 1:01:26.640]  plus plus X versus X plus plus, which means different things in a lot of different languages,
[1:01:26.640 --> 1:01:31.920]  including C, Python, by the way, doesn't have plus plus or minus minus. And this is a great
[1:01:31.920 --> 1:01:38.480]  example of a language feature that they're changing based on a proposal for essentially cultural
[1:01:38.480 --> 1:01:45.280]  reasons, cultural and like human factors reasons, not, not technical, not like performance or
[1:01:45.280 --> 1:01:49.840]  interoperability with objective C or the, but, but, or the ability should do something that you
[1:01:49.840 --> 1:01:55.200]  previously couldn't do. This is purely, uh, it's user interface for programming languages,
[1:01:55.200 --> 1:02:01.600]  essentially. It's a, it's a, what does this construct cause more problems than it solves?
[1:02:01.600 --> 1:02:06.400]  Uh, how much longer is plus equals one versus plus plus pre and posts really easy to get rid
[1:02:06.400 --> 1:02:11.520]  of that, because that is very confusing. But I mean, like, well, yeah, plus plus minus minus
[1:02:11.520 --> 1:02:16.720]  or just, you know, so common, as you noted, and so many other languages, wouldn't we keep that
[1:02:16.720 --> 1:02:20.000]  just because it's an idiom that people are familiar with? And then the debate, uh, if you can
[1:02:20.000 --> 1:02:23.600]  look through this on the panelists was like, well, in what context do you find yourself wanting
[1:02:23.600 --> 1:02:27.920]  to do that? Well, when I do a for loop, and I say, you know, I equals zero, I less than whatever,
[1:02:27.920 --> 1:02:32.320]  I plus plus, uh, and then the Swiss dancers, what we don't want people doing those kind of loops,
[1:02:32.320 --> 1:02:37.440]  we want to have a way to iterate over collections more naturally. So if we say you don't have to do
[1:02:37.440 --> 1:02:43.200]  a classic style for loop, when do you think you're going to use the plus plus, uh, you know,
[1:02:43.200 --> 1:02:46.480]  and so that's how this debate goes. And this is the level they're talking about. That's why I
[1:02:46.480 --> 1:02:50.080]  say this is a little, the little baby that can barely sit up at this point, because they're
[1:02:50.080 --> 1:02:54.400]  still considering fundamental things like how many fingers should this baby have, right? And,
[1:02:54.400 --> 1:02:59.280]  you know, is it going to be a biped, right? Or should it have fur or not? Like, that's, that's
[1:02:59.280 --> 1:03:03.840]  the level they're debating at this point. And I think it's wonderful because the worst thing in
[1:03:03.840 --> 1:03:09.440]  the world that can happen is for the very early decisions made by a very small group of people,
[1:03:09.440 --> 1:03:13.440]  not exposed to the wider world to become cemented and become unchangeable. And to say,
[1:03:14.320 --> 1:03:17.680]  this is it. And we can't change us because it's too late because too many people are programming.
[1:03:18.400 --> 1:03:22.080]  Unless you get everything perfect on your first try, which you'd never, ever will,
[1:03:22.080 --> 1:03:26.960]  all you're doing is like baking in the warts, you know, it's nice for the language to have time
[1:03:26.960 --> 1:03:32.560]  to grow and change and make mistakes and learn from them and become a different language eventually
[1:03:32.560 --> 1:03:40.880]  than it was this year or last year. To take another step back, just just in a little glossary
[1:03:40.880 --> 1:03:47.600]  as we go for non-programmers, the ABI, the binary app. What is it? What does ABI even stand
[1:03:47.600 --> 1:03:55.840]  for? Application binary in a thick, right? That is effectively. So, source code is in a text file.
[1:03:55.840 --> 1:04:00.560]  You write your Swift in a text file. It goes into the compiler and the compiler turns it
[1:04:00.560 --> 1:04:07.120]  into the binary output. So, the dot app, the little actual executable inside the dot app bundle,
[1:04:07.120 --> 1:04:12.240]  that's the binary. Or if it's a framework or a library, it's the compiled code that the machine
[1:04:12.240 --> 1:04:18.240]  reads natively. And what they're promising is that Swift 3.0, which is scheduled for, I think they
[1:04:18.240 --> 1:04:25.280]  say late 2016, which I sort of interpreted, I read between the lines, macOS 10, 10.12, probably.
[1:04:25.280 --> 1:04:37.200]  And iOS 10. At that point forward, that binary interface is going to be compatible with future
[1:04:37.200 --> 1:04:42.720]  versions. Swift 4, Swift 5, Swift 6 going forward. And there, like you said, that's, you know,
[1:04:42.720 --> 1:04:48.880]  high stakes to commit to that. Yeah, it's most important for someone like Apple who makes a bunch
[1:04:48.880 --> 1:04:52.480]  of libraries that they ship with their machines. And your binary needs to know how to call into
[1:04:52.480 --> 1:04:57.040]  those libraries, how to call the functions, how to find the functions and how to call them,
[1:04:57.040 --> 1:05:02.000]  how to present the arguments to those functions and expect where to get the return value from
[1:05:02.000 --> 1:05:08.000]  all those little details that are right now have been in flux. And they have to nail them down so
[1:05:08.000 --> 1:05:11.840]  that you'll ship your binary, they'll ship their libraries, and then they'll come up with a new
[1:05:11.840 --> 1:05:16.400]  version of the OS. And if you don't revise your application, you want to still work. You don't
[1:05:16.400 --> 1:05:20.160]  have to recompile it every time that, you know, that's, if they change the API, it would mean that
[1:05:20.160 --> 1:05:23.600]  people would have to recompile their stuff. And like I said, historically speaking, Apple has not
[1:05:23.600 --> 1:05:29.520]  done that on iOS and has rarely done it on iOS 10. And 32 to 64 bit transitions are great time to
[1:05:29.520 --> 1:05:33.360]  require that because you're like, well, you're 32 bit application will keep working. But eventually
[1:05:33.360 --> 1:05:38.400]  we're not even going to support, you know, 32 bit max anymore. So we're just going to be 64 of it from
[1:05:38.400 --> 1:05:42.240]  now on. And your application will just age out of the ecosystem if you don't update it. And if you do
[1:05:42.240 --> 1:05:46.160]  update it, hey, guess what? You got to recompile anyway. So no big deal. What was the gist of what
[1:05:46.160 --> 1:05:50.800]  Craig was talking about there with the, um, it was something about what I, when I was asking where
[1:05:50.800 --> 1:05:55.200]  they're using Swift internally. And one of the things that they, where that, that's holding them up
[1:05:55.200 --> 1:06:00.880]  and can't, they can't just switch the Swift is that they need to, they still need to support 32 bit
[1:06:00.880 --> 1:06:08.560]  on macOS 10. Yeah, I couldn't tell whether that was just a, a sly illusion to the fact that
[1:06:08.560 --> 1:06:13.440]  32 bit support is going away everywhere that it hasn't, you know, any, any remaining holdouts
[1:06:13.440 --> 1:06:17.360]  of 32 bit support will be disappearing. And they've been doing that over the years, just going
[1:06:17.360 --> 1:06:21.520]  64 bit everywhere they possibly can is just where they can stop supporting entirely.
[1:06:21.520 --> 1:06:25.280]  Oh, the other option is some reason they can't make Swift work with a 32 bit thing.
[1:06:25.280 --> 1:06:30.960]  Right. Right now Swift is 64 bit only though. Yeah. As far as I know, yeah. And like, there's
[1:06:30.960 --> 1:06:35.360]  no reason they couldn't make it work with 32 bit like that, you know, no, sure they could. But is
[1:06:35.360 --> 1:06:40.560]  it worth it? So it's just a question of, uh, are they just shutting that door? And when is it
[1:06:40.560 --> 1:06:44.720]  safe for them to shut that door? And, uh, you know, in terms of backward compatibility, even
[1:06:44.720 --> 1:06:48.880]  like all, you know, with the iOS devices going 64 bit, you can still run 32 bit apps on that. But
[1:06:48.880 --> 1:06:52.880]  you don't want to have both 32 bit and 64 bit apps running on your device at the same time,
[1:06:52.880 --> 1:06:56.080]  because you got to load two versions of libraries into memory and everything. So there are lots
[1:06:56.080 --> 1:07:00.640]  of good reasons to just forget about 32. And like I said, just let it age out of the ecosystem.
[1:07:00.640 --> 1:07:06.160]  That's what I would imagine Apple would do. Um, but he's talking about the past in terms of what,
[1:07:06.160 --> 1:07:10.240]  what was holding people back. Here's where it would really help if we had a chat room,
[1:07:10.240 --> 1:07:14.800]  but I, because the question is just popped into my head now. And I therefore did not do any
[1:07:14.800 --> 1:07:20.240]  research before the show is I, and I'm guessing this is true. I'm guessing watch OS is 64 bit
[1:07:20.240 --> 1:07:26.560]  only and TV OS almost certainly is 64 bit only. There's absolutely no reason why TV OS would have
[1:07:26.560 --> 1:07:34.400]  32 bit support since the first device that TV OS runs on is a 64 bit device. So on TV OS and I'm
[1:07:34.400 --> 1:07:41.200]  guessing watch OS, it's probably possible to go Swift, you know, you Swift for the frameworks and
[1:07:41.200 --> 1:07:46.480]  libraries in the operating system. I don't even know if you're right. We're good to have a chat
[1:07:46.480 --> 1:07:52.160]  room. I don't even know what, uh, I'll know that Apple knew how to use a eight or and the first 64 bit
[1:07:52.160 --> 1:08:00.560]  was a seven. Yeah. Um, yeah. Like I, like I said, I would imagine the way forward is to travel not to
[1:08:00.560 --> 1:08:05.200]  waste its time on 32 bit, but who knows? Like it depends on which roadmap, like if you
[1:08:05.200 --> 1:08:09.280]  grab those things out and say when can we finally drop, drop 32 bit support, both practically
[1:08:09.280 --> 1:08:14.480]  speaking and like politically speaking, not knowing our partners or whatever, um, who made like
[1:08:14.480 --> 1:08:19.120]  32 bit games for iOS into one to like rebuild them for 64. When can we do that? When is it safe?
[1:08:19.120 --> 1:08:23.360]  And then the other question is when do we want to really start ramping up and Swift? Swift needs
[1:08:23.360 --> 1:08:28.640]  to ramp up before 32 bit goes away? Uh, maybe you have to put it in the work to do 30 bit
[1:08:28.640 --> 1:08:32.960]  support, but it totally seems like the Apple move to just be like, hmm, Swift is going to hasten
[1:08:32.960 --> 1:08:40.320]  the demise of anything supporting 64 bit. Yeah, it just seems to me that anything new from when like,
[1:08:40.320 --> 1:08:45.280]  at least from when the a seven, what was that the five S shipped? Yeah, from that point forward,
[1:08:45.280 --> 1:08:50.240]  it just seems like anything that doesn't have legacy support is 64 bit only. So, you know,
[1:08:50.240 --> 1:08:56.400]  from both from new platform perspective, like watching TV to Swift itself, that's, you know, if it's
[1:08:56.400 --> 1:09:03.680]  a new language that came out in, uh, 2014, why in the world would it have 32 bit subordinates,
[1:09:03.680 --> 1:09:08.640]  you know, anchored to the past? Yeah, and the same thing for new frameworks of their writing new
[1:09:08.640 --> 1:09:13.440]  frameworks using Swift, Swift only frameworks, Swift native frameworks, they're rewriting foundation
[1:09:13.440 --> 1:09:18.560]  and Swift, you know, like, but for new stuff where there is no, there is no non-swift version of this
[1:09:18.560 --> 1:09:22.960]  library. It's been Swift from day one. It's a brand new library. Maybe it's a big new library that's
[1:09:22.960 --> 1:09:27.440]  going to be a tent pole feature of a future WDC and they're going to tell people how to use it.
[1:09:28.400 --> 1:09:34.720]  If it's Swift only and Swift doesn't do 32 or 32 bit, no 32 bit app can use this thing, unless
[1:09:34.720 --> 1:09:39.600]  they're, again, unless they're going to bend over backwards to do some crazy way for the, you know,
[1:09:39.600 --> 1:09:45.520]  the library's to bridge from 32 to 64. But, yeah, I just think it's all 64 going forward. And,
[1:09:45.520 --> 1:09:48.720]  and what he was giving you a glimpse in is things that Apple had already gone through.
[1:09:48.720 --> 1:09:52.640]  Right. Like, why aren't it, why isn't everybody using Swift? Well, Swift is really young, Swift
[1:09:52.640 --> 1:09:56.480]  doesn't support 32. But these are all reasons that teams that inside Apple that may be
[1:09:56.480 --> 1:10:01.120]  interesting Swift couldn't use it because it just wasn't practically, it doesn't, wasn't practical
[1:10:01.120 --> 1:10:06.080]  at that point. But it becomes more practical every day. I really, I thought one of the most
[1:10:06.080 --> 1:10:10.960]  astute things he said was here. I'm looking at my transcript here. I mean, people here are
[1:10:10.960 --> 1:10:16.080]  idealistic yet really pragmatic. And I think you see that as an Apple characteristic in many,
[1:10:16.080 --> 1:10:24.480]  many elements of what we do. And I really do think that I think that it's almost idealistic yet
[1:10:24.480 --> 1:10:31.280]  really pragmatic gets to the heart of what I like best about Apple, you know, in the long run
[1:10:31.280 --> 1:10:36.880]  and overall. And I think, and I feel like that really exemplifies it in terms of sure we're really
[1:10:36.880 --> 1:10:40.800]  excited about Swift and it'd be fun to be writing more, but we've got to write an awful lot of new
[1:10:40.800 --> 1:10:47.520]  stuff still in Objective C for these very, very pragmatic reasons. Yeah, this is the overarching like
[1:10:47.520 --> 1:10:54.960]  you may be excited about Swift, but there's sort of a company cultural imperative to, for example,
[1:10:54.960 --> 1:11:01.440]  not break binary compatibility without a good reason because it's bad for the platform. And if
[1:11:01.440 --> 1:11:05.840]  there's any possible way you can avoid it, like it's it's bad for the ecosystem that makes developers
[1:11:05.840 --> 1:11:12.240]  angry. And you can just you only get a certain number of those and you don't want to like
[1:11:12.240 --> 1:11:17.280]  cash them in just on a whim, right? So even though a lot of people may be very excited about
[1:11:17.280 --> 1:11:22.400]  using this new technology, if there's an overriding concern, you know, larger than your little
[1:11:22.400 --> 1:11:26.000]  project, larger than your little feature or your application or whatever it is you're doing inside
[1:11:26.000 --> 1:11:31.120]  Apple. And the dictate is you can't use it because you need to support 32 bit and you need to
[1:11:31.120 --> 1:11:36.640]  do to support 32 bit because we're committed to not breaking binary compatibility until a big company
[1:11:36.640 --> 1:11:41.760]  wide decision happens at a level way above your pay grade and only then will be okay. So like
[1:11:41.760 --> 1:11:45.840]  the idealistic and pragmatic as an organization, yes, but like within the organization,
[1:11:45.840 --> 1:11:50.080]  I imagine it's distributed where the lower you go down the org chart, the more people are inclined
[1:11:50.080 --> 1:11:53.680]  to be idealistic and monitor something crazy and new. And the higher you go in the org chart,
[1:11:53.680 --> 1:11:56.560]  the more people have to be pragmatic and say there's a bigger picture here. And even though
[1:11:56.560 --> 1:12:01.840]  you may be excited to use it on your little project, we decided at the top when it's time to do
[1:12:01.840 --> 1:12:06.640]  these big moves that are going to impact again, literally thousands of developers and thousands,
[1:12:06.640 --> 1:12:10.480]  is it millions of apps? I don't even want to think about it. It might be. I don't even know.
[1:12:10.480 --> 1:12:16.320]  It's kind of bizarre to think about a million apps, but it's possible. One of the areas I wanted
[1:12:16.320 --> 1:12:20.080]  to get to and when I found out it was nice, one of the things that was nice about this interview
[1:12:20.080 --> 1:12:25.280]  was that I knew about it at least a week in advance. It was actually a little bit more than a week
[1:12:25.280 --> 1:12:32.480]  in advance by the time we found a date that worked for both of us. And so I felt like I had plenty
[1:12:32.480 --> 1:12:37.440]  of time to prepare, which was great. And so one of the ways that I prepared it was I went to people
[1:12:37.440 --> 1:12:41.920]  who know a lot more about programming than I do. And it's specifically a lot more about programming
[1:12:41.920 --> 1:12:48.320]  for Apple platforms than I do. And tried to get some questions from them. And one of the things
[1:12:48.320 --> 1:12:53.280]  that I asked about, and I knew this, but it was interesting hearing it from developer friends,
[1:12:53.280 --> 1:13:01.440]  is this whole angle that Swift is not just Objective-C with a modern friendly syntax. It is a very
[1:13:01.440 --> 1:13:11.200]  different language with very different primary priorities. And there are certainly some things.
[1:13:11.200 --> 1:13:15.200]  It certainly looks better. And it certainly is a much more approachable syntax. And I feel like
[1:13:15.200 --> 1:13:19.200]  at a fundamental level, that's basically why there's so much excitement around Swift is there's a
[1:13:19.200 --> 1:13:25.200]  lot of people who just took one look at or take one look at Objective-C and they're like,
[1:13:25.200 --> 1:13:29.120]  I don't get it. And then they take a look at Swift. And they're like, wow, that looks like the
[1:13:29.120 --> 1:13:36.800]  language I already know, whether it's JavaScript or, you know, C or I don't know, even Java to some
[1:13:36.800 --> 1:13:41.440]  degree, maybe, you know, it's a lot more similar to those style languages than it is to Objective-C.
[1:13:41.440 --> 1:13:50.080]  But there are things about Objective-C and the way that the next now COCO and COCO touch frameworks,
[1:13:50.080 --> 1:13:55.120]  you know, all these things that have derived from the next origins, the way that these frameworks
[1:13:55.120 --> 1:13:59.520]  take advantage of the dynamic aspects of Objective-C, that people who are really good at it,
[1:13:59.520 --> 1:14:05.440]  people who've been writing for these frameworks for a long time love and Swift is sort of
[1:14:05.440 --> 1:14:09.840]  isn't really what they were looking for in the next generation language. And I thought his
[1:14:09.840 --> 1:14:16.720]  answer to that surprised me, I thought. Well, I mean, it was, it was on message in terms of like
[1:14:18.160 --> 1:14:22.000]  the dynamic things that people wanted to do with Objective-C will eventually be possible
[1:14:22.000 --> 1:14:25.840]  Swift if they're not now and if this is an ongoing thing and they're working out in Yadiyad and
[1:14:25.840 --> 1:14:30.400]  essentially all the dynamism, which is where they like to use all the dynamism that
[1:14:30.400 --> 1:14:35.360]  that Apple thinks is important will be available in Swift without the downsides that he also went
[1:14:35.360 --> 1:14:39.440]  over extensively, that you've got to pay for that all the time. Yeah, I thought that was interesting.
[1:14:39.440 --> 1:14:45.680]  I thought it was, I'm not sure. I guess I kind of was worried that he would dodge that question
[1:14:45.680 --> 1:14:50.400]  and instead, if seem like he dove right into it and it's obvious, so obvious from his answer,
[1:14:50.400 --> 1:14:56.560]  that they have discussed this internally extensively. Well, this is an interesting time for Swift
[1:14:56.560 --> 1:15:02.480]  because a lot of things that have been true of Swift from the beginning are now starting to
[1:15:03.200 --> 1:15:06.480]  come more into the public consciousness, mostly because more people are using it, more people
[1:15:06.480 --> 1:15:10.320]  or where they didn't even exist as excited as we all were, whatever it was two years to go to
[1:15:10.320 --> 1:15:19.600]  see Swift at WWDC. It's not really a thing for people broadly speaking until a certain point
[1:15:19.600 --> 1:15:23.360]  like can actually use this to make iOS and Mac apps, okay, then it becomes one level thing and then
[1:15:23.360 --> 1:15:27.920]  the open source is the next level is like, hey, this is maybe I'm interested to the entire world of
[1:15:27.920 --> 1:15:33.520]  programmers, right? And so now a lot of people are looking at Swift and they're going to,
[1:15:33.520 --> 1:15:37.280]  I think, start realizing things that have been true about Swift from the very beginning. You
[1:15:37.280 --> 1:15:42.960]  mentioned the syntax thing, which is kind of a side show because the syntax is, you know,
[1:15:42.960 --> 1:15:46.560]  even though it's the thing that people notice when you look at it and there is a certain,
[1:15:47.680 --> 1:15:53.520]  I don't know, like a, like a flavor, like you can tell, does this feel like a modern thing or does
[1:15:53.520 --> 1:15:57.120]  this fear old and weird? Does it look like, you mentioned like does it look like JavaScript?
[1:15:57.120 --> 1:16:01.120]  Does it look like whatever language the kids are learning these days, right? But that is mostly
[1:16:01.120 --> 1:16:06.480]  not important. I mean, the, some aspect, we have to sort of keep up with the Joneses and not
[1:16:06.480 --> 1:16:10.880]  look like you're really old. But then the other aspect of it in terms of the language itself is
[1:16:10.880 --> 1:16:16.240]  how many things do I have to worry about? And Objective-C asks developers to worry about things
[1:16:16.240 --> 1:16:20.160]  used to before ARK, ask them to worry about memory management where they had to call
[1:16:20.160 --> 1:16:25.280]  retaining release and to a modern young programmer that just seems barbaric because like I said,
[1:16:25.280 --> 1:16:31.520]  they'd be coming from, you know, I guess JavaScript is a great example. There's a lot of people
[1:16:31.520 --> 1:16:36.480]  know web stuff and JavaScript is everywhere, but even things like C sharp or Java on the server,
[1:16:36.480 --> 1:16:40.240]  it just seems barbaric to have to deal with that or to have direct access to memory with pointers.
[1:16:40.240 --> 1:16:43.920]  And then ARK made that a little bit better, but still like, what are all these asterisks
[1:16:43.920 --> 1:16:47.280]  all over the place? It doesn't really make any sense. I don't know, you know, if you don't
[1:16:47.280 --> 1:16:53.200]  know C, I think a, you know, a surprising number of developers now find that they are, you know,
[1:16:53.200 --> 1:16:58.480]  if you're a GUI application developer, the reasons for you to know C to figure out how to make a
[1:16:58.480 --> 1:17:02.800]  sheet come up when someone pushes the button, like there's not a lot of those. And it just seems
[1:17:02.800 --> 1:17:06.720]  like why do I have to worry about all this crap? So from the developer's perspective,
[1:17:07.920 --> 1:17:11.840]  Swift is exciting because it's like, I want to make an iOS app because iOS apps are cool,
[1:17:11.840 --> 1:17:16.000]  and I like iPhones and all this other stuff. But it's kind of annoying that I got to worry about
[1:17:16.000 --> 1:17:20.320]  all this stuff. And Swift says, now you don't have to worry about that stuff anymore. And the syntax
[1:17:20.320 --> 1:17:26.320]  looks nicer too. And so that is the, the public face of Swift and the excitement over finally a more
[1:17:26.320 --> 1:17:31.920]  modern language, both in terms of appearance and aesthetics, but also in terms of how many things
[1:17:31.920 --> 1:17:38.320]  do I have to be concerned with when writing a program that seemed to me to be beneath the concern
[1:17:38.320 --> 1:17:43.760]  of me as like a program or a GUI app program. Yeah. And I think a lot of that is historical in terms
[1:17:43.760 --> 1:17:50.480]  of when language is, or C is, you know, primary example, because so much has, you know, if you draw
[1:17:50.480 --> 1:17:55.920]  the family tree of programming languages, there's an awful lot of languages that that derive from
[1:17:55.920 --> 1:18:01.840]  C. And in that era, you know, I guess what, late 60s or early 70s when C was invented,
[1:18:04.000 --> 1:18:10.560]  I pretty sure the first edition of the KNR was like 1971. So late 60s, early 70s.
[1:18:10.560 --> 1:18:19.360]  The computers were so incredibly slow. I mean, just mind bogglingly slow by our standards today,
[1:18:19.360 --> 1:18:24.160]  you know, it's, you know, like the whole, you know, the entire Apollo mission was done with less
[1:18:24.160 --> 1:18:28.640]  computing power than your Apple watch has. I mean, it's just ridiculous. And so you needed to
[1:18:28.640 --> 1:18:34.000]  squeeze every single cycle out of the CPU that you could. And that meant being as a programmer,
[1:18:34.000 --> 1:18:39.040]  writing at is incredibly low level where you're, you know, managing all the memory by hand,
[1:18:39.040 --> 1:18:43.840]  and because if it works, then it's incredibly efficient. And then if it doesn't work,
[1:18:43.840 --> 1:18:48.160]  you just have to fix it. You have to fix the bugs. But like the retained release stuff is a
[1:18:48.160 --> 1:18:54.560]  perfect example of that where it's, you know, and I know when a first started trying to go away
[1:18:54.560 --> 1:18:58.880]  from it. And it was funny, because it's an interesting example of Apple, you know, going down
[1:18:58.880 --> 1:19:04.800]  an alley and then deciding against it, which was at some point in the last decade, they introduced
[1:19:04.800 --> 1:19:12.160]  garbage collection to Coco. I'm pretty sure it was like in the early years of Bertrand. I was
[1:19:12.160 --> 1:19:20.480]  definitely after Avi Tovanian had left. And I know there was a lot of reluctance from people who
[1:19:20.480 --> 1:19:24.800]  got it and people who didn't have who at least didn't think they had problems dealing with the
[1:19:24.800 --> 1:19:30.320]  manual retain release memory management, didn't like garbage collection at all. And it turns out
[1:19:30.320 --> 1:19:34.560]  Apple didn't like it either and they eventually got rid of it. You know, all the people who thought,
[1:19:34.560 --> 1:19:38.720]  oh, I'd pretend release is fine. I don't need this garbage collection. Like one of the big
[1:19:38.720 --> 1:19:44.640]  reasons to even consider garbage collection is just like I said, you know, Objective C started to
[1:19:44.640 --> 1:19:48.880]  look old and crappy. Why do I have to worry so much about memory when programming for this platform
[1:19:48.880 --> 1:19:54.000]  and makes the platform feel, feel older and more primitive and less capable. I can program for
[1:19:54.000 --> 1:19:58.240]  Android or for Windows or for whatever. And I don't have to worry about this. And like really,
[1:19:58.240 --> 1:20:02.320]  I just want to make my app, right? I want to decide, I want to write the code that's going to make
[1:20:02.320 --> 1:20:06.160]  my app do the things my app does. I don't care about memory. Like can't you just take care of that
[1:20:06.160 --> 1:20:11.280]  for me? And so the only reason they would go down the garbage collection path is like, well, here's
[1:20:11.280 --> 1:20:14.720]  one way we can make people not have to worry about retain release. And it was like, well, you put
[1:20:14.720 --> 1:20:19.680]  in the retains releases, but they won't do anything or whatever. And garbage collection for a variety
[1:20:19.680 --> 1:20:26.080]  of reasons was difficult to go with Objective C in particular because it is a super set of C. And
[1:20:26.080 --> 1:20:30.240]  because it's very difficult for our garbage collector to know enough information about the
[1:20:30.240 --> 1:20:34.640]  C-ish parts of your program, which may be right in the Objective C or maybe in data that's coming
[1:20:34.640 --> 1:20:40.480]  out of C libraries, to know enough to do the right thing with that stuff. And so it was kind of
[1:20:40.480 --> 1:20:45.040]  not technically infeasible, but like never a completely closed solution, where you could be like,
[1:20:45.040 --> 1:20:50.960]  I feel like a hundred percent of the time we will do the right thing here. And you know,
[1:20:50.960 --> 1:20:55.040]  and eventually like they launched it, it was out there. You could use it. They dog footed it on
[1:20:55.040 --> 1:20:58.480]  some teams and then eventually pulled it back, right? And this is what I was getting at before
[1:20:58.480 --> 1:21:01.520]  with like things that have been true about Swift in the beginning. They're just now going to
[1:21:01.520 --> 1:21:06.880]  be coming into the public eye. The other aspect of Swift setting aside both the syntax and the
[1:21:06.880 --> 1:21:11.920]  modernization in terms of look at this language that does more modern things that lets the developers
[1:21:11.920 --> 1:21:16.080]  not worry about the things that are not worried about it and express themselves in a more compact
[1:21:16.080 --> 1:21:20.400]  elegant form, just solving the problem they want to solve. You mentioned it and look more like
[1:21:20.400 --> 1:21:24.160]  pseudocode. That's because you're not like in pseudocode, you're not concerned with the little details.
[1:21:24.160 --> 1:21:28.160]  Just like here's the algorithm. Here's here roughly the steps. I don't want to be concerned about the
[1:21:28.160 --> 1:21:32.480]  details, right? It does all of that. But the other thing that's big about Swift and this is an
[1:21:32.480 --> 1:21:36.160]  interesting contrast to what you just mentioned about like C being made in the day when computers
[1:21:36.160 --> 1:21:41.280]  were slow. And it was discussed by Craig as well when he's talking about the Justin Time
[1:21:41.280 --> 1:21:48.960]  Compilers, the JIT and everything. It is essentially a bet against virtual machines with
[1:21:48.960 --> 1:21:54.080]  with a cycle counting garbage collectors, right? It is a bet against the things that Java does and
[1:21:54.080 --> 1:22:01.120]  C Sharp and Android, which is Dalvik, the virtual machine, or all the Java script engines that
[1:22:01.120 --> 1:22:05.920]  run all our web browsers. Java Script is in a tough spot because it's like they're stuck finding
[1:22:05.920 --> 1:22:09.600]  a way to make JavaScript fast business everywhere in web browsers and no one really controls that
[1:22:09.600 --> 1:22:14.000]  platform. And so that's why we've had to put all this brainpower into making JavaScript fast.
[1:22:14.000 --> 1:22:21.360]  But garbage collectors was going more in that direction. But as you mentioned in the description
[1:22:21.360 --> 1:22:24.960]  of Swift is supposed to span from like an operating system up to like a scripting system.
[1:22:24.960 --> 1:22:30.080]  And when you get down to low level, you can't have a garbage collector doing things
[1:22:30.800 --> 1:22:34.880]  unpredictable things that unpredictable times. And even if it's predictable, you can't have the
[1:22:34.880 --> 1:22:39.520]  garbage collector like take these pauses to walk your trees of things to find out when it needs
[1:22:39.520 --> 1:22:43.760]  to be collected. Even you know, there's a lot of great technology in the Java world of making
[1:22:43.760 --> 1:22:50.240]  garbage collectors that don't induce pauses or are more predictable. But nothing is as predictable
[1:22:50.240 --> 1:22:54.960]  as something that is entirely deterministic like ARK, something that is determined at compile time,
[1:22:54.960 --> 1:23:01.280]  where they'll put in that essentially put in the retains and releases for you. And there's debate
[1:23:01.280 --> 1:23:06.720]  as to whether theoretically can garbage collection approach the reliability and performance
[1:23:06.720 --> 1:23:10.080]  characteristics needed for the kernel of an operating system. I think Microsoft just had various
[1:23:10.080 --> 1:23:14.640]  projects to try to make a sort of memory managed operating system or whatever. But Swift is a bit
[1:23:14.640 --> 1:23:20.160]  heavily in the other direction. And this bet was made when ARK Matt for Objective C, not so much
[1:23:20.160 --> 1:23:24.720]  at the Swift, but it's doubling down with Swift is that to make a language that fulfills the
[1:23:24.720 --> 1:23:31.920]  goal set out for Swift, we have to not have this virtual machine and garbage collection that does
[1:23:31.920 --> 1:23:37.600]  all the stuff we have to we have to basically nail things down more, figure things out at compile
[1:23:37.600 --> 1:23:43.600]  time, make everything about a deterministic, only then will it become possible to match both
[1:23:43.600 --> 1:23:49.680]  the performance and the sort of the predictability of C code so that you can write your operating
[1:23:49.680 --> 1:23:54.240]  system kernel, your audio subsystem, or I don't know your real time operating system for your car,
[1:23:54.240 --> 1:24:01.520]  we'll see about that. But you can write that type of code without wondering when the garbage
[1:24:01.520 --> 1:24:05.040]  collector is going to pause you for a second to walk some tree or when something's going to get
[1:24:05.040 --> 1:24:08.400]  collected or how much memory is going to be available at any given time based on when the
[1:24:08.400 --> 1:24:11.280]  collector ran based on much code ran before you called into this code.
[1:24:11.280 --> 1:24:16.240]  All right, even when you're running on a modern computer that is very fast and maybe that pause
[1:24:16.240 --> 1:24:22.480]  isn't even a full second, maybe it's just, you know, 200 milliseconds, but a fraction of a second,
[1:24:23.200 --> 1:24:30.480]  in certain contexts that that pause is is just kills the user experience. I mean, and that's
[1:24:31.280 --> 1:24:35.440]  not a bad mouth Android, but it's I mean, I've heard from a lot of people that dealing with a
[1:24:35.440 --> 1:24:40.720]  garbage collected system is one of the reasons why Android spent years trying to get to what
[1:24:40.720 --> 1:24:45.200]  iOS users thought was a smooth user interface right from the get go because the garbage collector
[1:24:45.200 --> 1:24:48.560]  would run while you're scrolling a list or something like that and you'd get these little
[1:24:48.560 --> 1:24:53.760]  stutters or pauses and they were fractions of a second, not like a whole second long pause, but
[1:24:53.760 --> 1:24:59.360]  just a little fraction of a second. And in a real time situation, if it's some kind of camera-based
[1:24:59.360 --> 1:25:03.920]  thing running on a car or something like that, you really don't want to have an unpredictable
[1:25:03.920 --> 1:25:09.120]  even fifth of the second pause. And they have pause free collectors, but the whole point is if you
[1:25:09.120 --> 1:25:13.120]  give up pausing, essentially, what you're either doing is having it in the degenerate case,
[1:25:13.120 --> 1:25:16.880]  having something like reference counting happening in a small case, like, you know, generational
[1:25:16.880 --> 1:25:21.120]  collectors and the long live versus short live objects, like you can, you can avoid pausing,
[1:25:21.120 --> 1:25:26.240]  but if you avoid pausing, you basically build up garbage. And it, this is also mentioned by Craig,
[1:25:26.240 --> 1:25:30.320]  the idea that they can run, I don't know if it's like a kind of an excuse of how why they
[1:25:30.320 --> 1:25:35.040]  put a little ram in their house devices, but that they can fit their, they can fit their stack,
[1:25:35.040 --> 1:25:38.960]  they can fit their operating system in their framework and their libraries in a smaller memory
[1:25:38.960 --> 1:25:43.680]  for a print, what did they say? They're probably, you know, reading from his thing, you're like,
[1:25:45.040 --> 1:25:49.120]  different memory footprints than some of our competitors who languages don't have this characteristic.
[1:25:49.120 --> 1:25:52.320]  Basically what they're saying is like Android, they have to ship more ram in their devices
[1:25:52.320 --> 1:25:55.440]  because they build up too much garbage. And that's basically the choice you have. Either
[1:25:56.000 --> 1:26:01.360]  something has to decide which memory is available for use, you know, which memory are we done with,
[1:26:01.360 --> 1:26:05.840]  and we can use again for something else, so which memory is still in use. And Arc does that by,
[1:26:05.840 --> 1:26:10.480]  you know, at Arc, which underlies, you know, Objective C and Swift does that by, as it runs,
[1:26:10.480 --> 1:26:13.600]  it says, I'm using this now, it's available now, I'm using this now, it's available now, I'm
[1:26:13.600 --> 1:26:18.880]  like in the code path, along with the executing code. And garbage collection is I just plow
[1:26:18.880 --> 1:26:23.440]  bravely forward and something else, the garbage collector occasionally figures out what is available
[1:26:23.440 --> 1:26:26.400]  for everybody else and what isn't it. Hopefully you can do that without disturbing the other
[1:26:26.400 --> 1:26:30.160]  guy who's plowing bravely forward, but sometimes you have to stop him from going and if you want
[1:26:30.160 --> 1:26:35.200]  to have a pause free one that doesn't stop the ongoing code to figure out what's available.
[1:26:35.200 --> 1:26:39.200]  It has to necessarily be, you know, leave some stuff on the floor and say, I'm not sure if
[1:26:39.200 --> 1:26:43.360]  this is in use yet. I can't find out without stopping that the guy that's running over there,
[1:26:43.360 --> 1:26:49.040]  so I'm just going to leave it off the side. What I'll both down to is you never know based on,
[1:26:49.040 --> 1:26:52.960]  you know, you've got these two things, the collector and the program, you never know at any
[1:26:52.960 --> 1:26:57.600]  good point. When I'm at this point in the code, how much memory is going to be available in this
[1:26:57.600 --> 1:27:00.800]  process? Like, well, if the collector ran here and then maybe it'll be here, but if the
[1:27:00.800 --> 1:27:03.840]  collector is behind because it's running on a different core, then maybe this much will be available
[1:27:03.840 --> 1:27:07.360]  whatever and you just end up with a little bit of extra garbage and the overhead of the virtual
[1:27:07.360 --> 1:27:11.360]  machine itself and all that stuff. This is even before you get into like executing bytecode,
[1:27:11.360 --> 1:27:16.320]  like Java does versus native and all that other stuff. Swift and Arc and Objective-C are a bit
[1:27:16.320 --> 1:27:20.640]  heavily against the virtual machines, like Java virtual machine, the C sharp virtual machine,
[1:27:20.640 --> 1:27:24.400]  and certainly anything like the JIT craziness that we've had to do for a JavaScript to make that
[1:27:24.400 --> 1:27:32.080]  best. Yeah, garbage collection, the analogy works and so I can see why that stuck as the terminology,
[1:27:32.080 --> 1:27:38.320]  but like any analogy, it breaks down at a certain level. In the real world, the garbage that you
[1:27:38.320 --> 1:27:47.520]  keep, like here in Philadelphia, we get garbage collected once a week. The fact that by Tuesday,
[1:27:47.520 --> 1:27:52.080]  we've got six days of garbage in the house isn't a problem because we don't generate that much
[1:27:52.080 --> 1:27:58.560]  garbage and it just sits tied up in bags in our garage. Whereas, on a computing device,
[1:27:58.560 --> 1:28:04.800]  uncollected garbage is taking memory and memory is a precious resource. It's almost like you're
[1:28:04.800 --> 1:28:11.360]  like in a studio apartment and you have uncollected garbage. Yeah, and the thing is, again,
[1:28:11.360 --> 1:28:14.880]  good garbage collectors take advantage of this to try to be smart about like, what if I'm in a
[1:28:14.880 --> 1:28:19.840]  tight loop and inside this loop, I do something with some amount of memory, but on the next iteration
[1:28:19.840 --> 1:28:22.960]  of the roof, I'm totally done with it. I don't need a new set of memory. I could just keep
[1:28:22.960 --> 1:28:27.200]  reusing that same region of memory over and over again in this tight loop. I don't need to allocate
[1:28:27.200 --> 1:28:32.160]  and get rid of it. I just need to know, say, I'm using it. Okay, now I'm done. I'm using it. I'm
[1:28:32.160 --> 1:28:36.160]  done. I'm using it and I'm done. Rather, like, say you're just creating a new object in loop every
[1:28:36.160 --> 1:28:40.320]  time, a very naive old style garbage collection. I'm like, oh, you're making a new object. You need
[1:28:40.320 --> 1:28:43.280]  some memory for that object. Let me have the memory for that object. Here you go. I gave you the
[1:28:43.280 --> 1:28:46.000]  memory for the object. You make it and you go to the next iteration of the loop and the garbage
[1:28:46.000 --> 1:28:49.280]  collector hasn't run yet and it's like, oh, you're making a new object. You need some memory for that
[1:28:49.280 --> 1:28:54.320]  object and a programmer manually managing memory would never allocate to memory. I've got the
[1:28:54.320 --> 1:28:57.920]  memory from the old object. I'm done with it. I'm not using it anymore. Just take this, right?
[1:28:57.920 --> 1:29:03.600]  And so a good programmer might not. I think we've all run into code that was written like that,
[1:29:03.600 --> 1:29:06.880]  though. But this is the problem that the really primitive garbage collector's back on the day.
[1:29:06.880 --> 1:29:11.200]  And the garbage that goes became smarter. It's like, oh, well, for a smarter garbage collector,
[1:29:11.200 --> 1:29:14.880]  we can divide the world up into objects that are short-lived and objects that hang around for
[1:29:14.880 --> 1:29:18.480]  long time and let's make these different pools about these short-lived objects and the ones that
[1:29:18.480 --> 1:29:22.880]  hang around and let's try to, you know, what you're trying to do is get to the point where
[1:29:22.880 --> 1:29:27.120]  if you gave this to, you know, if you gave this to an assembly language program and you showed
[1:29:27.120 --> 1:29:30.720]  the assembly language, they wouldn't look at it and go, this is the stupidest code I've ever seen
[1:29:30.720 --> 1:29:35.440]  in my life. It's incredibly wasteful of resources. You know, you want them to look at it and go,
[1:29:35.440 --> 1:29:39.280]  oh, oh yeah, no, that's pretty much as efficiently as you could have written it. Like, you're not
[1:29:40.000 --> 1:29:46.240]  allocating tons of memory and then leaving it allocated and not reusing it because you don't know
[1:29:46.240 --> 1:29:49.360]  that you can look at it and say, oh, here I am, I'm looking to the assembly code. I can tell,
[1:29:49.360 --> 1:29:53.120]  this memory is never accessed again. Why are you keeping it around while the garbage collector doesn't
[1:29:53.120 --> 1:29:58.400]  know that yet or whatever? So this is, this is a kind of a philosophical debate. Can garbage collection
[1:29:58.400 --> 1:30:07.040]  ever be as efficient and as predictable as manual memory management and arc and what I want to
[1:30:07.040 --> 1:30:12.560]  analyze, you know, Swift and object of C with arc is trying to say we're going to try to automate
[1:30:12.560 --> 1:30:16.480]  the part where we say retain this, do stuff with it, release it, retain this, do stuff with it,
[1:30:16.480 --> 1:30:20.240]  release it so that the developer doesn't have to write it, but so that the compiler writes it,
[1:30:20.240 --> 1:30:25.040]  so that if we were to look at the assembly code, we can see a predictable pattern because there
[1:30:25.040 --> 1:30:30.720]  is some overhead doing all of those, you know, bumping up the retain counts and releasing like
[1:30:30.720 --> 1:30:33.920]  that's in your running code. It's the code that the garbage collector doesn't need to do. It
[1:30:33.920 --> 1:30:37.280]  doesn't need to increment retain counts and decrement retain counts. It can just run because it
[1:30:37.280 --> 1:30:42.480]  knows the garbage collector is going to take care of that. And so the bet with arc and Swift is
[1:30:42.480 --> 1:30:47.280]  it is more efficient and predictable to do that work in line because then we know exactly when
[1:30:47.280 --> 1:30:53.200]  that work will be done and we can do, we can be smarter about it. Like we can in the binary that
[1:30:53.200 --> 1:30:57.040]  we generate look at it and say are we being smarter, we being stupid here versus if you're running
[1:30:57.040 --> 1:31:00.800]  the garbage collector, you're like, well, now there's two things in play or there's the program
[1:31:00.800 --> 1:31:04.320]  and then there's the garbage collector and the program looks okay in terms of what it's doing
[1:31:04.320 --> 1:31:09.920]  semantically, but how will the garbage collector interact with this? How would deal with the memory
[1:31:09.920 --> 1:31:15.680]  and no one to make it available for reuse or whatever? I don't know if I'll be able to find it. I
[1:31:15.680 --> 1:31:22.880]  did, I remember reading on, what's that website? Quora, I remember reading a Quora page where somebody
[1:31:22.880 --> 1:31:28.640]  asked why do Android devices tend to ship with so much more RAM than iOS devices and like the top
[1:31:28.640 --> 1:31:33.520]  voted answer was, I don't know who wrote it, but it was more or less, you know, that because
[1:31:33.520 --> 1:31:38.640]  Android is garbage collected. It's effectively Java. It's Java running in Google's
[1:31:38.640 --> 1:31:52.160]  hand-made rip-off of Java. There's no way you can convince everybody this and I do think there
[1:31:52.160 --> 1:31:57.680]  is a factor in this where Apple just wants to use less RAM because it's cheaper and they save money
[1:31:57.680 --> 1:32:04.960]  and this is one of the ways that they get to, you know, 38, 39% profit margins, but there really
[1:32:04.960 --> 1:32:11.280]  is a factor there that from an effective standpoint, like an Android device that ships with three gigs
[1:32:11.280 --> 1:32:18.080]  of RAM has about as much effective RAM for the user using device as an iOS device with one gigabyte
[1:32:18.080 --> 1:32:21.680]  of RAM. Yeah, and this is, like I said, this is before we even consider the idea of like
[1:32:21.680 --> 1:32:25.200]  bytecode or the Apple's going that direction with its bytecode thing, but not quite, but anyway,
[1:32:25.920 --> 1:32:33.040]  the idea in Java virtual machine or any kind of virtual machine that you produce is binary code
[1:32:33.040 --> 1:32:38.000]  for the virtual machine. And the virtual machine is this hypothetical thing that is not your
[1:32:38.000 --> 1:32:44.800]  actual CPU and then the virtual machine itself will execute that code natively on the CPU.
[1:32:44.800 --> 1:32:48.480]  Like so the whole idea of a job was like, oh, you can make this one Java bytecode application
[1:32:48.480 --> 1:32:53.680]  and send it to an x86 device and a PowerPC device and an alpha device and this same quote-unquote
[1:32:53.680 --> 1:32:57.760]  binary because it's bytecode will run and all of them because they all have Java virtual machines
[1:32:57.760 --> 1:33:01.680]  and those Java virtual virtual machines will execute natively on the individual platforms,
[1:33:01.680 --> 1:33:05.200]  but you just have one binary that was the right one to run anywhere type of thing.
[1:33:06.480 --> 1:33:11.920]  For, I'm not sure what the Dalvik design is, but I think they still have bytecode,
[1:33:12.480 --> 1:33:17.520]  but either way, like the idea of a virtual machine is you have a real target architecture,
[1:33:17.520 --> 1:33:21.280]  you have a virtual machine and that's what you're coded to and then you have to eventually
[1:33:21.280 --> 1:33:25.840]  get to native code. So it's just more stuff between you and seeing how this is going to actually
[1:33:25.840 --> 1:33:30.640]  execute on your actual hardware. And I do think, I think that's a keen observation that this whole
[1:33:30.640 --> 1:33:39.600]  segment of the show that Swift is a bet that there's a better way to get all the advantages
[1:33:39.600 --> 1:33:45.040]  of those garbage collected virtual machines and avoid all of the overhead.
[1:33:45.040 --> 1:33:49.120]  Yeah, and the meta thing in that bet, like again, theoretically in computer science,
[1:33:49.120 --> 1:33:52.320]  you can have ways debates about is it directly possible to have a pause-free garbage
[1:33:52.320 --> 1:33:54.960]  collector that has a better performance because like there are advantages to the garbage
[1:33:54.960 --> 1:33:59.520]  collector because it doesn't have to have that inline code that messes with the memory management
[1:33:59.520 --> 1:34:02.880]  in the actual execution of the program. It can just go forward as fast as it can.
[1:34:04.000 --> 1:34:07.040]  And if the garbage collector could do its job and keep up with it and not to serve it,
[1:34:07.040 --> 1:34:16.320]  that would be great. But the other part of this is like the idea that computing power,
[1:34:16.320 --> 1:34:20.080]  not just like CPU power or whatever, but just if you were to graph anything having to do with
[1:34:20.080 --> 1:34:24.560]  computing power in terms of how fast can we get to memory? How much memory do we have? What
[1:34:24.560 --> 1:34:28.080]  is the single threaded integer performance of a CPU? I think I saw a chart about it like
[1:34:28.080 --> 1:34:32.400]  a single threaded integer performance of Intel CPUs over the past 10 years or whatever.
[1:34:32.960 --> 1:34:38.000]  And the curve is not a hockey stick going up anymore, like in the in our youth and the heyday of
[1:34:38.640 --> 1:34:42.720]  CPU architectures every year, there'd be a new chip and it would be like twice as fast and you
[1:34:42.720 --> 1:34:45.840]  know, you could just get magically fast, you didn't have to recompile it, you didn't have to use
[1:34:45.840 --> 1:34:51.840]  any new technology. Like the clock speed would double and the, you know, the number of
[1:34:51.840 --> 1:34:55.200]  execution units would double and just everything was roses every year.
[1:34:55.200 --> 1:35:01.920]  I remember and this is as late as the 90s. I had an internship at a Windows software development
[1:35:01.920 --> 1:35:09.520]  place and I was writing, you know, Dawson Windows code and everybody had a 486 and the
[1:35:09.520 --> 1:35:13.760]  penniums were just coming out. So I don't know what year this would have been, probably around 95,
[1:35:14.880 --> 1:35:20.480]  maybe 94 somewhere around there. And the one guy got one first, one of the engineers got one first,
[1:35:20.480 --> 1:35:25.040]  and it was so ridiculously faster than everybody else. And it gave us good kit. I mean, you know,
[1:35:25.040 --> 1:35:30.720]  usually programmers get good good devices because they really, you know, even if you're like a
[1:35:30.720 --> 1:35:35.280]  penny pinching manager, if it takes a long time for the code to compile, getting your engineers,
[1:35:35.280 --> 1:35:40.080]  machines that compile code faster is worth it. This guy's machine was so much faster that we would
[1:35:40.080 --> 1:35:45.040]  people would wait until he was like away from his desk and then uses computer to compile stuff
[1:35:45.040 --> 1:35:48.400]  because it was took less time than waiting for it to compile it your own desk.
[1:35:48.400 --> 1:35:53.520]  Yeah, I remember just like seeing doom running on like, first time I saw doom run on
[1:35:53.520 --> 1:35:56.720]  the pennium because this is before the edge of video cards, this is all in the CPU,
[1:35:56.720 --> 1:36:01.120]  it was just magic how much faster it was. And it was the same program, like it was the same
[1:36:01.120 --> 1:36:05.760]  program and just for free, everything you did got faster, right? So when we were in that part of the
[1:36:05.760 --> 1:36:09.680]  hockey stick curve, like the graph, I saw it look like it had that part of the hockey stick curve
[1:36:09.680 --> 1:36:13.120]  where it's like going up, up, up, and then it starts to level off and it becomes kind of like a
[1:36:13.120 --> 1:36:19.520]  mound, you know, we're going, the slope is decreasing over time. And if we were still on that hockey
[1:36:19.520 --> 1:36:24.640]  stick, I think it's inevitable that VMs in any sort of higher abstraction thing would have won
[1:36:24.640 --> 1:36:30.560]  because it's like, yeah, it's a little bit slower. And yeah, you can get behind and we may be
[1:36:30.560 --> 1:36:34.240]  using what memory they're supposed to, but just everything is on this big hockey stick and it
[1:36:34.240 --> 1:36:40.320]  doesn't matter. Your concerns are pointless, they'll be dwarfed by the inextorability of progress.
[1:36:40.320 --> 1:36:46.320]  And progress is slowed for two reasons. One, the move to mobile has pushed everybody back down
[1:36:46.320 --> 1:36:51.440]  that chart a little bit. And we kind of think we're back in the hockey stick era where it's like,
[1:36:51.440 --> 1:36:55.120]  oh, apples like doubling their CPU speeds every, but all they did was they just got shoved back
[1:36:55.120 --> 1:37:02.240]  down the hockey stick because these things are these tiny little CPUs with small batteries and
[1:37:02.240 --> 1:37:06.800]  thermom blopes that don't allow for, you know, fans or anything like that. So we're kind of back in
[1:37:06.800 --> 1:37:11.680]  the, you know, the old days, but that means we're also back in performance. So we like on the iPhone
[1:37:11.680 --> 1:37:17.200]  CPUs, they used to be like dishwasher operating dishwasher CPUs like they were terrible. And they've
[1:37:17.200 --> 1:37:22.800]  been slowly catching up to now, like with the iPad Pro, it's like, this is a modern MacBook CPU,
[1:37:22.800 --> 1:37:28.880]  but not surpassing the desktop. No, it's right. No. So there, there's still there, we're still
[1:37:28.880 --> 1:37:34.000]  everything is slower. And that's been a huge advantage for Apple having a native platform like back
[1:37:34.000 --> 1:37:37.920]  in the day where everything was objective C, which is a C based language to be able to
[1:37:37.920 --> 1:37:42.320]  just get the iPhone one out the door and working. Like it's why the Blackberry people thought it
[1:37:42.320 --> 1:37:47.440]  was a fake demo because it seemed impossible. Yeah. And then we see things like the watch
[1:37:47.440 --> 1:37:53.440]  where we're pushed back to wow, this is really slow again. Yeah. And then the other aspect of this
[1:37:53.440 --> 1:38:01.120]  is Moore's law. Moore's law can't continue forever. The, there was like a, the density of transistors
[1:38:01.120 --> 1:38:06.000]  on a CPU doubling a rating months, but eventually you get down to like quarks and gluons like you
[1:38:06.000 --> 1:38:11.440]  can't, you know, having the size of things, the math starts to get really funky really fast. And
[1:38:11.440 --> 1:38:15.840]  as far as we are aware, you can't keep sub dividing matter forever. Eventually you get down to
[1:38:15.840 --> 1:38:19.520]  fundamental particles and way before you get down to fundamental particles, everything becomes
[1:38:19.520 --> 1:38:24.400]  screwy in terms of the laws of physics and quantum mechanics. And it's so the photography
[1:38:24.400 --> 1:38:30.000]  sizes, like we continue to march forward, but there, there is an end in sight where you're going
[1:38:30.000 --> 1:38:36.000]  to have to come up with a new technology, you've like quantum computing or, you know, like just, it's
[1:38:36.000 --> 1:38:41.360]  not as if this, how is the can't go on forever? And so the bet with Swift is the era of time that
[1:38:41.360 --> 1:38:48.560]  we're in now where progress on computing power and performance has for, for both like practical
[1:38:48.560 --> 1:38:52.960]  reasons, you know, in terms of how much harder is it for Intel to make their top-end CPU's faster
[1:38:52.960 --> 1:38:56.880]  every year, and how long does it take to get to the next process node for making, you know,
[1:38:56.880 --> 1:39:00.800]  pizza sizes smaller and CPUs? And because of the move to mobile and wearable and who knows
[1:39:00.800 --> 1:39:07.840]  what else, that this is a good time to say, I don't think the hardware is going to make it,
[1:39:07.840 --> 1:39:15.120]  uh, so that those virtual machines are a better suited to apples needs than the solution that
[1:39:15.120 --> 1:39:20.800]  represented by Swift and arc with objective C. And so let's say, you know, Swift is a language
[1:39:20.800 --> 1:39:24.400]  in the next 20 years and the next 20 years, we feel like this is the best technical solution
[1:39:24.400 --> 1:39:28.960]  until quantum computers or whatever. This is what we're going with. And Apple is essentially
[1:39:28.960 --> 1:39:32.960]  begging the company on that, uh, and it's been a good bet so far because like I said, I think it
[1:39:32.960 --> 1:39:39.760]  gave them huge advantage during the, uh, the, the, the iPhone era, essentially the iOS device era,
[1:39:39.760 --> 1:39:43.600]  where it was very difficult for the competitors to catch up with them until the CPUs did start
[1:39:43.600 --> 1:39:48.240]  climbing up that hockey stick and said, now, now we can support a Java virtual machine and have
[1:39:48.240 --> 1:39:54.640]  a responsive GUI, uh, you know, just put a little more RAM in there. Uh, it occurs to me and I'm
[1:39:54.640 --> 1:39:58.800]  I don't want to spend a lot of time speculating about a car on this episode at least, but one of
[1:39:58.800 --> 1:40:05.200]  the things that makes me laugh about the car idea is that it's like the one team at Apple that's
[1:40:05.200 --> 1:40:12.160]  writing software that, that the computing part of the device doesn't have to really worry about
[1:40:12.160 --> 1:40:17.200]  battery life. I mean, the car itself obviously is going to have to worry about battery life tremendously,
[1:40:17.200 --> 1:40:20.800]  but the amount of the battery that this is towards propelling of, you know,
[1:40:21.600 --> 1:40:28.320]  multi ton device is, you know, everything and the little computer that lights up the dashboard and
[1:40:28.320 --> 1:40:33.120]  maybe, you know, does whatever else with the sensors and stuff is kind of insignificant,
[1:40:33.120 --> 1:40:37.920]  but it's really the exception to where things are going. The watch, to me, is the better at,
[1:40:37.920 --> 1:40:44.080]  you know, example of where things are going, where the computing device is getting smaller and
[1:40:44.080 --> 1:40:47.680]  smaller. I mean, and, you know, I don't know what the idea would be, but surely they're going to
[1:40:47.680 --> 1:40:51.920]  be making devices that make the watch look big, you know, in the years to come. And so
[1:40:52.720 --> 1:40:57.680]  they're never going to get out of the need. I don't think in the foreseeable future to have
[1:40:59.280 --> 1:41:05.440]  really efficient code that runs on really what everybody would consider to be a painfully
[1:41:05.440 --> 1:41:11.120]  slowed processor because we keep the desire to keep making things smaller and smaller and have
[1:41:11.120 --> 1:41:15.280]  little fingernail sized things that do clever stuff is inevitable.
[1:41:16.240 --> 1:41:20.400]  Yeah, and really you have to view it kind of as like as epochs in history. Like there was,
[1:41:20.400 --> 1:41:23.520]  there was the part where we were growing up, which was awesome where computers would get faster
[1:41:23.520 --> 1:41:27.120]  and more powerful. It just like everything about them would get better just year after year and
[1:41:27.120 --> 1:41:30.960]  it was amazing, right? And if you get starry eyed and extrapolate from that, you'd be like,
[1:41:30.960 --> 1:41:36.000]  by the time where adults computers will be infinitely fast and have more memory the size of a planet,
[1:41:36.000 --> 1:41:39.520]  right? But no, that's not how it works. We start reaching the limits of, you know,
[1:41:39.520 --> 1:41:44.480]  silicon wafer lithography and all the other and instruction level parallelism and all the other
[1:41:44.480 --> 1:41:50.560]  sort of very difficult problems that make it harder to make, or even just like heat dissipation
[1:41:50.560 --> 1:41:56.480]  with the megahertz wars, like, you know, what are we using now? Three four gigahertz CPUs? They had
[1:41:56.480 --> 1:42:01.600]  three four six gigahertz CPUs a long time ago too. Why are we not using 700 gigahertz CPUs? Like
[1:42:01.600 --> 1:42:07.040]  we're bringing into the limits of the current way we do computation. And so we're kind of in,
[1:42:07.040 --> 1:42:10.240]  it's not a dead period. Like we're making progress and we're doing interesting things and we're
[1:42:10.240 --> 1:42:13.520]  going the other direction and saying, well, we're not making a lot of progress on the top end,
[1:42:13.520 --> 1:42:16.560]  but we can shrink these suckers down really small now, isn't that pretty awesome? You can have a
[1:42:16.560 --> 1:42:20.880]  smart phone or a smart watch, but there will have inevitably come a time where we come out of this
[1:42:20.880 --> 1:42:24.480]  slower period and go up into another hockey stick again, whether it's quantum computing or whatever,
[1:42:24.480 --> 1:42:28.400]  whether we're all dead or not. Like there will be further progress. This is not the end of progress,
[1:42:28.400 --> 1:42:34.880]  but if you're Apple and you're trying to figure out how to make the development platform for
[1:42:34.880 --> 1:42:39.520]  right now and for the next 20 years, you have to sort of bet like, what is the best fit for this?
[1:42:39.520 --> 1:42:44.640]  And it's, you know, Apple have the benefit of everyone else going first and going with virtual
[1:42:44.640 --> 1:42:50.080]  machines, whether it be Java or C Sharp or the common language runtime in Microsoft and seeing how
[1:42:50.080 --> 1:42:54.480]  JavaScript was worked out in the browser. And they've essentially said, because of both mobile
[1:42:54.480 --> 1:42:58.720]  and the slowdown and top end performance increase, we believe this is the best bet for the next
[1:42:58.720 --> 1:43:04.480]  20 years or so because they saw everyone else go before them. And so that's where we are with this.
[1:43:04.480 --> 1:43:08.960]  I don't think, you know, Swift is not, it's sort of the language for the next 100 years it could be.
[1:43:10.320 --> 1:43:14.080]  But again, the beauty of these details not being in Swift itself is there's nothing in the
[1:43:14.080 --> 1:43:17.600]  language itself that dictates that it couldn't be run on top of virtual machines. That's not the
[1:43:17.600 --> 1:43:22.000]  correct solution for Apple right now. And that's not what they're doing. All right, let me tell you
[1:43:22.000 --> 1:43:26.560]  about our next friend of the show and it's our good friends at Wealthfront. These guys have been
[1:43:26.560 --> 1:43:31.200]  sponsored on the show the last few episodes. They are, here's what they give you, a low cost automated
[1:43:31.200 --> 1:43:37.200]  investment service. It makes it super easy to invest your money the right way. You just put money
[1:43:37.200 --> 1:43:42.800]  into Wealthfront account and then they manage the portfolio. You ask, they ask you a couple questions
[1:43:42.800 --> 1:43:48.960]  about like how risk averse you are, how aggressive you want to be. Because you could obviously
[1:43:48.960 --> 1:43:52.800]  investing money, you know, that goes into the stock market, it could go down. It's not, you know,
[1:43:52.800 --> 1:43:57.360]  it's not a bank account. So they ask you a couple questions to see how comfortable you are with
[1:43:57.360 --> 1:44:02.880]  risk and then they just take it from there and that's it. They literally say whether you're just
[1:44:02.880 --> 1:44:07.520]  starting out, you can, I think you can open account which is 500 bucks. If you want to put millions
[1:44:07.520 --> 1:44:14.080]  of dollars in there, you can do it too. That seems crazy to me but, you know, really it scales all the
[1:44:14.080 --> 1:44:19.840]  way from, you know, you being $500 put in a market to millions of dollars, you can do it. Why would
[1:44:19.840 --> 1:44:24.400]  you use them instead of a traditional money manager? Basically what Wealthfront is, is an automated
[1:44:24.400 --> 1:44:30.800]  service that replaces a human money manager. The big reason to do it is that number one, they're just
[1:44:30.800 --> 1:44:35.840]  putting money into index funds anyway, which is really a smart long-term strategy. If you read
[1:44:35.840 --> 1:44:41.360]  anything about the ways that people can actually, you know, invest for success in a long-term,
[1:44:41.360 --> 1:44:44.800]  putting a money into index funds is the way to go. That's pretty much what Wealthfront does,
[1:44:44.800 --> 1:44:49.840]  but they balance it between different index funds based on, you know, monitoring systems all the
[1:44:49.840 --> 1:44:54.080]  time, you know, monitoring the market all the time and moving money around between different
[1:44:54.080 --> 1:45:00.880]  index funds to keep your risk at the right level. And the big thing is, is that Wealthfront charges
[1:45:00.880 --> 1:45:07.840]  way lower fees than traditional money managers. 1.0, 1% is about the average, but some of the,
[1:45:07.840 --> 1:45:13.040]  some of the money managers out there charge up to 3%. And that's of what you have under management.
[1:45:13.040 --> 1:45:19.280]  So if you have, you know, $10,000 under management, they take a fee of 3% of your money,
[1:45:19.280 --> 1:45:27.040]  not like your profits, but your money that's in there. Wealthfront fee is just 0.25%.
[1:45:27.760 --> 1:45:36.320]  And they only start charging that above $10,000. So if you only, you know, once you get $10,000 in
[1:45:36.320 --> 1:45:43.680]  your account, that's when they start charging their 0.25 fee. And if you use the code that I have
[1:45:43.680 --> 1:45:49.920]  here for you, they actually bump that up to $15,000. And so if you have $15,000 and then one,
[1:45:49.920 --> 1:45:56.160]  put one more dollar in there. They charge the fee on that $1 that's over $15,000. Keep going from there.
[1:45:57.680 --> 1:46:03.680]  Go to, here's where you go to find out more Wealthfront.com slash the talk show. And again,
[1:46:03.680 --> 1:46:08.240]  you can start with just $500. And they even say right here that that's really how most of the
[1:46:08.240 --> 1:46:12.400]  people who sign up for Wealthfront do it. Put a little money in there, see how it works. And then
[1:46:12.400 --> 1:46:16.160]  when you see how it works and you like the results, that's when you put your quote-unquote real money in.
[1:46:17.440 --> 1:46:23.200]  So go to Wealthfront.com slash the talk show. You'll actually save money because you get that
[1:46:23.200 --> 1:46:28.960]  you get bumped up to $15,000 before they even start charging you a nickel. So go check them out.
[1:46:28.960 --> 1:46:32.720]  And here's the part where I have to try to stay out of prison for compliance purposes.
[1:46:32.720 --> 1:46:37.760]  I have to tell you that Wealthfront Incorporated is an SEC registered investment advisor.
[1:46:37.760 --> 1:46:43.520]  Brokered services are offered through Wealthfront brokerage corporation. Remember,
[1:46:43.520 --> 1:46:49.760]  F-I-N-R-A-N-S-I-P-C. This is not a solicitation to buy or sell securities, investing in
[1:46:49.760 --> 1:46:55.280]  securities and false risks. And there is the possibility of losing money. Past performance is no
[1:46:55.280 --> 1:47:00.480]  guarantee of future results. Please visit Wealthfront.com to read their full disclosure.
[1:47:01.760 --> 1:47:04.560]  So far so good. Nobody from the SEC has gotten on me about this.
[1:47:04.560 --> 1:47:07.280]  It's only a matter of time until they find you.
[1:47:10.640 --> 1:47:13.840]  Anything else on Swift and the Federighi interview?
[1:47:15.040 --> 1:47:20.160]  I hope they do more of those things. And I think we're, are we working our way down the ladder?
[1:47:20.160 --> 1:47:27.680]  I guess we kind of are like Shiller coming to talk show and now Federighi and like we keep going down
[1:47:27.680 --> 1:47:32.720]  to like Chris Latinters on like open source podcast talking about programming languages with nerds
[1:47:32.720 --> 1:47:36.560]  that eventually you get like individual developers on like the UI kit team
[1:47:37.360 --> 1:47:40.080]  doing interviews now. Maybe they won't go that far but I don't know.
[1:47:40.080 --> 1:47:45.200]  I like the idea because as you go down the chain people you would think would be both in the
[1:47:45.200 --> 1:47:51.040]  position and through zastic about talking about more small technical details. The old Apple
[1:47:51.040 --> 1:47:58.560]  the idea was we speak with one voice from the top and that one voice doesn't say too much.
[1:47:58.560 --> 1:48:03.520]  And now we're kind of moving down the ladder. Well, we speak with multiple voices from the top
[1:48:03.520 --> 1:48:07.600]  tiers and so they can talk about a little bit different things like you know Phil Shiller is not
[1:48:07.600 --> 1:48:13.600]  going to talk to you about you know runtime casting things into protocols, right? But Craig
[1:48:13.600 --> 1:48:19.760]  Freddie Reed will. So as you keep going down the conversations get more interesting to narrow
[1:48:19.760 --> 1:48:23.920]  audiences as opposed to always just being like the big picture or what is Apple doing type of stuff.
[1:48:23.920 --> 1:48:29.200]  So I enjoy that. The thing I've detected it what I would define the new Apple the difference
[1:48:29.200 --> 1:48:36.160]  you know Apple and new Apple is that they're remain committed to secrecy on future products for
[1:48:36.160 --> 1:48:40.080]  the exact same reasons they always have been that they don't want competitors to know and that
[1:48:40.080 --> 1:48:43.920]  from a marketing perspective they feel that being able to unveil these things as a surprise
[1:48:44.720 --> 1:48:48.800]  is an advantage and that it gets them a lot of publicity around their events and announcements that
[1:48:48.800 --> 1:48:53.840]  they wouldn't have if they were blabbing about everything in advance and I think also just
[1:48:53.840 --> 1:48:58.880]  the good old fashioned under promise over over deliver that if you keep talking about stuff in the
[1:48:58.880 --> 1:49:04.080]  future all the time have inevitably some of these things are going to ship late and then you've
[1:49:04.080 --> 1:49:10.080]  disappointed people in terms and you know but for stuff that's already shipped and talking about
[1:49:10.080 --> 1:49:14.240]  decisions they've already made and the stuff that's out there I think that's where the differences
[1:49:14.240 --> 1:49:19.360]  and I feel like old Apple was if we're misunderstood screw them I don't we don't care you know
[1:49:19.360 --> 1:49:26.000]  you either get it or you don't and I feel like new Apple at an executive level really is
[1:49:26.000 --> 1:49:32.880]  it's it's the openness is coming from the frustration I think of being misunderstood and feeling like
[1:49:32.880 --> 1:49:37.520]  if we could just explain ourselves we'd be less misunderstood and I wish that we could do that
[1:49:38.240 --> 1:49:42.640]  if only like all of our commentary on our blogs and podcasts and everything only had a
[1:49:42.640 --> 1:49:47.600]  username but they had no way to contact us like the App Store. Would that be frustrating Apple?
[1:49:47.600 --> 1:49:51.120]  Like if people were misunderstanding you but there was just no way you could find who this
[1:49:51.120 --> 1:49:56.080]  John Gruber guy was to talk to him about it. I mean that's a good contrast in terms of the
[1:49:56.080 --> 1:50:01.600]  organizations like they'll talk a lot about the roadmap for Swift and Swift 3 and engage with the
[1:50:01.600 --> 1:50:05.280]  community about what we best about this programming language that now is going to be much bigger
[1:50:05.280 --> 1:50:09.360]  than Apple itself and as a community project but no one will talk to you about the App Store even
[1:50:09.360 --> 1:50:15.600]  if you have an it's just such a such a contrast in terms of if I could just talk to a person who
[1:50:15.600 --> 1:50:19.920]  would be reasonable with me like surely we could work this out you hear all the crazy stories
[1:50:19.920 --> 1:50:24.480]  about like an app that's in review forever or they think you're violating someone's copyright
[1:50:24.480 --> 1:50:28.720]  when it's like no you don't understand it's the opposite there and violating mine and just
[1:50:28.720 --> 1:50:31.680]  things that you feel like could be worked out between two reason people who just talk to each
[1:50:31.680 --> 1:50:35.760]  other on the phone that nevertheless take months to come to an unsatisfying conclusion.
[1:50:35.760 --> 1:50:42.560]  What was there was an app oh I know it was when what was the app that that quit the App Store
[1:50:42.560 --> 1:50:49.760]  which one sketch well no the one it was recent so sketch announced that they were leaving the
[1:50:49.760 --> 1:50:54.480]  App Store and again I don't know I don't want to call it the straw that broke the camel's back
[1:50:54.480 --> 1:50:58.240]  I don't know that it's going to mean that anything is going to happen but to me it was just
[1:50:58.240 --> 1:51:04.800]  emblematic of the problems and especially in the Mac App Store because sketch was to my mind
[1:51:04.800 --> 1:51:13.840]  the prototypical modern Mac productivity app it's it's beloved it's so popular I mean an
[1:51:13.840 --> 1:51:19.520]  Apple obviously knows it's popular they ship with like the the watch OS SDKs they ship
[1:51:20.560 --> 1:51:26.160]  Photoshop templates for watch UI design and sketch templates for watch UI design so
[1:51:26.160 --> 1:51:29.440]  and I think those are the only two you know obviously anybody who uses a different graphics
[1:51:29.440 --> 1:51:33.600]  program could open up the PSDs and convert them or something like that but the two that Apple
[1:51:33.600 --> 1:51:39.440]  ships you know that you can just download from apple dot com are for sketch and Photoshop so to put
[1:51:39.440 --> 1:51:45.760]  it on the same pedestal as Photoshop is you know it's pretty good and they've won Apple design
[1:51:45.760 --> 1:51:50.400]  awards and they've been heavily promoted in the App Store and for them to leave the App Store to
[1:51:50.400 --> 1:51:55.840]  me it's just wow if they if they're not happy in the App Store who is this best one that's when
[1:51:55.840 --> 1:51:59.520]  Apple's narrative doesn't fit anymore because if you're an Apple and you want to have a narrative
[1:51:59.520 --> 1:52:03.280]  to make yourself feel better about App Store complaints you feel like well these are just
[1:52:03.280 --> 1:52:06.160]  they're kind of like the same way you talk about the complaints about it you know I don't need
[1:52:06.160 --> 1:52:10.000]  dark retain releases fine like well these are just the old people like we love them they're
[1:52:10.000 --> 1:52:14.560]  loyal to our platform they've been there a long time your Adobe's your Microsoft's here whatever
[1:52:14.560 --> 1:52:19.840]  but really the future of the platform is about new blood it's about new developers developers
[1:52:19.840 --> 1:52:23.600]  we haven't heard of like say someone makes a new graphics application that's not a Adobe
[1:52:24.400 --> 1:52:29.040]  that's from a smaller team that they grows up on our platform that we were the first and only
[1:52:29.040 --> 1:52:34.800]  platform that they targeted that it is native to us that you know like that's what Apple wants like
[1:52:34.800 --> 1:52:40.320]  oh these this fresh young faces like new talent essentially that because that's the future of
[1:52:40.320 --> 1:52:43.520]  the platform the future of the platform is not old crusty people who've been shipping on the
[1:52:43.520 --> 1:52:48.640]  Apple platforms for 30 years right it's new people and so if a new company you've never heard of
[1:52:48.640 --> 1:52:53.920]  comes along and makes this great graphics application that is you know taking the world by storm
[1:52:53.920 --> 1:52:59.040]  and Apple saying putting them up alongside Photoshop and they say you know you know we're out we can't
[1:52:59.040 --> 1:53:02.240]  take the app store stuff anymore then you can't just say well really the app store is great for
[1:53:02.240 --> 1:53:06.560]  everybody's just you old crusty people who are used to the old ways you know it breaks the narrative
[1:53:06.560 --> 1:53:11.120]  yeah one of the ways that sketch again is like to me a poster child of what Apple wants
[1:53:11.120 --> 1:53:15.920]  third party apps to be is like exactly what you said it's Mac only and it's not Mac only because
[1:53:15.920 --> 1:53:21.520]  they you know it's because they've how does a small team build an app that in some ways can
[1:53:21.520 --> 1:53:28.320]  compete toe-to-toe Photoshop it's because they're leveraging all of this great graphics stuff built
[1:53:28.320 --> 1:53:35.120]  into Mac OS 10 same thing with Pixelmater same thing with Acorn from our pal Gus you know that
[1:53:35.120 --> 1:53:41.040]  these apps written these graphics apps written by really small teams I mean Gus is the only developer
[1:53:41.040 --> 1:53:48.240]  at flying meat I mean it's a one person team there he can make an app that that credibly stands as a
[1:53:48.240 --> 1:53:52.960]  professional image editor because he's leveraging it wouldn't even make any sense to go cross
[1:53:52.960 --> 1:53:58.640]  platform because it's it's all built on the system stuff and that's what Apple wants for multiple
[1:53:58.640 --> 1:54:04.480]  reasons one that's why they give you these APIs and they are happy to see them used and then they
[1:54:04.480 --> 1:54:10.960]  know that when they add new features to the operating system like what's the thing on the new
[1:54:10.960 --> 1:54:17.360]  retina 5k Max where there's more colors on the monitor the p3 go color diameter whatever it's called
[1:54:17.360 --> 1:54:22.080]  right so then these apps I think sketch one of these apps I know I just saw him to release
[1:54:22.080 --> 1:54:26.320]  notes on the app store one of them just release an update that has support for it already
[1:54:26.320 --> 1:54:31.360]  whereas in the old days when you're you know like not to badmouth Adobe but with like with Adobe
[1:54:31.360 --> 1:54:36.560]  stuff where they're cross platform they couldn't adopt like a new great new Mac technology like
[1:54:36.560 --> 1:54:42.720]  this deep color on the 5k iMacs because they have this graphics engine that is a level of
[1:54:42.720 --> 1:54:48.480]  abstraction and it's based on what's available on Mac and windows and if windows doesn't have it
[1:54:48.480 --> 1:54:52.960]  maybe there's you know it's gonna take them longer to be able to adopt it because then you've got
[1:54:52.960 --> 1:54:57.680]  these files that have you know deep color that don't show up on windows or something like that
[1:55:00.640 --> 1:55:04.320]  it's just a perfect example of doing it the right way and then here they are getting out
[1:55:04.320 --> 1:55:07.920]  anyway the one thing that stuck out to me on this and you like your example if wouldn't it be
[1:55:07.920 --> 1:55:13.280]  great if you could just talk to somebody and work this out was in the hubbub over sketch leaving
[1:55:13.280 --> 1:55:19.840]  the app store I was reading Michael Sy had a great blog post like a roundup blog post with like
[1:55:19.840 --> 1:55:24.560]  you know eight nine ten different reactions from around the web and he just noted at the end of
[1:55:24.560 --> 1:55:30.880]  the noted without any further comment that he has an update to a Mac app that's been pending review
[1:55:30.880 --> 1:55:35.120]  it's just a bug fix update to one of his apps that was pending review for 59 days
[1:55:35.120 --> 1:55:41.280]  I mean what what does that what kind of sense does that make here's a bug fix for my users
[1:55:41.280 --> 1:55:45.840]  and 59 days later it's still waiting to go into review yeah and even though you could
[1:55:45.840 --> 1:55:49.360]  say it's like prioritization or whatever and you might feel bad about it but the ones that
[1:55:49.360 --> 1:55:53.600]  just really drive me nuts is where like it's a misunderstanding like it's a romantic comedy
[1:55:53.600 --> 1:56:00.160]  level misunderstanding and and and it's just like listen to me you're not like it's like
[1:56:00.160 --> 1:56:03.600]  in a romantic comedy series but like I think it just if these two people just got together and
[1:56:03.600 --> 1:56:06.960]  explain this one thing like the whole rest of the movie would be pointless right and this is like
[1:56:06.960 --> 1:56:10.320]  this in the app store but there's no one for you to talk to like you you send your little message
[1:56:10.320 --> 1:56:13.840]  in a bottle and then you wait and then you wait and then you wait and this inscrutable reply
[1:56:13.840 --> 1:56:18.320]  comes back it's like no you didn't understand me you did you even read what I wrote like it's
[1:56:18.320 --> 1:56:22.720]  is this an automated system is there a human there can I talk to somebody somebody who is both
[1:56:22.720 --> 1:56:26.880]  empowered and able to understand like there's like there's a language barrier like they don't you know
[1:56:26.880 --> 1:56:31.200]  I think the one about copyright was that like with some a bunch of scammers reporting of applications
[1:56:31.200 --> 1:56:35.440]  that appeared to come from a different developer and then Apple would flag the legitimate developer
[1:56:35.440 --> 1:56:39.840]  to say they were violating the copyright it was like whatever was that stuff like that is very
[1:56:39.840 --> 1:56:43.440]  frustrating like and that essentially what that comes down to is like like in a romantic comedy
[1:56:43.440 --> 1:56:49.360]  just merely a lack of communication and how can Apple be doing so well and improving so much in
[1:56:49.360 --> 1:56:54.480]  its communication like keeping the advantages like you said of like keeping your product secret and not
[1:56:54.480 --> 1:56:57.920]  and not showing everything you're even thinking of making because then people are disappointed
[1:56:57.920 --> 1:57:03.520]  but also being open to feedback and having a community where human beings talk to other
[1:57:03.520 --> 1:57:07.120]  human beings doesn't mean they're always going to agree it doesn't mean that people outside
[1:57:07.120 --> 1:57:11.760]  Apple are telling Apple to do but just to make sure everyone's all on the same page and obviously
[1:57:11.760 --> 1:57:16.400]  it's a much more advantageous for programming language which is less of a competitive advantage
[1:57:16.400 --> 1:57:22.800]  for Apple than like its individual features or whatever the app store like it's just it's so
[1:57:22.800 --> 1:57:28.800]  clearly a different philosophy dictating the the public face of that part of the organization
[1:57:28.800 --> 1:57:32.960]  than the other and I know it's all one big place and Apple tries to speak with one voice but
[1:57:34.080 --> 1:57:41.600]  it just it's becoming increasingly clear where the lines are in terms of like the new
[1:57:41.600 --> 1:57:48.480]  Apple that you were describing and the old Apple that's still inside there and and you know who
[1:57:48.480 --> 1:57:51.760]  knows like who's to say that that is or is inappropriate for the individual things is just
[1:57:51.760 --> 1:57:57.360]  difference in like what department am I talking to what is the subject that we're that we're even
[1:57:57.360 --> 1:58:07.040]  talking about and how then does Apple talk about it? 59 days in review, what the hell?
[1:58:14.160 --> 1:58:17.760]  I guess I could take another break here and if you want to talk anything else about Swift,
[1:58:17.760 --> 1:58:22.560]  I guess the other thing I'm one other thing I thought about with Swift I know Apple's they've said
[1:58:22.560 --> 1:58:27.040]  this for a while but you know Federiques had this in his talking points all week long which is that
[1:58:27.040 --> 1:58:34.000]  they really really think that Swift could be the like the default go to programming language not
[1:58:34.000 --> 1:58:39.280]  just for their platforms and writing apps for their platforms but just like you know high school
[1:58:39.280 --> 1:58:42.720]  kids who are learning the program middle school kids I mean I don't know why wait till high school
[1:58:42.720 --> 1:58:49.280]  but kids learning the program computer science courses in college you know why not you know
[1:58:49.280 --> 1:58:54.720]  that they see Swift as the language that could take that role which to me is it I believe it I
[1:58:54.720 --> 1:59:01.360]  really think that they they mean it but that's something such an incredibly ambitious goal for
[1:59:01.360 --> 1:59:06.160]  programming language. I think it sounds more reasonable when you think about well what are those
[1:59:06.160 --> 1:59:12.800]  people learning with now because I can tell you it's not C like I think most of the time it's
[1:59:12.800 --> 1:59:18.400]  Java or JavaScript which I guess is JavaScript probably isn't terrible because it's a pretty
[1:59:18.400 --> 1:59:24.080]  simple language. Do you think comp size with JavaScript or do you think it's Java? Java I think is the
[1:59:24.080 --> 1:59:29.120]  most common teaching language at this point some schools like you know I think MIT still is
[1:59:29.120 --> 1:59:35.200]  something with scheme and Lisp and all that business but the days of them teaching C is your first
[1:59:35.200 --> 1:59:40.160]  program I might I think are a long gone and C++ same type like what is a better teaching language
[1:59:40.160 --> 1:59:46.880]  what it gets to like if not Swift and what and if Java is the answer I think Swift has fewer
[1:59:47.760 --> 1:59:51.520]  well it's difficulty when they say that like Swift is going to be language then which Swift
[1:59:51.520 --> 1:59:57.120]  do you want to teach Swift one oh no Swift two oh no like again it's barely sitting up at this point
[1:59:57.120 --> 2:00:02.000]  so this is obviously a long-term plan but once Swift settles down being a more modern language
[2:00:02.000 --> 2:00:07.440]  it's either going to be Swift or something like Python or JavaScript that's an even higher
[2:00:07.440 --> 2:00:11.280]  level language because learning languages don't need to care about performance and stuff like that
[2:00:11.280 --> 2:00:17.440]  so you can get away with using not only say a toy language but a much much higher level language
[2:00:17.440 --> 2:00:21.280]  that you just want them to deal with the concepts and I think the only thing that will hold Swift
[2:00:21.280 --> 2:00:28.080]  back is Swift is a complicated language Swift has a lot of features right and a lot of the features
[2:00:28.080 --> 2:00:34.160]  in Swift I think make more sense in the context of understanding simpler languages first
[2:00:34.160 --> 2:00:38.320]  Swift is not a simple language there is a lot there is a lot to it it's very powerful there's a
[2:00:38.320 --> 2:00:42.720]  lot of concepts and things in there not details that you don't care about like memory management
[2:00:42.720 --> 2:00:46.480]  crappled there's a little tiny bit of that if you really want to get into it but what do they
[2:00:46.480 --> 2:00:52.640]  have like an unsafe pointer type yeah like they've got the go ahead screw yourself abilities
[2:00:52.640 --> 2:00:57.520]  in there but that's but you wouldn't teach that but even just the concepts of the way it handles
[2:00:57.520 --> 2:01:02.800]  you know all the different prototypes and the class extensions and inheritance and window
[2:01:02.800 --> 2:01:06.480]  I use a class and when do I use a struct and value type sources reference types and there's
[2:01:06.480 --> 2:01:11.520]  there's a lot of things in there that aren't in much simpler languages like back in the old days
[2:01:11.520 --> 2:01:17.200]  tickle tcl you know or like logo with a little turtle turtle or even something like python I mean
[2:01:17.200 --> 2:01:22.560]  I guess every language has its grotty corners but Swift is already a pretty full feature language
[2:01:22.560 --> 2:01:28.320]  and it's going to get even fuller featured with time so that may hold it back from being a teaching
[2:01:28.320 --> 2:01:31.280]  language because in some respects it's teaching language you don't even need it to be a real
[2:01:31.280 --> 2:01:35.040]  language I guess you need to execute for your exercises and stuff but you're not teaching them
[2:01:35.040 --> 2:01:37.920]  here's the programming language you're going to use when you enter the industry like it's not
[2:01:37.920 --> 2:01:41.760]  a vocational school you're teaching them concepts which is why MIT can teach the list been scheme
[2:01:41.760 --> 2:01:46.000]  and everything in ml or whatever and it's like I don't care if you can use this we're just trying
[2:01:46.000 --> 2:01:50.400]  to teach you conceptually how this works and why python again python another language that many
[2:01:50.400 --> 2:01:53.680]  people outside looks like pseudocode especially since there's no curly braces in the indentation
[2:01:53.680 --> 2:01:57.520]  is mandatory you can go to your algorithms book and see the algorithms for red black trees and
[2:01:57.520 --> 2:02:01.120]  you can write it in a python and it looks a lot like it did in your algorithms book that didn't
[2:02:01.120 --> 2:02:05.280]  you know the algorithms book just has English words and it's not a programming book at all right
[2:02:05.280 --> 2:02:11.280]  so I think the road to Swift being a teaching language may be difficult but if I had to pick
[2:02:12.480 --> 2:02:17.040]  do you want to teach this course in Java or in Swift I think Swift would be better if only
[2:02:17.040 --> 2:02:22.320]  because jobs get even more weirdness in terms of like primitives versus you know auto boxing and
[2:02:22.320 --> 2:02:28.320]  object types and all sorts of re-craft like that so I've never written Java so I'm speaking from a
[2:02:28.320 --> 2:02:34.960]  position of admitted some level of ignorance but I've you know everything I've ever seen of Java is
[2:02:36.960 --> 2:02:44.400]  just it's so verbose it really I find it very off-putting yeah and there's a lot of like there's
[2:02:44.400 --> 2:02:49.360]  a lot of weirdness in Java that has to do with like yeah I think it was a funny part of speaking
[2:02:49.360 --> 2:02:53.520]  of things that would sound really future funny part of quick video reason to read when you were
[2:02:53.520 --> 2:03:00.160]  saying or service side languages like Java number was not made as a service side it was a language
[2:03:00.160 --> 2:03:05.680]  for set top boxes right and in fact it's what everybody programs on to write Android apps right
[2:03:05.680 --> 2:03:12.160]  all right you know well it's well that's yeah but like it's origins were for set top boxes that
[2:03:12.160 --> 2:03:16.080]  eventually it's it's second life was oh these are gonna be applets they're gonna run in your browser
[2:03:16.080 --> 2:03:20.400]  like it was the opposite of server side it was gonna be code that we send from a server to your client
[2:03:20.400 --> 2:03:24.320]  and runs in people's web browsers and then it has third life as you know what we're just going to
[2:03:24.320 --> 2:03:28.160]  have this is a memory-managed language on the server because it's faster than all those scripting
[2:03:28.160 --> 2:03:34.640]  languages and it doesn't require manual memory management like C++ it always struck me and I know
[2:03:34.640 --> 2:03:40.960]  that it came from Sun and that Sun was a you know typical laid-back Valley you know corporation
[2:03:40.960 --> 2:03:44.720]  god isn't it funny they have to talk about Sun in the past tense and it even feels like the past
[2:03:44.720 --> 2:03:50.320]  tense yeah kids don't even know what Sun is you know I know that's where it started but the
[2:03:50.320 --> 2:03:54.320]  syntax of it looked so corporate to me it looked like the type of programming language that was
[2:03:54.320 --> 2:03:59.520]  written by like IBM programmers who still were like a certain tie to work and and like the type of
[2:03:59.520 --> 2:04:05.200]  people who like they your email is configured and you can't even change it so that you have like a
[2:04:05.200 --> 2:04:10.400]  12 line legal disclaimer in your signature you know that you know if you've gotten this email by
[2:04:10.400 --> 2:04:15.440]  mistake you're legally obligated to delete it and notify us immediately you know it just looks like
[2:04:15.440 --> 2:04:19.680]  that type of programming language we're just to have a simple class you've got like 12 lines of
[2:04:19.680 --> 2:04:25.680]  bullshit boilerplate for everything yeah I never like trying to do hello world and having to make
[2:04:25.680 --> 2:04:32.000]  like a class that I mean there's a certain symmetry to it like that it is kind of like if you
[2:04:32.000 --> 2:04:37.280]  compare it to C++ or something like that it was trying to make a more rationalized world and I
[2:04:37.280 --> 2:04:42.160]  think as one of the first languages to really break out and be successful in doing that I
[2:04:42.160 --> 2:04:46.480]  definitely feel like it has a I have respect for it as making a substantial leap over what came
[2:04:46.480 --> 2:04:51.360]  before but I have respect for it but it's I didn't like it I when I went to Drexel in the 90s
[2:04:51.360 --> 2:04:56.560]  and majored in computer science we learned Pascal at first like the first year courses were
[2:04:56.560 --> 2:05:04.080]  Pascal and people used to complain some people not largely but people there were complaints like on
[2:05:04.080 --> 2:05:09.280]  the mailing list like students complained into the faculty that you know why are we learning Pascal
[2:05:09.280 --> 2:05:14.080]  note there's no jobs in Pascal everybody wants C programmers and you know the professors you know
[2:05:14.080 --> 2:05:18.400]  if they would respond or I guess it wasn't mailing list it was new you know the news groups we had
[2:05:18.400 --> 2:05:22.880]  for the computer science department and they would just be like we're not running a vocational school
[2:05:22.880 --> 2:05:28.160]  here if you learn how to program you'll be able to program in any language which is true I mean it's
[2:05:28.160 --> 2:05:33.680]  you know it's not like you know you learn how to program and see and then you don't add a program
[2:05:33.680 --> 2:05:38.800]  another one you just have to learn this in text but like when I took object-oriented programming
[2:05:38.800 --> 2:05:46.080]  it was C++ and I thought wow object-oriented programming sucks that's when I took away from
[2:05:46.080 --> 2:05:52.960]  object-oriented programming in college I was like wow this is this bullshit yeah I mean and it's
[2:05:53.600 --> 2:05:58.400]  like that's the thing about teaching languages is you're trying to teach concepts
[2:05:58.400 --> 2:06:04.080]  and they may be concepts that are pretty new but you have to have an embodiment of those
[2:06:04.080 --> 2:06:07.840]  concepts teaching because you do want people to write code that executes and every embodiment comes
[2:06:07.840 --> 2:06:13.680]  with its own BS like whatever that BS may be whether it may be oh it started out as a series
[2:06:13.680 --> 2:06:20.240]  of macros on top of C and so it's got some you know see grotiness in there or this language is
[2:06:20.240 --> 2:06:23.520]  obsessed with performance so there's a lot of crap that you don't quite understand that complicates
[2:06:23.520 --> 2:06:29.280]  things but it's needed for performance or Java like this is the this was originally made for
[2:06:29.280 --> 2:06:33.120]  set thought boxes and later was used for web applets and this is a whole bytecode thing that's
[2:06:33.120 --> 2:06:38.080]  going on and they tried to make a new portable framework that works everywhere so you
[2:06:38.080 --> 2:06:42.560]  why the health is file I would look all crazy well it has to work everywhere and can't rely on
[2:06:42.560 --> 2:06:47.680]  any pretty you know it's like there's a virtual machine and it's not using the native libraries
[2:06:47.680 --> 2:06:52.800]  in the platform and everything is all verbose and you know and that that baggage is not part
[2:06:52.800 --> 2:06:57.200]  of what they're trying to teach you but you have to end up learning it as part of the course and
[2:06:57.200 --> 2:07:02.160]  if things go awry the course can end up being being more about that baggage or get distracted and
[2:07:02.160 --> 2:07:06.240]  think that baggage is part of the essential concept like you said thinking that C++ is object
[2:07:06.240 --> 2:07:10.960]  oriented programming two very separate different things and if that's it and it was mine too as
[2:07:10.960 --> 2:07:16.880]  first object oriented language I learned with C++ it really warps your worldview and you can't
[2:07:16.880 --> 2:07:21.600]  help if you're teaching that course to be influenced by the language you're choosing so I'm glad
[2:07:21.600 --> 2:07:26.960]  that people upgraded from C and C++ to Java because it was a significant step up in terms of the
[2:07:26.960 --> 2:07:31.840]  BS that you have to learn and deal with but Java has its own BS and Swift has its own BS too
[2:07:31.840 --> 2:07:36.400]  especially now that it's changing every year that if you teach the course one year your previous
[2:07:36.400 --> 2:07:40.480]  assignments won't even compile that next year like maybe it's not time to jump on the Swift
[2:07:40.480 --> 2:07:46.160]  bandwagon yet but but over time yeah you need to upgrade the language you're using to teach and
[2:07:46.160 --> 2:07:51.680]  hopefully they get better over time and have less BS here's the thing I guess I I think I had it in
[2:07:51.680 --> 2:07:57.920]  my notes for the interview with Craig Federighi I don't think I got to it and I think it was because
[2:07:57.920 --> 2:08:06.160]  it was it just seemed like a dead end to try to get it out of him but that I don't know how
[2:08:06.160 --> 2:08:10.560]  I would have asked it but the basic idea being that a lot of times a programming language is it
[2:08:10.560 --> 2:08:16.560]  starts to fuel the creator of the language's personal itch Pearl is a perfect example of that say
[2:08:16.560 --> 2:08:20.960]  what you want about Pearl me and you you know I know you still write Pearl as your job right
[2:08:21.760 --> 2:08:26.320]  still do and you know everything I've ever done of any consequence programming
[2:08:26.320 --> 2:08:31.440]  license written in Pearl the my reference markdown implementation is Pearl
[2:08:34.000 --> 2:08:38.960]  I wouldn't you know I still I like it and I think for me for me personally because I
[2:08:38.960 --> 2:08:43.200]  most of what I want to do is string manipulation that's why Pearl is great and but the fact that
[2:08:43.200 --> 2:08:47.600]  it's so great it's string manipulation was the fact that Larry Walt was wanted to do things like
[2:08:47.600 --> 2:08:51.840]  that and if you read back to when he created it it was you know he was writing these little
[2:08:51.840 --> 2:08:56.640]  glue scripts for what was it like the NSA or something like that it was some kind of government
[2:08:56.640 --> 2:09:02.400]  I think it was NASA NASA I think you're off by one letter on that acronym but he was like
[2:09:02.400 --> 2:09:06.880]  FT you know I had these automated things that need to run and FTP the results up to a certain
[2:09:06.880 --> 2:09:10.480]  server and that it was automating with scripts and he was like wow this is terrible it
[2:09:10.480 --> 2:09:13.840]  used to be a lot easier if I just made my own little scripting language that made this easier to do
[2:09:13.840 --> 2:09:19.040]  and then it grew from there and all sorts of other languages have origins like that and I just
[2:09:19.040 --> 2:09:26.800]  wonder whether is it a problem that Swift is being steered by someone who's a systems designer who
[2:09:26.800 --> 2:09:32.640]  writes you know the LLVM and C-Lang and writes these compilers is it is there a problem having a
[2:09:32.640 --> 2:09:36.000]  language written by the compiler guy because you're making things you're trying to make things
[2:09:36.000 --> 2:09:40.800]  easier for the compiler and optimize things from the compiler as opposed to making a language
[2:09:40.800 --> 2:09:48.320]  that makes it more possible to be expressive as a GUI aptives designer well that foundational bet
[2:09:48.320 --> 2:09:55.280]  on you know arc essentially versus a virtual machine is at the core I feel like of the design
[2:09:55.280 --> 2:09:59.680]  of Swift because it's baked in entirely and that is definitely from a compiler writers perspective
[2:09:59.680 --> 2:10:07.280]  and Craig touched on this as well if you are writing a compiler dealing with a language that makes
[2:10:07.280 --> 2:10:11.760]  it so you can't add certain obvious optimizations because according to the semantics of the
[2:10:11.760 --> 2:10:16.320]  language you can't be sure did this thing you know I can't be sure what that is going to get called
[2:10:16.320 --> 2:10:21.600]  here I'm not I'm not going to know until runtime a compile time I have no idea so like Craig said
[2:10:21.600 --> 2:10:26.080]  do the compiler has hands tied behind its back both hands sometimes and it's just like well
[2:10:26.080 --> 2:10:30.960]  now I can do but I just got to put in this code to execute this at runtime a look up the method
[2:10:30.960 --> 2:10:34.720]  and well executed and you can try to do some optimizations and the whole fact that there's a runtime
[2:10:34.720 --> 2:10:38.640]  that all your code gets turned into calls to the sea library for object of sea message send and we
[2:10:38.640 --> 2:10:42.800]  can optimize the hell out of that with assembly code or whatever the bottom line is we can't
[2:10:42.800 --> 2:10:46.240]  we can't inline it because we don't even know what the hell method is going to be like there's
[2:10:46.240 --> 2:10:51.920]  that there's dynamism in the language that the compiler can't handle like so if you're a compiler guy
[2:10:51.920 --> 2:10:56.960]  like what is really frustrating like I know I can make this go faster I know I can make this safer
[2:10:56.960 --> 2:11:01.040]  I know I can make it so I can I can guarantee that this is always going to be initialized
[2:11:01.040 --> 2:11:04.720]  there's nothing a programmer can do to end up with this half initialized object that's going to
[2:11:04.720 --> 2:11:07.520]  cause a segue ball because they didn't realize through this chain of code that they're halfway
[2:11:07.520 --> 2:11:11.200]  through the initialize just and I call a method and tries to read some object attribute that has
[2:11:11.200 --> 2:11:15.600]  garbage data in it because it wasn't initialized that I can fix that in the language and I can say
[2:11:15.600 --> 2:11:19.040]  this language guarantees that by the time this object is constructed all this stuff has been
[2:11:19.040 --> 2:11:24.160]  initialized it's guaranteed by the language is guaranteed by the compiler that bug is gone for
[2:11:24.160 --> 2:11:27.760]  everybody's code or calling a method on the thing that doesn't exist that bug is gone for me I
[2:11:27.760 --> 2:11:32.000]  can guarantee that right and so it's not just that he's like I just want to make it good for the
[2:11:32.000 --> 2:11:37.120]  compiler the compiler guy also sees all the places where you know where bugs happen where
[2:11:37.120 --> 2:11:40.960]  progress fall down and he can solve that I think about you're getting at it's like okay but if you
[2:11:40.960 --> 2:11:45.120]  mostly write compilers you know where I go yaps maybe you're making a language that makes it more
[2:11:45.120 --> 2:11:50.400]  difficult to write UI kit or app kit or some like one of these great GUI libraries that helps
[2:11:51.120 --> 2:11:57.120]  application developers make the applications that they make for the Mac and for iOS and I think
[2:11:57.120 --> 2:12:04.400]  I mean there's two things giving people that impression one is there is a match between the
[2:12:04.400 --> 2:12:11.520]  language and the libraries in terms of culturally as well as technically and early in Swift's life
[2:12:11.520 --> 2:12:14.800]  one of the main requirements of Swift is you have to be able to call into Objective C and all
[2:12:14.800 --> 2:12:18.160]  that you have to be able to interact you have to be able to write an application partially in
[2:12:18.160 --> 2:12:22.560]  Swift and partially Objective C it's a non-starter and it can't it can't be it may not be optimal
[2:12:22.560 --> 2:12:27.840]  but it can't be terrible to drop into an object you know to call into an object of C library
[2:12:27.840 --> 2:12:31.520]  and like Craig said you can't wait around to be like well we got a new language and then a whole
[2:12:31.520 --> 2:12:35.200]  new set of libraries and a whole new set like you can't just start from scratch there's too much
[2:12:35.200 --> 2:12:40.480]  value and investment in what and all the existing frameworks and libraries and then you'd still be
[2:12:40.480 --> 2:12:45.360]  in case we have dual libraries like a whole separate stack for Swift and you know it's not so you
[2:12:45.360 --> 2:12:49.600]  have to do have to have that interaction with it and that interaction is going to be a little bit weird
[2:12:49.600 --> 2:12:53.520]  like all the crazy annotations they have in Objective C libraries to get better interfaces with
[2:12:53.520 --> 2:12:58.800]  Swift and you have to think really hard about like hard that I want cocoa yeah I mean they
[2:12:58.800 --> 2:13:02.640]  eventually settled that right but you know during the transition you got to do what you got to do
[2:13:02.640 --> 2:13:07.440]  it in transition right I think that transition makes Swift look bad because if it was a top
[2:13:07.440 --> 2:13:12.240]  to bottom Swift stack it would be clear hey how do I use Swift to make a goo yeah right now it's
[2:13:12.240 --> 2:13:18.800]  hey how do I use Swift to use Objective C libraries to make a goo yeah and there's this drive by
[2:13:18.800 --> 2:13:23.200]  people writing code like I just want to be pure Swift but you can't really be pure Swift at this
[2:13:23.200 --> 2:13:27.200]  point like they feel like it's a defeat to say well I'm using Swift but I'm basing everything on
[2:13:27.200 --> 2:13:32.320]  NS object because I just want those type of semantics like it feels it feels dirty doesn't feel
[2:13:32.320 --> 2:13:35.840]  pure Swift and it's not going to be for a Swift top to bottom for a long time just because of the
[2:13:35.840 --> 2:13:40.880]  reality of the situation they're in and the second thing I think that is helping that you have
[2:13:40.880 --> 2:13:47.600]  to take me to mind is that yes Swift is a language written by a compiler guy that does a lot of
[2:13:47.600 --> 2:13:53.680]  things that make it easier to write a compiler and then make it easier to make code that's guaranteed
[2:13:53.680 --> 2:13:59.520]  to be safe but that guy had to pitch his language to an organization filled with people who make
[2:13:59.520 --> 2:14:05.040]  GUI applications he had to convince like Ali Ozer that you know this new language that I came
[2:14:05.040 --> 2:14:09.280]  up to it within my basement or whatever I think should be the language for the next 20 years of
[2:14:09.280 --> 2:14:14.960]  Apple and it's an awesome way to write iOS and Mac apps he had to make that case it's not like
[2:14:14.960 --> 2:14:20.560]  he's not the dictator of Apple right he didn't say I came up with Swift and we're going to use it
[2:14:20.560 --> 2:14:24.960]  and I feel like the people he had to make that case too know what the heck they're doing
[2:14:24.960 --> 2:14:28.560]  and it had to have been a good case so I don't know yeah have no problem standing up for their
[2:14:28.560 --> 2:14:37.120]  you know for their own thoughts and he's not their boss right so I've you know it's it's very
[2:14:37.120 --> 2:14:41.520]  uncomfortable in the phase we are now where it's so clear that there are barriers to making this
[2:14:41.520 --> 2:14:46.160]  work and Swift isn't done yet and all these other things that are true but I'm not really ready
[2:14:46.160 --> 2:14:51.520]  to bang the gavel on anything having to do with like well Swift is not as well suited for
[2:14:51.520 --> 2:14:56.160]  making GUI apps as Objective C was yeah you could say that the current version of Swift is not
[2:14:56.160 --> 2:15:02.080]  as well suited as Objective C for using Objective C libraries to write GUI apps but I feel like
[2:15:03.040 --> 2:15:08.400]  as the culture and capabilities and actual code as in Swift top to bottom like so let's start with
[2:15:08.400 --> 2:15:14.240]  foundation and all the libraries start getting built up I feel like those same teams that made like
[2:15:14.240 --> 2:15:19.040]  you know when they made UI kit they kind of like repented for the sins of AppKit and did it better
[2:15:19.040 --> 2:15:24.640]  there's one more chance to do that right now all those same the great minds behind UI kit and AppKit
[2:15:24.640 --> 2:15:29.680]  some of those same minds are going to be the great minds behind the Swift native frameworks
[2:15:29.680 --> 2:15:33.760]  writing GUI applications in the future and I think that'll be a good thing yeah I agree
[2:15:34.800 --> 2:15:41.040]  and I think the other thing too about being the compiler guy is that it put Latiner and his team
[2:15:41.040 --> 2:15:45.680]  and the people he works with in a position where they're really intimately familiar with the
[2:15:47.200 --> 2:15:54.560]  things that cause problems in shipping applications and maybe some of those problems are things
[2:15:54.560 --> 2:15:59.440]  that a true expert in Objective C would never do and therefore they feel a little frustrated like
[2:15:59.440 --> 2:16:04.880]  that the language not that it's being catered to dummies but that by by making certain things
[2:16:04.880 --> 2:16:11.680]  that were possible no longer possible you prevent a whole class of possible bugs but at the same time
[2:16:11.680 --> 2:16:18.640]  you also prevent certain clever but dangerous techniques that people had taken advantage of
[2:16:18.640 --> 2:16:23.520]  significantly and that Apple is making a decision that that trade off is worth it because they
[2:16:23.520 --> 2:16:28.240]  they're in a position where they literally know from like crash reports and and code that's
[2:16:28.240 --> 2:16:34.640]  actually been shipping that being able to not do this anymore is actually going to cut off you know
[2:16:34.640 --> 2:16:39.360]  this sort of problem won't even be possible anymore or just making it harder like I mean the idea of
[2:16:39.360 --> 2:16:45.440]  a half initialized object like you know making that impossible language you can do that fine the
[2:16:45.440 --> 2:16:50.320]  idea of calling a method that doesn't exist on an object like at runtime you thought you had an
[2:16:50.320 --> 2:16:55.360]  object of this type but really you cast it into the wrong thing like in Swift you can forcibly
[2:16:56.080 --> 2:17:00.880]  cast things to the wrong thing and try to send them you know the wrong method call where like
[2:17:00.880 --> 2:17:04.480]  the whole idea of like looking at the class name by string like all these capabilities this
[2:17:04.480 --> 2:17:09.040]  dynamism the Craig talked about that they're adding um they're adding it so will be possible to
[2:17:09.040 --> 2:17:13.840]  do these things but it's not like the right or preferred way to do things and it certainly isn't
[2:17:13.840 --> 2:17:17.840]  the default and if you do it it's going to stand out in your code because you're going to have to
[2:17:17.840 --> 2:17:21.440]  make like it doesn't stand out in a Jack DeCico when you're iterating over this heterogeneous
[2:17:21.440 --> 2:17:25.120]  collection and just sending every object the message blindly right and if they're nil like it'll
[2:17:25.120 --> 2:17:29.040]  just be a no-op and if they're the wrong class it'll blow up at runtime because it'll be like
[2:17:29.040 --> 2:17:33.600]  object blah doesn't respond to the message blah you'll find that at runtime right but if you
[2:17:33.600 --> 2:17:37.040]  look at the loop it's like oh this is just looping over the economies of an NSRA and sending
[2:17:37.040 --> 2:17:42.000]  message to every single item looks good to me right if you try to do something that potentially
[2:17:42.000 --> 2:17:47.040]  dangerous in Swift I think it would look scary or I think it would look like I am going to now call
[2:17:47.040 --> 2:17:52.960]  a method that the compiler cannot absolutely 100% guarantee is going to work um and because that's
[2:17:52.960 --> 2:17:57.360]  not the default and because it will require more code and looks scarier it is sort of culturally
[2:17:57.360 --> 2:18:01.600]  saying that in the Swift world we don't we don't do stuff like that we don't be like oh the program
[2:18:01.600 --> 2:18:04.720]  will take care of it I'm sure every object in this collection will respond to this message I'm sure
[2:18:04.720 --> 2:18:09.440]  it will be fine or they'll just do response to selector and then they'll call it or whatever um
[2:18:09.440 --> 2:18:14.000]  in Swift the default wants to be if you just see straightforward Swift code it's going to work
[2:18:14.000 --> 2:18:19.520]  and not fall victim to this whole whole classes of errors that could potentially happen in an
[2:18:19.520 --> 2:18:25.440]  objective seat because too much was the term of that runtime um let me take a moment here and
[2:18:25.440 --> 2:18:29.760]  thank our next sponsor it's our good friends long time friends of the show Squarespace you
[2:18:29.760 --> 2:18:36.400]  guys know Squarespace it's a build that you're all in one build your own web site platform
[2:18:37.200 --> 2:18:41.680]  what type of websites can you make with Squarespace well better question be what types can you
[2:18:41.680 --> 2:18:45.280]  you just go there you just go there and sign up and immediately you can just get right
[2:18:45.280 --> 2:18:48.800]  started and say what what they'll say what are you trying to what are you trying to build you want
[2:18:48.800 --> 2:18:53.600]  to build a store and you go to store and then they'll show you a bunch of templates for example
[2:18:53.600 --> 2:18:58.400]  stores that you start with and then you say yes this is exactly the sort of template this is what
[2:18:58.400 --> 2:19:02.400]  the type of store I want to make then you open that up and you just start editing what you see
[2:19:02.400 --> 2:19:07.760]  that replace the images with your image replace the text with your text um you want to build a blog
[2:19:07.760 --> 2:19:12.480]  though if that's what you're looking to build or host a podcast uh you just write down when you
[2:19:12.480 --> 2:19:16.720]  sign up it's just like I want to create a blog I want to host a podcast here's some templates
[2:19:16.720 --> 2:19:21.360]  I like this template use this one but I want to change this to this and this to this and you start
[2:19:21.360 --> 2:19:29.920]  changing things right there in the browser total wizzy wig um really could not be more obvious
[2:19:29.920 --> 2:19:35.280]  it's so visual um they have all sorts of hooks there if you want to insert your own code you want
[2:19:35.280 --> 2:19:40.000]  to get in there at the code level and change it at that level you can do that too um but fundamentally
[2:19:40.000 --> 2:19:46.160]  it is it's a GUI it's a graphical user interface way to design websites and they have templates
[2:19:46.160 --> 2:19:54.160]  for so many different types of sites it's it's ridiculous um it doesn't just spit at the end it
[2:19:54.160 --> 2:19:58.960]  doesn't just spit out a bunch of HTML files that you then put a folder and upload to a web host
[2:19:58.960 --> 2:20:05.120]  or whatever that they're the hosting platform too it's all in one you build it you make it um you can
[2:20:05.120 --> 2:20:09.120]  even get your own domain name on it and you can get the domain name for free if you pay for a year
[2:20:09.120 --> 2:20:15.440]  in advance just could not be easier uh online uh commerce the sales stuff they handle all the
[2:20:15.440 --> 2:20:20.640]  tricky stuff all the encryption and credit cards and stuff like that really really impressive
[2:20:20.640 --> 2:20:26.000]  plans start at a ridiculous eight bucks a month uh and like I said you get a free domain name
[2:20:26.000 --> 2:20:32.080]  registration for your site if you sign up for a year in advance um and the demo is no credit card
[2:20:32.080 --> 2:20:37.280]  required you just go there and and just start like typing and playing you just go to squarespace.com
[2:20:37.280 --> 2:20:43.840]  and and just start and it you know you're actually they're making a website could not be easier
[2:20:44.640 --> 2:20:50.560]  use the offer code Gruber my last name Jerry UBER and you will get 10% off your first purchase
[2:20:50.560 --> 2:20:54.400]  with Squarespace if you're listening to this show because John is on it you can use their code it's
[2:20:54.400 --> 2:20:59.200]  ATP and you'll get the same 10% off so Squarespace build it beautiful uh if you need to build a
[2:20:59.200 --> 2:21:03.600]  website just go check out Squarespace spend an hour there you'll probably end up saving yourself
[2:21:03.600 --> 2:21:09.760]  days of work. That's very nice of you to give our code. Oh it said we're all in it together
[2:21:09.760 --> 2:21:13.200]  it's so short and easy to remember I hope that's our actual code. No I know it is I was listening
[2:21:13.200 --> 2:21:18.960]  to your show today and I took note of it. There you go. You do it doing homework. Well I wanted to
[2:21:18.960 --> 2:21:24.240]  see what you guys said about the smart battery case. I feel like my last couple of shows like
[2:21:24.240 --> 2:21:30.800]  I had Joanna Stern on last week and we've just been like a couple of days away like we could
[2:21:30.800 --> 2:21:36.160]  as you know a couple of days later and we could have Joanna and I could have gone long on the battery
[2:21:36.160 --> 2:21:42.640]  case. I kind of had a feeling that that's what they were going to make because I didn't know I
[2:21:42.640 --> 2:21:47.440]  didn't they didn't tell me but um after the show when we were still on the air Joanna said hey you
[2:21:47.440 --> 2:21:50.640]  know as Apple been in touch with you about anything I was like no not yet and she was they are with
[2:21:50.640 --> 2:21:56.880]  me and all they wanted to know was what color iPhone I have and that they're going to send me
[2:21:56.880 --> 2:22:04.560]  something you know to review at the end of the week and I remember that somebody at Apple when I
[2:22:04.560 --> 2:22:12.240]  went and got my iPad Pro review unit that was at a briefing in New York and I was asked which size
[2:22:12.240 --> 2:22:18.400]  iPhone do I use that iPhone 6S or the 6S plus and I said 6S and they were like good we might have
[2:22:18.400 --> 2:22:24.000]  something for you later you know a couple of weeks and I filed that away at that point I went
[2:22:24.000 --> 2:22:29.040]  in the world would they make that would apply to the 6S and not apply to the 6S plus and the
[2:22:29.040 --> 2:22:34.080]  only thing I could think of is a battery pack that's the only either a battery pack or or I
[2:22:34.080 --> 2:22:37.440]  guess it would have to be a case because if it was a battery pack it would apply to anything with
[2:22:37.440 --> 2:22:42.720]  the lightning port so I figured it had to be a battery case. What could have been any kind of case
[2:22:42.720 --> 2:22:48.240]  but I suppose you know yeah but why would they make it to me a battery case was specifically the sort
[2:22:48.240 --> 2:22:53.680]  of thing that they would make only for the 6S and not the 6S not the plus for the obvious reason
[2:22:53.680 --> 2:22:57.680]  that the plus already gets plenty of battery. They need to make that the same battery case for the
[2:22:57.680 --> 2:23:04.880]  plus just like just a huge lump on the back of the thing last two days. It would be you could
[2:23:04.880 --> 2:23:09.520]  actually sit there and do like arm curls with it I think it was actually like build your biceps.
[2:23:09.520 --> 2:23:15.120]  So how is your one of the thing that I saw as our friend cable sassar his case was like cracking
[2:23:15.120 --> 2:23:19.200]  along the top but maybe just got the effective one I'm assuming yours is fine. What color did he get?
[2:23:19.200 --> 2:23:24.640]  He got the black one or the charcoal. So they sent me the white one and that's the only one I have
[2:23:24.640 --> 2:23:31.360]  experienced with so mine didn't crack and what I did is I got I got mine Tuesday morning so it was
[2:23:31.360 --> 2:23:36.480]  the day it that they announced it like you know they had already sent one to me by FedEx so it was
[2:23:36.480 --> 2:23:42.080]  like you know FedEx guy showed up at like 10 a.m. and I had it and I pretty much left it on my
[2:23:42.080 --> 2:23:49.120]  phone until I got my review out which it was obviously it was a couple of days later I let you read
[2:23:49.120 --> 2:23:54.880]  it before you guys did ATPS it'll be up on the time your show is on the air and you're truly
[2:23:54.880 --> 2:23:58.240]  the Douglas Adams so well I can't say Douglas Adams is a tech running because he wrote from
[2:23:58.240 --> 2:24:01.840]  Mac where all their Mac user back in the day too but yeah those deadlines are great as they
[2:24:01.840 --> 2:24:06.240]  wish best your own self-imposed self-declared deadlines and I was pressuring you to say that you're
[2:24:06.240 --> 2:24:13.040]  like oh no problem yeah I had a Wednesday night school thing it was it's some kind of you know
[2:24:13.040 --> 2:24:18.640]  showing it the I know some kind of projects the kids made at 530 at Jonas's school and I thought
[2:24:18.640 --> 2:24:22.160]  oh that's great I'll just make sure I'm finished by then and I have a little self-imposed deadline
[2:24:22.160 --> 2:24:26.880]  and I didn't get it up till Friday yeah the idea was that the deadline that you were sure you were
[2:24:26.880 --> 2:24:31.440]  gonna make it because you had to because you had a school thing right and it turns out when
[2:24:31.440 --> 2:24:36.160]  yourself employees don't have to do anything you know what it was the the more I thought about it
[2:24:36.160 --> 2:24:41.440]  you know as often happens that writing to me writing is thinking and at the more I wrote about it
[2:24:41.440 --> 2:24:47.280]  the more I realized that it was it there are interesting things to pursue and think about and talk
[2:24:47.280 --> 2:24:51.600]  about it if you know sometimes you start writing I didn't think it was gonna be nearly as long as it
[2:24:51.600 --> 2:24:55.200]  was and I didn't think it was like the longest thing you've written in a long time was about a
[2:24:55.200 --> 2:25:00.720]  battery case well that's why it's so but to me it just so many little interesting things about it
[2:25:00.720 --> 2:25:04.960]  but one of the things I did to motivate myself to finish I didn't really like having it on my
[2:25:04.960 --> 2:25:11.440]  iPhone but I kept it on my iPhone until I got the review out so I actually did use it non-stop
[2:25:11.440 --> 2:25:17.840]  pretty much other than like to play with you know the insertion and removal and and some you know
[2:25:17.840 --> 2:25:22.720]  certain things you want to do testing it um I would but for the most part I had my phone in it
[2:25:22.720 --> 2:25:26.640]  from Tuesday till Friday so I didn't see any kind of cracking or anything like that yeah maybe
[2:25:26.640 --> 2:25:30.960]  taking it in and out causes the cracking and I could I mean you would think it was some sort of widespread
[2:25:30.960 --> 2:25:35.040]  defect who would have heard of had it by now but it happens when you get the first ones of anything
[2:25:35.040 --> 2:25:40.720]  like who knows yeah I think it's I think the first ones of anything it's it's likely that it was
[2:25:40.720 --> 2:25:46.480]  probably just like maybe some kind of you know maybe there was a batch that got a bad batch of the
[2:25:46.480 --> 2:25:50.960]  whatever the substance silicone what do they call it whatever the substances on the out yeah or maybe
[2:25:50.960 --> 2:25:54.400]  there was a coating that was supposed to be put on that wasn't put on right anyway I wouldn't
[2:25:54.400 --> 2:25:57.680]  I wouldn't if you're thinking of getting one I wouldn't let this stop you because if the something
[2:25:57.680 --> 2:26:00.880]  like that happens there's a thing about the apple so they could be no one they'll work it out
[2:26:00.880 --> 2:26:05.600]  I will say this I'm from ATP you guys were saying and I know somebody else in the
[2:26:05.600 --> 2:26:08.800]  I think it was Joanna actually in a review she I think she got a white one and said don't
[2:26:08.800 --> 2:26:13.520]  buy the white one because it's already stained and you guys said don't buy the white one I have the
[2:26:13.520 --> 2:26:18.880]  white one and I used it non-stop for four days and it still looks mint conditioned didn't
[2:26:18.880 --> 2:26:24.400]  hook up pick up any stains well you're very clean right I guess it's tissue boxes on your feet
[2:26:24.400 --> 2:26:28.800]  and you lick yourself clean like a cat and so there's no residue what I heard actually after the
[2:26:28.800 --> 2:26:32.960]  show is the opposite of people who got the black one and said it picks up pocket lint like if you
[2:26:32.960 --> 2:26:36.000]  have lint and stuff in your pocket then you put the thing in you take it out to cover with white
[2:26:36.000 --> 2:26:40.400]  stuff so it's like white and black cars like choose your poison both of them are going to have
[2:26:40.400 --> 2:26:45.760]  something in the environment it's going to stand out more on them I couldn't tell it it is obviously
[2:26:45.760 --> 2:26:52.400]  very very similar to their non-battery silicone cases in terms of the substance that it's made out of
[2:26:52.400 --> 2:26:59.200]  but it's maybe not quite the same it actually felt a little grippier to me the battery case to
[2:26:59.200 --> 2:27:05.040]  me felt grippier than the non-battery case but on the other hand the one that I had handy which was
[2:27:05.040 --> 2:27:11.120]  one that Apple gave me with my review unit a couple months ago for the iPhone 6S was blue
[2:27:11.920 --> 2:27:16.160]  and this was only white and black and maybe there's some I know with the watch straps there's
[2:27:16.160 --> 2:27:22.160]  definitely a little difference in how they feel you know the sport bands there's the different
[2:27:22.160 --> 2:27:27.680]  colors have different levels of like flexibility different weights though yeah different weights
[2:27:27.680 --> 2:27:34.800]  even and I may know that might therefore be true with these two maybe the white is somehow grippier
[2:27:34.800 --> 2:27:39.440]  maybe the white non-battery cases grippier too I thought it was a little too grippy I thought
[2:27:39.440 --> 2:27:43.280]  you know and in terms of it actually being thicker therefore was a little harder to get in
[2:27:43.280 --> 2:27:48.880]  out of gene pockets thickness aside the grippiness made it a little you know a little bit too
[2:27:48.880 --> 2:27:53.680]  much friction in my opinion yeah that's always the balance because I wanted the complaints about
[2:27:53.680 --> 2:27:58.240]  other third-party battery cases they make it slippery or because a lot of them are hard plastic or
[2:27:58.240 --> 2:28:02.800]  hard shiny plastic and then so you end up dropping it also because it's a bigger more awkward shape
[2:28:02.800 --> 2:28:07.280]  sometimes but if you make it too grippiness hard to slide it in out of a pants pocket so you just
[2:28:07.280 --> 2:28:11.200]  want to find that medium and yeah I totally believe that the black and white ones could feel different
[2:28:11.200 --> 2:28:15.120]  and they look in the pictures I've never actually touched one of these things but they look in the
[2:28:15.120 --> 2:28:19.920]  pictures like it could also be potentially that whatever material they're making in out of is thicker
[2:28:20.640 --> 2:28:24.320]  you know in the parts that don't have battery in them it just thicker so it could be squishier
[2:28:24.320 --> 2:28:30.400]  it is a little thicker it's definitely like so if you stack it side by side with the you know
[2:28:30.400 --> 2:28:35.680]  it's resting on like the volume buttons or the power on off switch stack it on the side
[2:28:35.680 --> 2:28:40.160]  and compare it side by side with the silicon case it's definitely a little thicker it stands up a
[2:28:40.160 --> 2:28:44.640]  little bit more the sides are thicker on this then on the silicon case and if you think about it
[2:28:44.640 --> 2:28:49.520]  makes sense because it's actually a lot more rigid it's you know you can kind of put the phone
[2:28:49.520 --> 2:28:53.680]  I think there's a recommended way like the with the silicon cases they recommend to put it in
[2:28:53.680 --> 2:28:58.480]  like certain angle first but it doesn't really matter you can just put any side in first and then just
[2:28:58.480 --> 2:29:05.440]  sort of squish the the other side over the edge of the iPhone with this you have to slide it in
[2:29:05.440 --> 2:29:10.960]  like it's in between the two sides as like a rail it slides in like that and the sides are definitely
[2:29:10.960 --> 2:29:17.280]  thicker I don't know what I think it's because it meant to be more rugged I think it is sort of
[2:29:17.280 --> 2:29:21.360]  a you know they're only advertising it as a battery case but I think it's also apples
[2:29:21.360 --> 2:29:27.280]  answered to what if you want a more protective case for drops and stuff like that yeah I mean
[2:29:27.280 --> 2:29:30.480]  once you're gonna have that giant thing on there anyway there's no sense trying to skimp around
[2:29:30.480 --> 2:29:35.760]  the edges to try to make it look spelt because it's not gonna right I thought on the ATP I
[2:29:35.760 --> 2:29:40.240]  thought you were the only one it was really reasonable I Marco and Casey made me a little angry but
[2:29:40.240 --> 2:29:45.200]  third shake on it I thought Marco is way too dismissive about it is what did he call like an it he's
[2:29:45.200 --> 2:29:50.400]  that looks like an engineering prototype yeah like I do and this is the thing that gets me is I
[2:29:50.400 --> 2:29:53.840]  thought I did a pretty good job my article and then on Twitter you know there's a handful of people
[2:29:53.840 --> 2:29:57.840]  oh of course John Gruber like saying it's like I didn't it wasn't like it wasn't really a
[2:29:57.840 --> 2:30:03.040]  overly positive review and I ended it was saying that I don't want to use it but I called it weird
[2:30:03.040 --> 2:30:09.760]  and funny looking and ungainly it's if it wasn't like I was entirely complimentary it was like I
[2:30:09.760 --> 2:30:14.400]  just want to understand why they made it yeah or or just like especially in things like this
[2:30:14.400 --> 2:30:20.640]  where it's like a visceral reaction based on appearances there's usually and it would use lots of
[2:30:20.640 --> 2:30:26.480]  car analogies on ATP coming from the car world like stuff like that can be polarized I'm like the
[2:30:26.480 --> 2:30:32.080]  physical shape of an object whose purpose is mostly not dictated by its shape people have strong
[2:30:32.080 --> 2:30:37.680]  opinions about you know portion I'll have versus Corvette versus a Mustang like these are very
[2:30:37.680 --> 2:30:41.600]  different looking things and in the grand scheme of things there engines and wheels and
[2:30:41.600 --> 2:30:47.920]  aerodynamics aside there are lots of features of cars that look the way they look for for just
[2:30:47.920 --> 2:30:53.280]  aesthetic design reasons so anything like that where you look at a picture of something as so many
[2:30:53.280 --> 2:30:57.520]  people did on the internet look at a picture of this thing and had just had this negative gut
[2:30:57.520 --> 2:31:01.200]  reaction to it and these articles come flying or like what's happening to Apple designer whatever
[2:31:01.920 --> 2:31:07.520]  you really want to understand like what what is a reasonable rationale for this and you could
[2:31:07.520 --> 2:31:11.760]  come to the inclusion that there is no rationale that this is just like it's the simplest thing
[2:31:11.760 --> 2:31:20.000]  they could possibly do and you know they were just lazy or didn't have time or like or whatever
[2:31:20.000 --> 2:31:24.720]  but with Apple knowing everything we know about Apple like that just doesn't seem plausible
[2:31:24.720 --> 2:31:30.080]  because no one was demanding that they released a better case and it's like and who really cares
[2:31:30.080 --> 2:31:34.880]  in the grand scheme of things right but this is what they came out so you want to think about it like
[2:31:34.880 --> 2:31:38.640]  and so that's what was going into the philosophy like is is there an explanation because this is an
[2:31:38.640 --> 2:31:42.400]  area where Apple won't talk to the press for the most part it's like oh let's have someone from
[2:31:42.400 --> 2:31:46.400]  Apple's design studio not Johnny I have because he's busy but someone lower level make the rounds
[2:31:46.400 --> 2:31:50.560]  the tech press that no not really that's not going to happen right and nor should they because
[2:31:50.560 --> 2:31:54.640]  like aesthetics it's like look this is the product we have and we'll see what the reaction to it is
[2:31:54.640 --> 2:31:58.880]  but we think it's it makes sense in some way and how could they make this make sense that I was
[2:31:58.880 --> 2:32:04.000]  going back through what have they said in the past publicly about past designs that could conceivably
[2:32:04.000 --> 2:32:08.160]  apply to this sign well the true or not who knows we're just speculating but the bottom line is
[2:32:09.360 --> 2:32:14.720]  if you think it's ugly you think it's ugly um don't buy it buy one that you think it's not ugly
[2:32:14.720 --> 2:32:21.040]  right I mean any other thing I feel like maybe in my article I didn't cover this enough it's
[2:32:21.040 --> 2:32:27.840]  afterwards is it if you're wondering why it doesn't look just like a mofie whatever just pack
[2:32:27.840 --> 2:32:31.600]  air whatever their thinnest one is which is of course the one that Apple if Apple was going to
[2:32:31.600 --> 2:32:34.720]  go that direction they'd make the thin it they're not going to make one of these you know the
[2:32:34.720 --> 2:32:44.080]  cases that have 3,000 uh what's the unit milli amperes milli amperes um it's so much easier to write
[2:32:44.080 --> 2:32:51.200]  mh um why doesn't it look like those which is really like sort of the standard for all of
[2:32:51.200 --> 2:32:54.000]  of course they're not going to make one like that because if they thought that was the right
[2:32:54.000 --> 2:32:57.680]  way to do it they don't have to do anything they're already there there's the apple stored
[2:32:57.680 --> 2:33:01.520]  you know or filled with these battery cases that look like that the only reason for them to make
[2:33:01.520 --> 2:33:06.880]  one was to is if they had an idea that was different well and also like I think this is a factor like
[2:33:06.880 --> 2:33:12.400]  they they know a lot of people by a battery cases why why shouldn't they have one and not because
[2:33:12.400 --> 2:33:18.000]  like they just they need to get that money or whatever but it's it's like as a it's the same
[2:33:18.000 --> 2:33:21.120]  thing with diversifying the phone line why don't they make a big phone why shouldn't they make a
[2:33:21.120 --> 2:33:24.160]  smaller phone why don't they make something in colors it's like if it's something that people
[2:33:24.160 --> 2:33:28.880]  want and they're buying it anyway why shouldn't Apple make a really good one right it's you know why
[2:33:28.880 --> 2:33:33.200]  rely on third parties to fill that role so battery cases have apparently passed into the realm of
[2:33:33.200 --> 2:33:36.160]  things that are important enough and that why do they purchase enough that Apple feels like it
[2:33:36.160 --> 2:33:40.640]  should have a first party solution and so they do like I mean I still have questions about the
[2:33:40.640 --> 2:33:44.480]  case in terms of how they came up with this compromise because it's like if you're going to be
[2:33:44.480 --> 2:33:49.120]  this bulky like you said the same thing like why not extend the battery up to the top and bottom
[2:33:49.120 --> 2:33:56.480]  why not go edge to edge with it like why not match the capacity of similar thickness battery cases
[2:33:56.480 --> 2:34:01.120]  and you know Apple has its explanations or which may or may not be rationalizations but
[2:34:01.120 --> 2:34:06.480]  in the end of a lot of it really does come down to design because you have to pick a size and
[2:34:06.480 --> 2:34:11.200]  shape and that dictates how much battery life you have and let's say someone was really wedded
[2:34:11.200 --> 2:34:15.360]  to this design and they thought it aesthetically it was beautiful and perfect and pure and what they
[2:34:15.360 --> 2:34:20.800]  wanted then the aesthetic design could dictate the size of the battery as opposed to the way around it's
[2:34:20.800 --> 2:34:25.840]  it's hard to know that actually talking to the people behind the design all we can do out here
[2:34:25.840 --> 2:34:30.640]  is speculate and really on ADP I wasn't going to dismiss anyone else's theories about like the
[2:34:30.640 --> 2:34:36.000]  there was time crunch or that you know like they didn't put in the effort they know it was
[2:34:36.000 --> 2:34:40.560]  raw I know maybe this was rushed and I don't know what's going on inside Apple right but is there
[2:34:40.560 --> 2:34:45.840]  plausible explanation that that you say this was actually designed with the same care as every
[2:34:45.840 --> 2:34:49.360]  other Apple thing is designed with there were led to believe every other Apple thing is designed
[2:34:49.360 --> 2:34:54.320]  with is that even plausible and I can come up with plausible explanations for it so in the absence of
[2:34:54.320 --> 2:34:58.240]  any other information you just have to kind of like say which one of those do you think is more likely
[2:34:58.240 --> 2:35:05.600]  I think it's so that the hump is so striking and that I think it it really had to be the result
[2:35:05.600 --> 2:35:10.640]  I think it would be I think the I really doubt that it was the first idea they came up with it's so
[2:35:10.640 --> 2:35:16.160]  unusual and it is at first glance I think almost it's almost impossible to say that it's not
[2:35:16.160 --> 2:35:25.920]  a little repulsive at first it just looks swollen in a way you know like you know like when you
[2:35:25.920 --> 2:35:32.000]  get stung by a bee and you know like you get stung on your thumb and your thumb swells up
[2:35:32.000 --> 2:35:36.080]  to the base of your thumbs swells up to the size of a golf ball like it looks painful when you see
[2:35:36.080 --> 2:35:42.880]  somebody with an injury that's swollen it's like oh you feel it that's what it looks it looks swollen
[2:35:42.880 --> 2:35:47.840]  which is not a good look at least at first but I found myself after a few days I kind of got
[2:35:47.840 --> 2:35:53.280]  used to it it just I stopped thinking of a disposing as being supposed to look like a regular case
[2:35:53.280 --> 2:35:58.240]  and that it just looks like it has a battery on the back yeah and like I would another possibility
[2:35:58.240 --> 2:36:02.160]  again having not actually ever touched one of these I can't say although maybe you can tell me
[2:36:02.160 --> 2:36:09.760]  what you think about this like a lot of oxo good grips like kitchen things look kind of weird
[2:36:09.760 --> 2:36:15.600]  looking and ugly too but they're good to hold and so if you prioritize how good is this thing to
[2:36:15.600 --> 2:36:18.800]  hold I'm not saying this is what they did because I think the back of it is not shaped like any part
[2:36:18.800 --> 2:36:23.040]  of the human hand human hand doesn't have like rounded rectangle divots ended or anything but
[2:36:23.040 --> 2:36:28.400]  maybe some ask like you said holding your pinky under the lump instead of under the bottom of the
[2:36:28.400 --> 2:36:32.960]  thing like that could be a factor in it like it doesn't mean that they're right so you're just
[2:36:32.960 --> 2:36:38.080]  trying to delve like what motivated this why because as you said it's so it's so striking that it
[2:36:38.080 --> 2:36:43.840]  it seems clear that this was an intentional thing you don't accidentally make this battery case
[2:36:43.840 --> 2:36:47.680]  if you wanted to do something lazy we just look like every other battery case and I think apple
[2:36:47.680 --> 2:36:50.880]  would make something look more like they make hell they make silicone cases look pretty much
[2:36:50.880 --> 2:36:54.480]  like every other silicone case is just why does apple have one because they want to make a nice one
[2:36:54.480 --> 2:36:58.560]  and why shouldn't you buy the apple one if you're in the apple store like it makes perfect sense
[2:36:58.560 --> 2:37:04.560]  it it in addition to putting your pinky underneath the putting your index finger on top of it is
[2:37:04.560 --> 2:37:10.160]  pretty good too and it does sort of in a weird way it makes it feel as though you're holding a
[2:37:10.160 --> 2:37:15.360]  smaller device like you know that it's thicker but it's like you have these like from going back
[2:37:15.360 --> 2:37:19.280]  to like the old iPhone days with the first few generations when they were physically smaller and
[2:37:19.280 --> 2:37:24.800]  it was a lot easier to kind of get your index fingers on top while you still had some kind of reasonable
[2:37:24.800 --> 2:37:28.320]  you know and it felt like you could hold it more securely because your fingers wrapped around it
[2:37:28.320 --> 2:37:34.160]  your fingers can wrap around the hump in a way that gives you a secure hold if I were going to
[2:37:34.880 --> 2:37:38.800]  and I knew in advance and I could pack it if I knew that I were going to be using my iPhone
[2:37:38.800 --> 2:37:44.560]  camera to record I don't know like while I'm riding on a roller coaster or something like that
[2:37:44.560 --> 2:37:49.120]  I would put it in this case like battery even if the battery was completely depleted and I wasn't
[2:37:49.120 --> 2:37:54.320]  going to get one percent of charge from it I would put my iPhone in that case to hold it while
[2:37:54.320 --> 2:38:00.400]  I'm going down a roller coaster because I feel like I can get like a way more secure grip on that
[2:38:00.400 --> 2:38:04.560]  because of the material that it's made of and because of the hump the hump actually gives you like
[2:38:04.560 --> 2:38:09.040]  good place to put fingers how many trips that Disney do you have to take before you realize
[2:38:09.040 --> 2:38:12.240]  it is incredibly dangerous to take movies but you're on a roll and it's like even though you
[2:38:12.240 --> 2:38:17.600]  know you're in science like do not I wouldn't I wouldn't do it and it's not even because I
[2:38:17.600 --> 2:38:25.360]  I wouldn't do it just because I it would just ruin it with like imagining me dropping my
[2:38:25.360 --> 2:38:30.000]  iPhone on a roller coaster Disney would just the thought of it puts me and it's such a bad
[2:38:30.000 --> 2:38:34.080]  it's not that it's getting hit in the face at 90 miles an hour or something else's phone
[2:38:34.080 --> 2:38:38.000]  because like if you do it at the top of the loop or whatever like it's six flags they're so
[2:38:38.000 --> 2:38:41.440]  like I guess Disney they I don't know how they manage it Disney but it's six flags they had you
[2:38:41.440 --> 2:38:45.680]  going through like metal detectors like nothing in your pockets like literally like it was like going
[2:38:45.680 --> 2:38:52.560]  through the TSA like you know no no you know no car keys no phones of any kind just like
[2:38:52.560 --> 2:38:57.120]  it nothing because and it's six flags the roller coasters go way faster too yeah it's the same
[2:38:57.120 --> 2:39:02.240]  like the roller coaster is going 60, 70, 80 miles an hour and your phone is essentially stationary
[2:39:02.240 --> 2:39:07.760]  because it's like falling from above and your face meets that essentially stationary phone that's
[2:39:07.760 --> 2:39:12.800]  not a good experience for anybody kill somebody one of those things so kids no no taking movies
[2:39:12.800 --> 2:39:16.800]  and roller coasters I'm not saying it as though I would do it I'm just saying that if I were in a
[2:39:16.800 --> 2:39:21.280]  precarious situation and needed to have a grip on my phone that you should do it's something else
[2:39:21.280 --> 2:39:25.520]  that people can really do how about going yotting if you're going yotting if you're doing
[2:39:25.520 --> 2:39:29.600]  derandorandos to all they don't get that if you're in the video for Rio and you're on the front of the
[2:39:29.600 --> 2:39:34.000]  yacht and you want to take a movie of it because it's really cool looking bringing the
[2:39:34.000 --> 2:39:40.480]  iPhone battery case I thought you had a good point on the ATP about it looking like a sci-fi like if you
[2:39:40.480 --> 2:39:45.200]  just paved the hallway with them like use them as the tiles like the subway you know like the
[2:39:45.200 --> 2:39:50.080]  way that the subway hallway and the subway station as tiles tile it with these it would look like a
[2:39:50.080 --> 2:39:56.400]  great you know like you're in a set of like a one of Ridley Scott's you know classic sci-fi
[2:39:56.400 --> 2:40:03.200]  yeah or like 60, 70s sci-fi you know you do like you know I mean even 2001 era about an alien or
[2:40:03.200 --> 2:40:07.280]  just you know anything like buck Rogers like they I guess that's the way that you know the future
[2:40:07.280 --> 2:40:13.040]  was going to be like white and clean and smooth shapes everywhere yeah and but like you know some
[2:40:13.040 --> 2:40:20.560]  kind of inexplicable ridges and textures though you know yeah like on a stormtrooper like the
[2:40:20.560 --> 2:40:23.120]  stormtrooper who's got the little thermos on his back you know what the hell's that for
[2:40:23.120 --> 2:40:26.240]  well I'm sure someone with a technical readout books knows but like you just it was always
[2:40:26.240 --> 2:40:29.760]  smooth and white but there was these lumps and they seem purposeful and it looked like a future
[2:40:29.760 --> 2:40:34.880]  I actually and it might just be because I've got Star Wars on on the mine this week but I actually
[2:40:34.880 --> 2:40:40.960]  thought as soon as I saw it I thought boy this is a real stormtroopery looking thing because it even
[2:40:40.960 --> 2:40:47.680]  has a little bit of black around the the cutout for the camera and the way that it's not white
[2:40:47.680 --> 2:40:52.080]  but sort of like an off-white and yeah the ridges the extra ridges some of them seem which
[2:40:52.080 --> 2:40:58.000]  seem maybe a little inexplicable it there's a certain stormtrooperiness to it it was a wait for
[2:40:58.000 --> 2:41:02.080]  the the next version to look like the surface of the star destroyer with little greeblies or
[2:41:02.080 --> 2:41:05.920]  whatever they are all over like little pipes and everything all over I'm thinking of other ways
[2:41:05.920 --> 2:41:10.960]  this case could have existed like you never see the back of it next to seven like the old
[2:41:10.960 --> 2:41:15.600]  next to sevens I don't think so which is like it was like rubber and I had like crosshatching
[2:41:15.600 --> 2:41:20.560]  kind of like yeah I know a little divots come at this could have like a little lumps on it like
[2:41:20.560 --> 2:41:27.520]  a well I think a golf ball world has little you know concave things or it could be the opposite
[2:41:27.520 --> 2:41:31.760]  it could have convex things like a bunch of like bumps on it I mean they could have been
[2:41:31.760 --> 2:41:35.680]  textured in so many different ways again just a completely aesthetically speaking because it's not
[2:41:35.680 --> 2:41:41.520]  or maybe there will be some functional grip there but this one is there's one lump but the surface
[2:41:41.520 --> 2:41:47.120]  treatment is essentially smooth these all seem like intentional aesthetic choices that that
[2:41:47.120 --> 2:41:52.160]  weren't necessarily foreground conclusions if there is some kind of philosophy behind this design
[2:41:54.400 --> 2:41:59.200]  uh yeah I and texture is going to come back at some point it's I feel like we're in a
[2:41:59.200 --> 2:42:05.120]  era when texture is sort of fallen out of favor perhaps largely driven by apple but it'll it'll come
[2:42:05.120 --> 2:42:09.120]  back eventually remember the uh what was it I figure which case it was the ones with the holes cut
[2:42:09.120 --> 2:42:16.080]  out on it the colored ones with the holes cut out from apple colored what cases oh yeah yeah the ones
[2:42:16.080 --> 2:42:22.320]  for the uh the the five C right and yeah so it would show the words through it and we were
[2:42:22.320 --> 2:42:25.280]  complaining about how it didn't like center on the words correctly but that was essentially
[2:42:25.280 --> 2:42:28.400]  textured because you had these holes in the case they would feel like you'd feel them with your
[2:42:28.400 --> 2:42:36.560]  fingers yeah um I was gonna it would be good for another show I was gonna say because you know
[2:42:36.560 --> 2:42:39.680]  everything they make that was made out of this I don't know even I don't know if they call it
[2:42:39.680 --> 2:42:44.880]  bead blasted anymore but it's this aluminum that has the same feel the phones have this aluminum
[2:42:44.880 --> 2:42:49.680]  the MacBooks have this feel the even my iMac has the same is made out of the same stuff but
[2:42:49.680 --> 2:42:54.560]  eventually they're gonna switch to a new material from the aluminum yeah we talked about that in
[2:42:54.560 --> 2:43:00.560]  ATP a few times especially with respect to phones the aluminum and glass thing is going to seem as
[2:43:00.560 --> 2:43:07.360]  barbaric as CRT uh video displays due to us now like you mean it was this big heavy glass thing
[2:43:07.360 --> 2:43:11.840]  with like lead on it and the electron gun like how thick was the glass and like that just seems
[2:43:11.840 --> 2:43:16.960]  barbaric right aluminum glass phones like the idea that you know for our grandkids the idea that if
[2:43:16.960 --> 2:43:21.120]  you dropped your phone the sidewalk that it would break it's gonna sound idiotic it's gonna sound
[2:43:21.120 --> 2:43:24.720]  like like we were using the glass shampoo bottles from paralligan like why would you bring glass
[2:43:24.720 --> 2:43:29.440]  to the shower it's so stupid why didn't you use plastic right but right now
[2:43:29.440 --> 2:43:34.800]  whether you're like when I glasses were made out of glass yeah shatter and just go into your eyeball
[2:43:34.800 --> 2:43:39.280]  and you know it's like you do the best with the materials you have an aluminum glass like it
[2:43:39.280 --> 2:43:43.360]  took them a while to get to that you know the lots of plastic and plastic is pretty good material too
[2:43:43.360 --> 2:43:47.440]  especially for radio reception and titanium but like they went with aluminum and glass because
[2:43:47.440 --> 2:43:52.000]  I feel like it's just a higher quality experience like it feels nicer and more expensive glass
[2:43:52.000 --> 2:43:55.760]  obviously the screen is better than plastic as we learn from the iPod Nano like the plastic is
[2:43:55.760 --> 2:44:00.480]  gonna scratch so you want something that scratch resistant for the screen and then aluminum for the
[2:44:00.480 --> 2:44:07.760]  back is just I mean 3GS was plastic but the you know and they use glass for the 4 and 4S and like
[2:44:07.760 --> 2:44:12.560]  but aluminum glass is a pretty solid combo right now and to get better than it you basically need
[2:44:12.560 --> 2:44:18.400]  something that's not going to shatter so it has to be more flexible for the display and for the
[2:44:18.400 --> 2:44:22.560]  back part I guess you'd probably have to go with something that is equal strength but lighter so
[2:44:22.560 --> 2:44:28.640]  like graphite composite plus really hard flexible screens you know or as I've always said
[2:44:28.640 --> 2:44:31.840]  get the thing down to the size and weight of a credit card and really doesn't much matter
[2:44:31.840 --> 2:44:35.680]  what material you make it out of because you drop your credit card on the pavement and just pick
[2:44:35.680 --> 2:44:40.320]  it back up like it's not nothing's going to happen there are ways too little that air resistance
[2:44:40.320 --> 2:44:44.320]  becomes a factor that doesn't even fall that fast and if it does it's flexible enough that it's
[2:44:44.320 --> 2:44:48.960]  not going to shatter or break yeah I thought of an idea I was thinking about drops today I was
[2:44:48.960 --> 2:44:53.680]  watching Jonas play Destiny and he jumped off a giant cliff and it seemed like he should have
[2:44:53.680 --> 2:44:57.200]  taken damage and didn't I was like how come you don't take damage and because are you just
[2:44:57.200 --> 2:45:01.200]  if like some kind of jets on your feet or something you know like a jet but you play the game
[2:45:01.200 --> 2:45:05.520]  so you know there but you need to give me his PSN name I'll help Matt I'll help me out we'll see
[2:45:05.520 --> 2:45:10.320]  yeah I'll hook you up and I thought oh that's clever and then I watched you know so it's more
[2:45:10.320 --> 2:45:14.000]  or less like your Boba Fett you jump off a thing and at the very end you just put on your jet pack
[2:45:14.000 --> 2:45:17.280]  a little bit to slow down I thought you know that would be a clever thing for a iPhone to have
[2:45:17.280 --> 2:45:23.280]  if you dropped it if it had little that is the Jetsons era solution does the problem you know
[2:45:23.280 --> 2:45:29.120]  we do everything had jets just slow down just a pop of air at the last moment would keep it
[2:45:29.120 --> 2:45:34.160]  from into gently land but you're right you know something like that but something's got I think
[2:45:34.160 --> 2:45:38.720]  the other thing that's going to seem barbaric is the way that with the everything made out of aluminum
[2:45:38.720 --> 2:45:47.280]  that they're like can you even imagine how much bra aluminum apple is sending to China every single day
[2:45:47.280 --> 2:45:54.000]  that's just being cut into these shapes by the the CNC machines well another great thing about
[2:45:54.000 --> 2:45:58.000]  aluminum is all the shavings and scraps and crap that come off of the machine like all the material
[2:45:58.000 --> 2:46:02.560]  that is removed I can just go back into the whole recycling thing is you know it just it just it's not
[2:46:02.560 --> 2:46:06.320]  it's not waste in the sense that you can just recycle that melted back down and put it into another
[2:46:06.320 --> 2:46:11.520]  engine and it comes back to you but it's a tremendous amount of stuff that they're just cutting
[2:46:11.520 --> 2:46:17.840]  which is an incredibly difficult process yeah I mean like but it's what they settled on and we
[2:46:17.840 --> 2:46:21.680]  certainly we all we all saw the development of like how can you make a sturdy laptop that's also
[2:46:21.680 --> 2:46:26.640]  thin with the doesn't creek or crack or break or feel cheap and they try lots and lots of different
[2:46:26.640 --> 2:46:31.760]  things and boy this one with the original MacBook Air that the machine that piece of aluminum
[2:46:31.760 --> 2:46:34.800]  just seems great I mean eventually look at the point where they're kind of getting to that now
[2:46:34.800 --> 2:46:39.920]  with the MacBook one where it's like strength and materials of this thickness don't it feel like
[2:46:39.920 --> 2:46:44.080]  I can take this MacBook yeah I'm talking the MacBook one is a TV parlance for the MacBook they
[2:46:44.080 --> 2:46:48.960]  only has one port on the side of it just it's just called the MacBook anyway can I bend this over
[2:46:48.960 --> 2:46:52.080]  my knee because it looks like I might be able to bend this over my knee and I'm just not a
[2:46:52.080 --> 2:46:59.440]  comfortable feeling like eventually aluminum becomes no good because it's certain than you know
[2:46:59.440 --> 2:47:04.080]  thickness if it gets very thin you can bend it and it stays bent and that's not really a good
[2:47:04.080 --> 2:47:08.720]  thing that's why you think about things like carbon fiber where they bend but spring back and
[2:47:08.720 --> 2:47:13.920]  they're also very light and very strong and so on so well they switched this year to a new aluminum
[2:47:13.920 --> 2:47:19.200]  for the phones so though they look the same the success and success plus are made from this new
[2:47:19.200 --> 2:47:25.360]  I was 7,000 series whatever they want to call it but it's Apple's new fancy pants version of aluminum
[2:47:25.360 --> 2:47:30.960]  and who knows maybe they have you know maybe maybe this it'll be a take a lot longer than I
[2:47:30.960 --> 2:47:34.880]  think in maybe a couple years from now they're gonna have 8,000 series aluminum I don't know
[2:47:34.880 --> 2:47:39.920]  but I kind of feel like by upgrading the aluminum they've used that they're sort of approaching
[2:47:39.920 --> 2:47:44.320]  this is as good as it's going to get and that's well yeah but it's like they're they're holding
[2:47:44.320 --> 2:47:47.920]  back the tide in that one because it's kind of like samurai swords where you can pick like
[2:47:47.920 --> 2:47:52.960]  flexibility or hardness and you want you know hardness on the on the edge the sharp edge because you
[2:47:52.960 --> 2:47:56.960]  want it to be sharp and be able to cut through things but if it's that hardness through the whole
[2:47:56.960 --> 2:48:01.040]  blade the blade will shatter when you hit something so you need a core that's flexible right so
[2:48:01.040 --> 2:48:04.480]  going with it with the aluminum like something making up these new things that you can make
[2:48:04.480 --> 2:48:10.880]  aluminum you can decide do I want it to be very strong and hard or do I want it to be like
[2:48:10.880 --> 2:48:14.960]  malleable and flexible and not not that it's going to shatter anything with like with the aluminum
[2:48:14.960 --> 2:48:18.800]  what they're doing now is well we still want to make the phones really thin we want to make them
[2:48:18.800 --> 2:48:24.480]  harder to bend and so can we make it so this is stronger aluminum hopefully maintain the weight
[2:48:24.480 --> 2:48:29.920]  but at a certain point like if you know like aluminum foil certain point it's going to bend
[2:48:29.920 --> 2:48:34.240]  and what you need is a material that springs back aluminum is not going to spring back so
[2:48:34.880 --> 2:48:40.720]  you will reach the lemon and thickness where aluminum is just a non-starter because if you just
[2:48:40.720 --> 2:48:44.800]  keep saying we'll just make it so strong that you can't bend it that will you won't be able to do
[2:48:44.800 --> 2:48:48.720]  that at a certain point it'll just be too darn thin so the material revolution will come eventually
[2:48:48.720 --> 2:48:53.920]  and I'm sure Apple has been for many years now researching what will replace aluminum if anything
[2:48:53.920 --> 2:48:57.680]  in our things is it time to try to do a carbon fiber foam because it would be great for radio
[2:48:57.680 --> 2:49:02.400]  reception and it would spring back better than uh then aluminum does and we wouldn't have to
[2:49:02.400 --> 2:49:07.680]  worry about bending it as much but you know can we manufacture it in the design so we want to we
[2:49:07.680 --> 2:49:11.120]  can't you can't machine carbon fiber you have to mold it and it's really complicated and super
[2:49:11.120 --> 2:49:15.360]  expensive and so I think I'm gonna be waiting a while from the land of fantasy rumors based on
[2:49:15.360 --> 2:49:19.600]  like patent filaments and stuff there's the liquid metal stuff that people have been
[2:49:19.600 --> 2:49:23.840]  fantasizing about for years so who knows maybe there's something like that too or in the jets
[2:49:23.840 --> 2:49:28.720]  and puffer jet thing you can have that material where uh where you can bend it but if you
[2:49:28.720 --> 2:49:32.400]  subjected to some sort of like if you put it back in heat or or you're like apply electricity
[2:49:32.400 --> 2:49:36.720]  to it it it goes back into the original shape remember that yeah I do remember that yeah that
[2:49:36.720 --> 2:49:41.120]  we bet the circuit boards inside don't really like bending too much either by the way so all right
[2:49:41.120 --> 2:49:45.840]  let me take one last break here and then we can talk about Star Wars um uh I want to tell you
[2:49:45.840 --> 2:49:50.400]  about our last sponsor it's our good friends at Harries now the holiday season is here this show
[2:49:50.400 --> 2:49:58.000]  will be airing tomorrow December 14th uh I think it's up till December 18th free shipping is over
[2:49:58.000 --> 2:50:04.480]  but they if you order up to the 18th um holiday shipping economy shipping for the holidays
[2:50:04.480 --> 2:50:08.400]  ends on the 18th so you got a couple of days this you're probably listening to it if you're a fan
[2:50:08.400 --> 2:50:12.800]  of the show because I feel like this is going to be big news that the Craig Federee was on the show
[2:50:13.520 --> 2:50:17.680]  you've got till December 18th you can order it you can pay for economy shipping it'll get there
[2:50:17.680 --> 2:50:23.840]  before Christmas what a great gift if there's any kind of men fathers brothers husbands uh in your
[2:50:23.840 --> 2:50:30.480]  life you can just buy them uh the holiday kit they've got these holiday kits um with razor blade
[2:50:30.480 --> 2:50:37.120]  with the handle with uh some shaving cream and stuff they sent me one that had uh this facial stuff
[2:50:37.120 --> 2:50:43.040]  you know uh you know you clean your face with it I like it it's good my skin looks good with it
[2:50:43.040 --> 2:50:48.640]  uh really cool stuff awesome you know packaging this is one of those things you give them a gift
[2:50:48.640 --> 2:50:52.880]  if you want to give somebody a gift with uh razor and stuff like that give them these Harries things
[2:50:52.880 --> 2:50:58.000]  they open it up it looks great it makes you look like you have good taste um go there check out
[2:50:58.000 --> 2:51:06.240]  these holiday kits and uh really great prices too uh high quality blade high quality shaving creams
[2:51:06.240 --> 2:51:12.720]  and lotions and uh gels whatever you want in the thing uh so go there save yourself the hassle
[2:51:12.720 --> 2:51:18.240]  I hate Christmas shopping good god almighty this is like the most I it's the worst so I'm just
[2:51:18.240 --> 2:51:22.320]  you just buy people stuff from sponsors of the show and you're done with it get them a mattress
[2:51:22.320 --> 2:51:31.120]  and get a macheving kit from from harries um where do you go to find out more go to uh harries.com
[2:51:31.120 --> 2:51:37.600]  and then use this code talk show know the and their code either use that code and uh you'll save
[2:51:37.600 --> 2:51:43.600]  five bucks off your order and remember you got to the 18th December 18th to 2015 and you can still get
[2:51:43.600 --> 2:51:50.400]  it uh express shipping for the holidays you worried about that I'm worried I'm worried to death
[2:51:50.400 --> 2:51:55.760]  about um I've had two things on my mind the last week john I've had I found out I you know I was
[2:51:55.760 --> 2:52:01.280]  stressing over this interview with Craig Federigi I wanted to do a good job with that and I don't
[2:52:01.280 --> 2:52:05.680]  want to have any Star Wars spoilers and now I've got this interview out of the way we've got a
[2:52:05.680 --> 2:52:10.800]  little nice little post interview discussion with me and you about it I feel like great sense of relief
[2:52:10.800 --> 2:52:17.120]  and there right now as I speak to you on sunday December 13th I I'm now I'm breaking out into a sweat
[2:52:17.120 --> 2:52:21.280]  worrying about spoilers for the four so weekends at least you can just hide in your house I've
[2:52:21.280 --> 2:52:25.120]  got to go to an office so with people who people who may be watching the trailers and reading
[2:52:25.120 --> 2:52:28.560]  every single thing they can find out about these things and as you approach the date you're right
[2:52:28.560 --> 2:52:33.360]  it's like when you get close to an apple event like the day before that's when the real leaks
[2:52:33.360 --> 2:52:37.440]  start coming like oh you know here's what's actually gonna come out and you find it after the fact
[2:52:37.440 --> 2:52:43.120]  actually that that you know seven hour before thing was a hundred percent true my friend my friend
[2:52:43.120 --> 2:52:50.080]  Moises Chulu he's down in Austin he's a big film film fan he's trying to get into he's trying to
[2:52:50.080 --> 2:52:54.800]  angle his way into the press screening down there which is Tuesday morning but I think the big
[2:52:54.800 --> 2:53:01.280]  the big one is in Los Angeles tomorrow I think it's on monday so I feel like and the critics I
[2:53:01.280 --> 2:53:05.280]  think usually know you know to keep keep their spoilers to themselves but that it's not just
[2:53:05.280 --> 2:53:10.080]  like a it's not a critics-only screening like all sorts of in anybody who's anybody and Hollywood
[2:53:10.080 --> 2:53:15.680]  can go to the screening on monday night and blab about whatever the secrets are so now I don't
[2:53:15.680 --> 2:53:20.960]  know what to do and you just got like just think about like the stupid think pieces that are going
[2:53:20.960 --> 2:53:25.040]  to be like I can't believe they did this thing in star wars people got to have a big think piece
[2:53:25.040 --> 2:53:28.720]  about what it means for the franchise like no one's even seen the movie you don't have to think
[2:53:28.720 --> 2:53:34.000]  pieces on it and that that's gonna make people go like they're like that's that's gonna make
[2:53:34.000 --> 2:53:37.920]  people want to read the story and I don't want to know so and I can't hide from the world like I
[2:53:37.920 --> 2:53:42.160]  can I can ignore the internet but if there's people the office who have read the think pieces
[2:53:42.160 --> 2:53:45.920]  and are discussing how amazing it is the jar jar banks comes back and destroys everybody like I
[2:53:45.920 --> 2:53:53.120]  don't want to hear about it right and I'm so worried that it will it'll pop up in one of those
[2:53:53.120 --> 2:53:58.880]  you know like you get to the bottom of an article on most news sites today and they have these
[2:53:58.880 --> 2:54:05.440]  all other things around the web you might want to know I am so worried that the you know and I
[2:54:05.440 --> 2:54:09.040]  you said that it's just gonna put the spoiler right in the god damn headline and it'll be
[2:54:09.040 --> 2:54:12.640]  right there in front of a course will be because it'll be a think piece that assumes everybody
[2:54:12.640 --> 2:54:18.960]  or you knows the spoiler and it's like no I want to discuss this spoiler right now I have I don't
[2:54:18.960 --> 2:54:24.800]  know it's almost like worse than I've been successful at keeping myself almost entirely spoiler free
[2:54:26.400 --> 2:54:32.960]  and I also have I have a good ability you know maybe it's a bad ability in the long run but
[2:54:32.960 --> 2:54:39.120]  in certain aspects but at least for this movie I can willfully forget something so I don't have
[2:54:39.120 --> 2:54:47.600]  that ability so like I can't even think there's been like at least two minor spoilers that I've
[2:54:47.600 --> 2:54:53.200]  encountered in the last few weeks and as I speak to you right now I can't bring them to mind
[2:54:53.200 --> 2:54:58.560]  and I think I could if I tried but I've I've you know there's a weird ability in my mind to
[2:54:58.560 --> 2:55:03.280]  compartmentalize where I've I've kept them away and when I see them in the movie I'll be like oh yeah
[2:55:03.280 --> 2:55:09.920]  I knew that but I'd forgotten it but I remember that I knew it I can do that I'm trying to just like
[2:55:09.920 --> 2:55:13.760]  not think about the things I already know the future because if I think about them I'll figure
[2:55:13.760 --> 2:55:17.920]  crap out so I just like I just avoid that part of my mind like don't even think about that
[2:55:17.920 --> 2:55:20.720]  I don't know if that's gonna work but it's the same type of thing like once it
[2:55:20.720 --> 2:55:24.400]  once I see it in the movie to be like yeah I could have derived that from the information I had
[2:55:24.400 --> 2:55:31.200]  at hand but I didn't want to so here's what I've done I just to be clear I did watch the first trailer
[2:55:32.880 --> 2:55:37.600]  and and then I instantly as soon as it was over I was excited and then I hit play again and watched
[2:55:37.600 --> 2:55:42.720]  it again and then I thought shit why did I watch that I shouldn't watch that I feel like I've
[2:55:42.720 --> 2:55:48.880]  already had things spoiled and I I know that JJ Abrams is sort of an anti-spoiler director
[2:55:48.880 --> 2:55:53.200]  and largely it seems so far they've kept a lot of stuff under wraps it really seems like
[2:55:53.200 --> 2:55:58.960]  I could be wrong maybe there's other websites where like the whole thing is spoiled I haven't seen
[2:55:58.960 --> 2:56:04.480]  it I trusted him to make a trailer that didn't really have spoilers I wouldn't say that it did
[2:56:04.480 --> 2:56:09.200]  I think it was a good trailer but I still regret it I still regret it I regret that I've seen
[2:56:09.200 --> 2:56:16.320]  the stupid lightsaber with the the the side blades yeah I mean so I watched the first trailer too
[2:56:16.320 --> 2:56:20.640]  just because I was so desperate to know like what is this going to be like like what is
[2:56:20.640 --> 2:56:24.160]  what is it even gonna look like because it because all bets were off like who knows whether
[2:56:24.160 --> 2:56:29.280]  we're gonna go with this franchise it could have was it gonna look like the trailer for Prometheus
[2:56:29.280 --> 2:56:35.440]  and be like dark and gritty was it gonna look like tomorrow and be happy like like how
[2:56:35.440 --> 2:56:39.120]  what is there what was their take on Star Wars gonna be so I felt like I had to watch the first
[2:56:39.120 --> 2:56:44.480]  trailer but after that I've been often like so far my barrier is held up pretty well through a
[2:56:44.480 --> 2:56:49.360]  series of filters and and people are nice to me and everything but the one the one place has been
[2:56:49.360 --> 2:56:53.360]  tearing down a little bit television shows I almost almost don't even want to tell you this but
[2:56:54.880 --> 2:57:01.360]  I discovered by 30 seconds skipping through ads on my Tivo as the 30 seconds skip went by occasionally
[2:57:01.360 --> 2:57:07.520]  a frame that by mine would register as Star Wars would come by and it was enough for me to know
[2:57:07.520 --> 2:57:11.040]  that oh my god they're running they're running Star Wars TV ads I don't know if you knew this
[2:57:11.040 --> 2:57:17.840]  but I'm on television there I had for this movie I did and it's my my weakness for sports got me
[2:57:17.840 --> 2:57:24.000]  I was watching I watched the Dallas Cowboys red skinned on Monday night football and it's apparently
[2:57:24.000 --> 2:57:31.760]  it seemed to me as though the Disney had purchased a commercial in every at least one commercial
[2:57:31.760 --> 2:57:39.200]  in every single commercial break like a true carpet bombing marketing campaign and it's there you
[2:57:39.200 --> 2:57:47.360]  know there's I took till like skipping through the commercials like with my this isn't that you
[2:57:47.360 --> 2:57:55.440]  couldn't do it but I skipped through the commercials with my good eye closed and so I was only using
[2:57:55.440 --> 2:58:00.800]  my you're listening with your good ear my damage is left eye which I could still see certain
[2:58:00.800 --> 2:58:05.920]  things and had like a sense of some things that were going on and like oh that's a red lightsaber
[2:58:05.920 --> 2:58:11.360]  but it's like at least the details were blurred out yeah when I saw that the single frames
[2:58:11.360 --> 2:58:15.280]  I got nothing from it and I was I was satisfied with that because every like because most time
[2:58:15.280 --> 2:58:19.760]  I would see zero frames and like once every five shows I would see one frame depending on where
[2:58:19.760 --> 2:58:25.040]  it landed but the other day the very first commercial like the very first commercial in the
[2:58:25.040 --> 2:58:29.840]  commercial break was a Star Wars one and I got like half a sentence out of my god damn it like
[2:58:29.840 --> 2:58:33.360]  because you know you got to find the remote you got to pick it up you got to you know what I mean
[2:58:33.360 --> 2:58:39.440]  like I was I was too slow on the draws like in the old west I got I got shot I really don't have
[2:58:39.440 --> 2:58:44.080]  this week it's gonna go especially once people start saying I got my ticket my first screening is Thursday
[2:58:44.080 --> 2:58:49.440]  night which I'd seems like cheating to me if it if it premieres on Friday I don't know how I'm going
[2:58:49.440 --> 2:58:53.680]  to at 10 o'clock Thursday yeah some some I mentioned that too and some was saying like was because of
[2:58:53.680 --> 2:58:58.400]  that it was after that a rod or not this true after that Aurora shooting and Colorado that the midnight
[2:58:58.400 --> 2:59:04.320]  showing stop being a midnight I feel like that was happening before that but yeah so it's like it's like
[2:59:04.320 --> 2:59:08.880]  it's like so my 10 o'clock Thursday night screening is a midnight screening but there's like an
[2:59:08.880 --> 2:59:13.440]  asterisk which is we know it's not really right and that like they do seven p.m. screens like
[2:59:13.440 --> 2:59:17.600]  the midnight show is now at seven p.m. it's like it's like you know Christmas creep or anything it's
[2:59:17.600 --> 2:59:21.360]  soon the midnight showing will be like the Wednesday before yeah or it's like the Saturday night seven
[2:59:21.360 --> 2:59:27.200]  o'clock mass if you're Catholic yeah well we're calling it Sunday it's Sunday somewhere yeah
[2:59:27.200 --> 2:59:33.200]  some I might showing us on Thursday as well yeah so you know then Friday I'm gonna spoil
[2:59:33.200 --> 2:59:37.600]  like I'm gonna spoil everything for everybody else I'll just feel so much better if I make it
[2:59:37.600 --> 2:59:41.440]  into that and like I said the the the most dangerous time I said this in the account for the most
[2:59:41.440 --> 2:59:45.280]  dangerous time is when you're waiting in line to the theater and people are coming out of the
[2:59:45.280 --> 2:59:49.120]  theater especially if it's a theater that doesn't exit them out the back like if the people who
[2:59:49.120 --> 2:59:53.200]  are dancing the movie walk piece past the people who are still waiting just in the movie super
[2:59:53.200 --> 2:59:58.560]  dangerous yeah yeah famous everybody has famous maybe it's even a
[2:59:58.560 --> 3:00:04.160]  uh a pocket full stories of waiting in line for the Empire Strikes Back and then some dip
[3:00:04.160 --> 3:00:10.400]  shit runs by and purposefully screams at the top of his lung Darth is Luke's father yeah and in the
[3:00:10.400 --> 3:00:14.560]  age of internet trolling I remember seeing this terrible youtube video of someone driving a car
[3:00:14.560 --> 3:00:19.840]  past the people lined up waiting for like whatever was the the fifth book or some Harry
[3:00:19.840 --> 3:00:23.520]  Potter book or something dramatic happens other people didn't expect so people are waiting
[3:00:23.520 --> 3:00:27.120]  at line at the bookstore to get like an opening night to buy the copy of the book and someone
[3:00:27.120 --> 3:00:30.720]  like films it for youtube and drives past and yells at phrase that I'm not going to yell because
[3:00:30.720 --> 3:00:35.200]  it will spoil Harry Potter her bunch of little kids listening to this but yells it to the entire
[3:00:35.200 --> 3:00:40.000]  line and the worst part is like they don't know if it's true he could the person could be making
[3:00:40.000 --> 3:00:44.720]  stuff up but in your heart of hearts like as you're reading the book as they approach
[3:00:44.720 --> 3:00:49.760]  you're like that kind of was right to be rooted for you know don't be that person that's the worst
[3:00:49.760 --> 3:00:55.680]  thing ever what's the only Star Wars movie that doesn't take have some part of it take place on tattooing
[3:00:57.120 --> 3:01:03.040]  has it one of the fake ones no it's not one of the empire I guess right now all the fake ones
[3:01:03.040 --> 3:01:04.560]  have scenes on tattooing yeah you're right
[3:01:07.280 --> 3:01:11.360]  maybe in special edition of the editing tattooing parts vampire to remember just
[3:01:11.360 --> 3:01:15.200]  so that just they had to correspond to Jedi who knows what the hell they're any that would
[3:01:15.200 --> 3:01:20.160]  be the worst if they just like it in between a cutaway as big as circular white from Dagobah
[3:01:20.160 --> 3:01:24.960]  instead of going to the asteroid field they they cut to the some droids twiddling around on the
[3:01:24.960 --> 3:01:30.240]  in the sand yeah or like like when they first start hunting for the Millennium Falcon like
[3:01:30.240 --> 3:01:35.680]  there's a phone call from Darth Vader to the Boba Fett and Jim job his palace like
[3:01:35.680 --> 3:01:39.520]  could be where I need you so what Lucas is really concerned about is like how did those bounty
[3:01:39.520 --> 3:01:43.680]  hunters all get on to the Death Star I want to see them remember when he did that change for Jedi
[3:01:43.680 --> 3:01:47.200]  it's like that he showed like a Vader's shuttle taking him from point A the point B so he
[3:01:47.200 --> 3:01:51.200]  weren't confused about how he arrived like a closet here whatever it's like you get it they flew
[3:01:51.200 --> 3:01:58.480]  there in their spaceship we don't need to see it I think yeah yeah I don't even want to get into
[3:01:58.480 --> 3:02:03.200]  what he added that's the some of the additions though like there's the when you get into the list
[3:02:03.200 --> 3:02:06.960]  of like what was taken out of the de-specialized or whatever you want to call it the ones that were
[3:02:06.960 --> 3:02:12.080]  taken out of the de-specialized you know shimmy's that prince or the the you know what was added to
[3:02:12.080 --> 3:02:16.880]  the specialized everybody thinks of Han shot Han shooting first and all of these gratuitous things
[3:02:16.880 --> 3:02:20.800]  in the ridiculous CGI backgrounds they put behind the windows of best men and all these things
[3:02:20.800 --> 3:02:27.200]  that really really stand out or the god awful CGI stuff they added to most eyesly in a new hope
[3:02:29.600 --> 3:02:34.960]  it's the little things though like your anger your boiling anger is over these big ugly changes
[3:02:34.960 --> 3:02:40.240]  that really stand out and just don't add anything and take away some of the magic but then when
[3:02:40.240 --> 3:02:44.880]  you read some of the little things that that Lucas had added you're like what was it what this man
[3:02:44.880 --> 3:02:50.640]  went insane like it's the little things that make you realize that he he's somehow lost his marbles
[3:02:50.640 --> 3:02:54.800]  the one I've forgotten about until I was reminded I think in some slack channel somewhere I think
[3:02:54.800 --> 3:03:00.400]  I've ever talked to you about it was the day ago but when our two gets spit out of the big swamp
[3:03:00.400 --> 3:03:04.960]  creature and the the actual line in the movie is you're lucky you don't taste very good this
[3:03:04.960 --> 3:03:09.120]  would Luke says to him which is a good last line you know whatever for a silly situation and he
[3:03:09.120 --> 3:03:13.600]  changed it to a less funny line like it's not like well he was like you're lucky you got out of
[3:03:13.600 --> 3:03:18.800]  there no no the first the first one was better it was adding a little bit of levity with
[3:03:18.800 --> 3:03:24.400]  sarcastic it was and Luke is kind of like sarcastic and and a little bit cranky in that scene so
[3:03:24.400 --> 3:03:28.400]  it's perfect like you're lucky you don't taste very good you're lucky you got out of there that's
[3:03:28.400 --> 3:03:31.600]  your improvement it's like you know when you bring someone in to punch up a script this is the
[3:03:31.600 --> 3:03:37.760]  opposite the guy who unpunches it punches it down it it's that's a perfect example maybe the
[3:03:37.760 --> 3:03:43.520]  canonical example maybe that's like the best example because it it sounds inconsequential but it
[3:03:43.520 --> 3:03:49.840]  was a little funny and then it's not funny at all and it also was like establishes the characters
[3:03:49.840 --> 3:03:59.360]  it is like hey Luke and R2 have a friendship right it's not just a device that's owned by Luke
[3:03:59.360 --> 3:04:03.520]  he's you know there's a rapport between these two and you know everybody who's seen the first
[3:04:03.520 --> 3:04:11.200]  one knows that R2D2 is clearly a sort of sarcastic wise ass right these are wise ass robot
[3:04:11.200 --> 3:04:15.840]  you don't know what he's saying but you can tell from three Pio's responses that he's a wise ass
[3:04:15.840 --> 3:04:22.640]  and Luke is giving it back to him it actually is meaningful in some small way in terms of shaping
[3:04:22.640 --> 3:04:27.360]  the relationship between the characters and it fits perfectly in that scene like I think one of my
[3:04:27.360 --> 3:04:33.360]  favorite cuts in the in the Dagobah sequences where like Luke is just the his he just crashed a
[3:04:33.360 --> 3:04:38.240]  ship everything's all crappy and it's like his droid was attacked by a monster and spit out and he's
[3:04:38.240 --> 3:04:42.320]  covered with water and his droids covered with mud he's like I don't even know what we're doing here
[3:04:42.320 --> 3:04:49.200]  and R2 like to end the scene R2 expels mud for Mona has been the top of us and like that basically
[3:04:49.200 --> 3:04:54.800]  sums it up like it just it's like slapstick slapstick comedy but uh comedy but also
[3:04:54.800 --> 3:04:59.920]  commentary on this situation which is you know what this is crap we're we're not doing well here
[3:05:02.640 --> 3:05:07.280]  so to wrap it up what what is your expectation going do you think this is going to be a movie that
[3:05:07.280 --> 3:05:12.480]  makes you happy or do you think it's going to be another disappointment do you have shown us you
[3:05:12.480 --> 3:05:15.680]  should put the incomparable episode where we talked about this in the show notes I wouldn't
[3:05:15.680 --> 3:05:20.960]  entire episode of the incomparable about the anticipating the Force Awakens and it's a
[3:05:20.960 --> 3:05:26.960]  song but I said there I'm of two minds about it on the one hand when I do on a little bit I
[3:05:26.960 --> 3:05:33.200]  started to get depressed because I'm like there's just no way that this can be as meaningful to
[3:05:33.200 --> 3:05:38.000]  me as the original three movies I would just find like you know whatever like I start to think
[3:05:38.000 --> 3:05:41.920]  that there's just no way this can be as meaningful to me because things you experience in your
[3:05:41.920 --> 3:05:49.200]  formative years always have a certain extra amount of impact um but on the other hand I say well
[3:05:49.200 --> 3:05:54.240]  but isn't it possible it's not as if as an adult it is impossible to get to me it's impossible
[3:05:54.240 --> 3:06:00.160]  to be affecting and I was what I try to do is think of what media movies or whatever have seen
[3:06:00.160 --> 3:06:05.120]  as an adult that have like really stuck with me and affected me just basically to put like what
[3:06:05.120 --> 3:06:09.520]  what is the bar like if I just become such a jaded individual that no movie can really get to me
[3:06:09.920 --> 3:06:13.520]  and so I should just put that out of my mind the Star Wars is not going to be like that and what I
[3:06:13.520 --> 3:06:18.000]  came back to is like a lot of the Miyazaki movies I saw as an adult really stick with me in
[3:06:18.000 --> 3:06:22.160]  a meaningful and important movies that I would put right up there with the Star Wars movies and
[3:06:22.160 --> 3:06:25.360]  that maybe they're not as big because they didn't see them in my formative years but I saw them
[3:06:25.360 --> 3:06:29.760]  as adult then basically what I'm doing is I'm reassuring myself that that a movie can get to me
[3:06:29.760 --> 3:06:36.640]  and so that's the top bar and then the other thing I have to say is like so it's you've decided
[3:06:36.640 --> 3:06:40.640]  that you as an adult are able to be affected by a movie well what if you watch this movie this
[3:06:40.640 --> 3:06:44.960]  new Star Wars movie and it's merely a pretty good movie are you okay with that and what I used
[3:06:44.960 --> 3:06:50.080]  was a Star Trek movies like the recent reboot Star Trek's I enjoyed those and when I rewatched
[3:06:50.080 --> 3:06:53.600]  them I said you know what this was a fun movie but I don't really care that much about Star Trek
[3:06:53.600 --> 3:06:57.920]  so there's way less baggage there but what I've been trying to think about is if I go into this
[3:06:57.920 --> 3:07:03.200]  movie there's not the most amazing movie I ever saw but it's competently made it's fun it's
[3:07:03.200 --> 3:07:08.800]  exciting I have fun watching it do I say yeah but it was Star Wars and it's supposed to be way
[3:07:08.800 --> 3:07:14.640]  better than that or do I am I able to enjoy it the same way that I could enjoy those Star Trek
[3:07:14.640 --> 3:07:19.680]  movies that I care way way less about and I don't know what the answer to that is but really what
[3:07:19.680 --> 3:07:25.440]  I've come down to is I think I believe it is possible for this movie to be really important and
[3:07:25.440 --> 3:07:32.720]  meaningful I probably I think it probably won't be and I'm trying to be okay with with it merely
[3:07:32.720 --> 3:07:37.040]  being a good fun movie and just me being so much so excited that it wasn't like the prequel
[3:07:37.040 --> 3:07:44.480]  I my big fear is I feel like the big problem with the prequels was there's so many and we've
[3:07:44.480 --> 3:07:49.200]  talked we've talked about the meant length on the show and others but to me at a fundamental
[3:07:49.200 --> 3:07:55.280]  level it's that the characters were flat and the dialogue was flat and there's no camaraderie
[3:07:55.280 --> 3:08:00.720]  and and no and and and and in plot wise and story wise there was no sense of mystery in fact the
[3:08:00.720 --> 3:08:05.680]  whole point of the prequel trilogy was to explain all the mysteries that that the original
[3:08:05.680 --> 3:08:11.840]  trilogy trilogy lied on and I've said this before like it always seemed like the original trilogy
[3:08:11.840 --> 3:08:16.240]  could have you know and there were rumors from when we were kids that Lucas but the next three
[3:08:16.240 --> 3:08:22.160]  movies wouldn't be after the return of the Jedi they would be before when Ben Kenobi and
[3:08:22.160 --> 3:08:27.280]  Anakin Skywalker were younger and it always seemed like well of course he could do that because
[3:08:27.280 --> 3:08:30.800]  my god there's so much stuff that they could explain what the hell the Clone Wars were how the
[3:08:30.800 --> 3:08:36.320]  Emperor came to be how the Emperor Empire came to be all of these things could you know could be a
[3:08:36.320 --> 3:08:41.840]  movie but the fact that they were were mysteries or were only gently vaguely alluded to
[3:08:43.280 --> 3:08:47.600]  it gave a wait to the original trilogy that the prequels didn't have because all they tried to do
[3:08:47.600 --> 3:08:53.760]  is piss away and explain everything right down to explaining how the force worked I don't think
[3:08:53.760 --> 3:08:58.160]  that's gonna be a problem I feel like JJ one thing JJ Abrams knows how to do is have engaging
[3:08:58.160 --> 3:09:06.960]  characters in a sense of camaraderie and and and good at a good year for dialogue my big concern is
[3:09:06.960 --> 3:09:16.480]  that the modern needs or perceived needs in Hollywood of a big budget action movie are such that
[3:09:16.480 --> 3:09:23.200]  there's no way you know it's still gonna be filled with a hundred and ten minutes of CGI action
[3:09:23.200 --> 3:09:29.280]  chases yeah I talked about the any a comparable to in the context of like modern movie making
[3:09:29.280 --> 3:09:34.800]  sensibilities because this using the Star Trek's again as example you see in those right the
[3:09:34.800 --> 3:09:41.040]  yeah yeah I like especially track rather yeah especially like the first one yeah and so
[3:09:41.040 --> 3:09:48.480]  those definitely look at Star Trek with modern movie making sensibilities and I like them like I
[3:09:48.480 --> 3:09:55.040]  thought they were enjoyable but you have to say like those movies are Star Trek as reimagined
[3:09:55.040 --> 3:10:01.520]  through the lens through the lens of a modern filmmaker and for the Star Wars things I really
[3:10:01.520 --> 3:10:07.520]  fervently hope that JJ is a big enough Star Wars fan that what they do what he does instead
[3:10:07.520 --> 3:10:15.760]  is you know this certain Star Wars magic that I want to feel in this movie not that it's any
[3:10:15.760 --> 3:10:20.160]  worse or better than modern movie making sensibilities but it's a different set of sensibilities
[3:10:20.160 --> 3:10:25.200]  that inform the original trilogy and I feel like those those still work and are still fresh
[3:10:25.200 --> 3:10:30.560]  so I want this movie to feel like Star Wars first and foremost I don't want it to feel like
[3:10:30.560 --> 3:10:35.840]  Star Wars as the scene through the lens of a modern filmmaker and this thing you know to continue
[3:10:35.840 --> 3:10:39.760]  I'm not saying it's like you're on one side of it on the other but I desperately want this
[3:10:39.760 --> 3:10:44.640]  and again I use Miyazaki's my example Miyazaki movies are about all sorts of different topics
[3:10:44.640 --> 3:10:51.040]  across decades but they all feel like Miyazaki movies so I'm okay with this movie being different
[3:10:51.040 --> 3:10:56.080]  from the original trilogy in fundamental ways but it has to feel like Star Wars it shouldn't feel
[3:10:56.080 --> 3:11:02.080]  like a modern movie a modern reimagining of Star Wars I want it to feel like Star Wars at least
[3:11:02.080 --> 3:11:07.360]  just these three after that fine then totally reimagined everything about it but I want these
[3:11:07.360 --> 3:11:12.080]  three movies seven eight nine to feel like Star Wars yeah that's a good way to put it I agree and
[3:11:12.080 --> 3:11:17.680]  there's it is it's almost like a branding thing you know that there was a certain way that the
[3:11:18.400 --> 3:11:26.320]  the original series just lacked bombastic the scenes I mean I mean like the the the the space battle
[3:11:26.320 --> 3:11:32.000]  in Return of the Jedi sort of I think set the set the stage for modern action movies and it was
[3:11:32.000 --> 3:11:35.440]  so awesome at the time and I do love it it's one of the end it's one of my favorite things in
[3:11:35.440 --> 3:11:42.080]  all Return of the Jedi it's fantastic the way that the ships are so dynamic and the camera moves
[3:11:42.080 --> 3:11:48.080]  around and stuff like that but it's it's if you just use a stopwatch and measure how much of the
[3:11:48.080 --> 3:11:53.120]  movie is taken up by that battle it's actually very little because it was so incredibly hard for
[3:11:53.120 --> 3:11:57.920]  them to do it you know that the computer control where everything was actually like an actual model
[3:11:57.920 --> 3:12:04.000]  and in the modern filmmaking where it's once you have all this stuff set up you can just let like
[3:12:04.000 --> 3:12:09.600]  a you know like it's like a the way that transformer movies work where they're really just two
[3:12:09.600 --> 3:12:14.800]  hour CGI chases through us you know where transformers are throwing themselves in disguise
[3:12:14.800 --> 3:12:19.520]  creepers yeah and like you're trying to think about what is it to make something feel like
[3:12:19.520 --> 3:12:24.320]  Star Wars a lot of it is the limitations of motion and troll cameras and and the you know the
[3:12:24.320 --> 3:12:29.520]  70s and 80s right that define the look of the space battles because what could you do with the
[3:12:29.520 --> 3:12:32.800]  moking troll camera we can do this move that move that move in this move and we can opt
[3:12:32.800 --> 3:12:36.800]  optically composite them together and that kind of defines it but also stuff that didn't have
[3:12:36.800 --> 3:12:40.880]  anything to do with technology like how it scored how there's like music behind everything and how
[3:12:40.880 --> 3:12:45.520]  it's orchestral like that's not the modern way movies are scored that is that is an older way
[3:12:45.520 --> 3:12:50.720]  movies are scored like it's not that's not done and you know John Williams doesn't put an
[3:12:50.720 --> 3:12:55.600]  orchestra behind the transformers movie during like every scene like Star Wars movies are
[3:12:55.600 --> 3:13:00.320]  practically musicals for the amount of music that's in them and the type of music is a weird
[3:13:00.320 --> 3:13:05.600]  old style of music so you can go a long way towards making movie feel like Star Wars without you
[3:13:05.600 --> 3:13:11.840]  know like yes you can do anything in CG but make it feel kind of like Star Wars and you can
[3:13:11.840 --> 3:13:17.440]  you can do a twist on it like in the trailer that we both saw the the camera movement around the
[3:13:17.440 --> 3:13:20.800]  Millennium Falcon when it's doing all these strange maneuvers you couldn't really do that
[3:13:20.800 --> 3:13:24.080]  physically with the motion drill camera especially with the crazy backgrounds and everything
[3:13:24.080 --> 3:13:29.920]  you can do it with CG but in some sense it still feels Star Wars because lots of the swoopy moves
[3:13:29.920 --> 3:13:34.960]  where the camera was following the ship and the ship was twirling around this is just like
[3:13:34.960 --> 3:13:40.960]  that cranked up a little bit more it is it's a difference between that and like the like the fancy
[3:13:40.960 --> 3:13:47.680]  the fancy way that Han piloted the Falcon into the asteroid crater in Empire straight back
[3:13:47.680 --> 3:13:54.160]  where it was like this exuberant like straight up straight down paperclip you know like you motion
[3:13:56.080 --> 3:14:00.880]  you know it's just show you just show off type type of guy accompanied by an ascending and
[3:14:00.880 --> 3:14:04.960]  descending scale in the soundtrack when John Williams with like the flutes or whatever going in there
[3:14:04.960 --> 3:14:09.040]  like that's totally a Star Wars type thing and comparing it to like remember did you watch the
[3:14:09.040 --> 3:14:13.840]  bowstock life like a reboot yeah I did uh remember they used to do this thing that made it look like
[3:14:14.480 --> 3:14:19.280]  the the vipers or whatever were being filmed by someone with a handheld camera far away so it
[3:14:19.280 --> 3:14:23.680]  would shake and then they would do that the really dramatic zoom in yeah it's like to acquire the
[3:14:23.680 --> 3:14:27.600]  ship and then try to get it centered in the frame like someone trying to catch like a long
[3:14:27.600 --> 3:14:32.320]  Hail Mary pass like a head cameraman try to say where the hell is the football I got a zoom in
[3:14:32.320 --> 3:14:35.520]  uh they don't do that these days I saw that big Hail Mary and like they were at the camera back
[3:14:35.520 --> 3:14:39.120]  the whole time don't they follow the ball anymore whatever the hell happened to NFL films where you
[3:14:39.120 --> 3:14:45.440]  get to see the things spiraling towards you or is that tech anyway um yeah you can you can make
[3:14:45.440 --> 3:14:50.800]  something feel like Star Wars and be modern without making it look like bowstalker like to be
[3:14:50.800 --> 3:14:54.880]  like all of a sudden everything is handheld shaky ham and they were shaky cam in the trailer
[3:14:54.880 --> 3:14:58.880]  so I'm like I'm not saying you can't use shaky ham you totally can I just I just overall I want
[3:14:58.880 --> 3:15:04.480]  the movie to feel like Star Wars right and part of that to me is that it has to you have to let
[3:15:04.480 --> 3:15:09.200]  certain scenes just just let them breathe and don't worry about whether there's a lot going on
[3:15:09.200 --> 3:15:14.080]  like give us something that's a mystery give us something that's new and then just let us figure it
[3:15:14.080 --> 3:15:19.920]  out like some of my favorite scenes in the original trilogy are just like R2D2 by himself just off
[3:15:19.920 --> 3:15:24.880]  in the desert on tattooing and you just slowly watch R2D2 roll across the desert but there's
[3:15:25.760 --> 3:15:29.040]  it's engaging because you're like well where the hell is this robot going?
[3:15:29.040 --> 3:15:35.920]  Yeah like an empire my favorite one like there's there's so many scenes that end like with
[3:15:35.920 --> 3:15:40.080]  with the mud being spit out that's the end of that scene before they cut to a different one it's
[3:15:40.080 --> 3:15:44.640]  like but wait how does that come it doesn't have to conclude with a line or an event or an
[3:15:44.640 --> 3:15:50.640]  a call to action it can end with the feeling or just showing like you know Yoda walking off into
[3:15:50.640 --> 3:15:56.000]  the misty swamp and Luke just saying stay at the camp like something else is going to have but
[3:15:56.000 --> 3:15:58.720]  you're left with the feeling how are the characters feeling this morning are they
[3:15:58.720 --> 3:16:04.880]  dejected are they hopeful are they cautious are they afraid that's so much more important than
[3:16:04.880 --> 3:16:08.560]  ending every scene with a call to action that leads to the next scene we have to do the whatever
[3:16:08.560 --> 3:16:13.440]  and then go show the whatever and you know it's just as I get excited about this movie Amy keeps
[3:16:13.440 --> 3:16:21.920]  reminding me of the movie AI and you know which was written by Stanley Kubrick I think he even
[3:16:21.920 --> 3:16:28.560]  got a producer credit but it came out after he he had died but that you know the basic story is that
[3:16:28.560 --> 3:16:34.160]  it was a movie he had been to Kubrick had been developing for a long time many years and decided
[3:16:34.160 --> 3:16:40.240]  that he didn't want to direct it that Spielberg should direct it because it needed a warmth a human
[3:16:40.240 --> 3:16:45.280]  empathy that he knew that his movies lacked that it coldness would be the wrong way to approach it
[3:16:45.280 --> 3:16:48.800]  and so he called up Stephen Spielberg and said you know what do you think about that I got this
[3:16:48.800 --> 3:16:53.120]  movie would you want to work with me and Spielberg is a huge Kubrick fan and they'd been friends
[3:16:53.120 --> 3:16:58.160]  over the phone for years and was like okay and then the poor guy died but Spielberg made it anyway
[3:16:58.160 --> 3:17:02.640]  and we're going to see it opening night of course I could not wait we're going to see it opening night
[3:17:02.640 --> 3:17:06.880]  and I pause and we had another friend with those me Amy and my friend Don and I just said yeah I just
[3:17:06.880 --> 3:17:10.400]  want to tell you guys I just want to make a prediction right here I think there's a very strong
[3:17:10.400 --> 3:17:16.400]  chance that we're about to see the greatest movie that's ever seen. Had you not seen any other
[3:17:16.400 --> 3:17:21.200]  Spielberg movies like yeah he's got a human worth but he's also a little sappy. This is what
[3:17:21.200 --> 3:17:26.240]  that's what I said going in to see. Did you say this seriously? I said it in all seriousness I wanted
[3:17:26.240 --> 3:17:32.640]  it like I wanted the the being right points before we did it I said I think we might be going to
[3:17:32.640 --> 3:17:36.320]  I believe there's a good chance that we might be going to see the greatest movie that's ever been
[3:17:36.320 --> 3:17:43.360]  made. I mean not that AI was incredibly terrible but it was not it it missed the mark I think most
[3:17:43.360 --> 3:17:48.000]  people agree. I don't think it makes it it's not a bad movie but it is certainly bad given the
[3:17:48.000 --> 3:17:53.840]  pedigree of the filmmaker so that's why that's what Amy keeps providing we have with the four so
[3:17:53.840 --> 3:17:57.920]  a week. Well but you're not making strong predictions about it. No we're all just we're cautiously
[3:17:57.920 --> 3:18:02.560]  optimistic but like it just has everything going for like the thing I think about this movie that
[3:18:02.560 --> 3:18:06.880]  the things that have faded it to exist is I mean obviously the reason exists is all is Lucas
[3:18:06.880 --> 3:18:10.800]  sells he gets him out of the picture so we don't have to worry about his picadillos messing with things
[3:18:10.800 --> 3:18:16.560]  you know what I mean and who do they get to direct it? The guy who's basically admitted so many
[3:18:16.560 --> 3:18:22.560]  times before this is like that he's a super big Star Wars fan like when he directed Star Trek my
[3:18:22.560 --> 3:18:26.160]  what's kind of a shame because he's always said with what a big Star Wars fan he is and I'm sure
[3:18:26.160 --> 3:18:29.600]  he likes Star Trek I'm sure he'll do a good job but it wouldn't it be great if he could do
[3:18:29.600 --> 3:18:32.480]  Star Wars but now that he's done Star Trek there's no way he's going to do Star Wars because the
[3:18:32.480 --> 3:18:36.720]  same guy's not going to get the same guy to do Star Trek and Star Wars well he got to like essentially
[3:18:36.720 --> 3:18:43.680]  warm up on the lesser franchise Star Trek right and finally and hone his craft over a series of
[3:18:43.680 --> 3:18:48.560]  movies and television shows over the years and then you could say like he's at the top of his game now
[3:18:48.560 --> 3:18:52.800]  fulfilling his childhood fantasy as anyone's childhood you know childhood it's similar age
[3:18:52.800 --> 3:18:57.920]  to direct a new Star Wars movie and he's the guy doing it right now I've heard there's been
[3:18:57.920 --> 3:19:02.480]  creative tensions between him and the people who are running the franchise and that's kind of
[3:19:02.480 --> 3:19:07.120]  makes me worry about the future of this or whatever but like boy the Star is really aligned for both
[3:19:07.120 --> 3:19:12.160]  us and JJ Abrams to have I like JJ Abrams I like his other movies I like that he got to practice
[3:19:12.160 --> 3:19:16.960]  on Star Trek and I really hope that he like uses all his skills and all his powers and
[3:19:16.960 --> 3:19:23.280]  the godfather problems to just like put everything he has into this this you know it's it's his
[3:19:23.280 --> 3:19:26.800]  childhood dreams as long as well as ours tied up into this movie and I really will help it
[3:19:26.800 --> 3:19:34.800]  comes together yeah so I'm optimistic we'll see we'll see how it goes anyway John Syracuse that
[3:19:34.800 --> 3:19:39.120]  thank you for your time this has been extremely generous of you we've gone on a long time
[3:19:39.120 --> 3:19:43.840]  yeah Craig didn't take all my time as would have been you know no I told you weren't going to
[3:19:43.840 --> 3:19:47.760]  get cheated out of time you weren't John was worried when I asked him to do the show that
[3:19:47.760 --> 3:19:51.600]  he'd get shortchanged on time because of the Craig Fittery segment not to worry
[3:19:51.600 --> 3:19:56.960]  yeah we'll just make him a three hour show whatever yeah big long big long healthy that's like a
[3:19:56.960 --> 3:20:01.760]  holiday meal big long healthy meal I should thank all of our sponsors we've got Harries go to them
[3:20:01.760 --> 3:20:07.120]  buy their shaving stuff wealth front you can invest your money square space you can build your own
[3:20:07.120 --> 3:20:12.080]  website and Casper you can buy a mattress which I again I'm telling you what a holiday gift I
[3:20:12.080 --> 3:20:19.360]  did that would be John Syracuse you can find him on his weekly podcast with the other guys ATP
[3:20:19.360 --> 3:20:27.280]  that's accidental tech podcast at ATP.fm and he's just at Syracuse on Twitter anything else
[3:20:27.280 --> 3:20:54.720]  yeah thank you covered it there we go thank you John thank you
