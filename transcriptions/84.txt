[00:00.000 --> 00:04.760]  Boy, I really had a hard time getting my handle on WWDC.
[00:04.760 --> 00:05.760]  Still do.
[00:05.760 --> 00:09.760]  Two weeks later, it still feels like a lot to digest.
[00:09.760 --> 00:10.760]  There is a lot.
[00:10.760 --> 00:11.760]  There's a lot.
[00:11.760 --> 00:12.760]  So there's a lot of technical stuff.
[00:12.760 --> 00:13.760]  Yeah.
[00:13.760 --> 00:15.200]  Huge amount of technical stuff.
[00:15.200 --> 00:19.000]  And then there's the entire sort of cultural change.
[00:19.000 --> 00:20.160]  Yeah.
[00:20.160 --> 00:27.120]  Have you watched a lot of sessions in a week's sense or caught up or read the developer
[00:27.120 --> 00:28.120]  documentation?
[00:28.120 --> 00:29.120]  Yeah.
[00:29.120 --> 00:30.120]  Yeah.
[00:30.120 --> 00:31.120]  I'm absorbing as much as I can.
[00:31.120 --> 00:32.120]  Yeah.
[00:32.120 --> 00:33.120]  Impressive.
[00:33.120 --> 00:34.120]  I don't know.
[00:34.120 --> 00:35.120]  I literally don't know where to start.
[00:35.120 --> 00:36.920]  Well, here's what I would think.
[00:36.920 --> 00:37.920]  I think I mentioned this.
[00:37.920 --> 00:41.880]  You know, the whole thing is a goddamn blur, what I mentioned on stage on the stage show,
[00:41.880 --> 00:43.200]  which was the previous episode.
[00:43.200 --> 00:47.020]  But I think I mentioned this, but I think it deserves even more attention because I
[00:47.020 --> 00:52.660]  think even more of it than I understood the day after the keynote.
[00:52.660 --> 00:57.480]  So much of what they announced technically comes down to XPC.
[00:57.480 --> 00:58.480]  Yes.
[00:58.480 --> 00:59.480]  Yes.
[00:59.480 --> 01:00.480]  Right.
[01:00.480 --> 01:01.480]  Yeah.
[01:01.480 --> 01:05.440]  And we've known, you know, and that's, that's Apple's term for inner application communication,
[01:05.440 --> 01:06.440]  right?
[01:06.440 --> 01:13.720]  The X, I guess is, yeah, it's a nice, it's a nice framework based on mock message passing.
[01:13.720 --> 01:14.960]  Okay.
[01:14.960 --> 01:19.040]  And they've been working on it for a long time.
[01:19.040 --> 01:26.200]  And I think you guys mentioned this on the debug round table, which was amazing to me
[01:26.200 --> 01:31.600]  because you guys had like six guys in there and it really was like an orderly discussion
[01:31.600 --> 01:39.040]  where everybody got to, to speak plenty, which is actually, yeah, it was kind of surprising.
[01:39.040 --> 01:40.120]  We were all in same moon though.
[01:40.120 --> 01:41.120]  So that helps.
[01:41.120 --> 01:42.120]  Right.
[01:42.120 --> 01:43.480]  You know, that makes all the difference in the world because you can do little things
[01:43.480 --> 01:46.800]  like you make eye contact and it's like, I've got a point.
[01:46.800 --> 01:50.440]  You can kind of like, you know, like, Hey, I've got something and people can concede
[01:50.440 --> 01:51.440]  to you.
[01:51.440 --> 01:55.080]  Whereas if you're all over Skype, it's, there's a lot more cross talk.
[01:55.080 --> 01:56.080]  Yeah.
[01:56.080 --> 01:59.040]  And I think I'm sure during this show I'm going to end up talking over you at some point.
[01:59.040 --> 02:00.800]  Well, that's why I have you here guy.
[02:00.800 --> 02:01.800]  Exactly.
[02:01.800 --> 02:03.400]  But yeah, no, it went really well.
[02:03.400 --> 02:07.480]  Uh, and I'm not just saying that cause it's, it's our show, but you know, I think listening
[02:07.480 --> 02:09.640]  to your show would probably get a kick out of that one.
[02:09.640 --> 02:10.640]  Right.
[02:10.640 --> 02:15.040]  But one of the points that was brought up, I think it was Ryan Nielsen brought up that,
[02:15.040 --> 02:21.760]  that outside developers have known for a while that Apple had this XPC architecture and was
[02:21.760 --> 02:27.280]  using it for their own stuff in the system because you can see it in like the stack traces
[02:27.280 --> 02:28.600]  you get when an app crashes.
[02:28.600 --> 02:32.240]  You can see that that stuff's going on and yeah, like if you're being a very, a share
[02:32.240 --> 02:36.480]  sheets, like a, the male one, I think are the, um, like the Facebook sharing stuff.
[02:36.480 --> 02:37.480]  Yeah.
[02:37.480 --> 02:38.480]  Like Facebook and Twitter.
[02:38.480 --> 02:39.480]  Yes.
[02:39.480 --> 02:40.480]  Like you see, yeah.
[02:40.480 --> 02:43.800]  Stuff like that will come up and what's happening is in your process, there's a UI remote view
[02:43.800 --> 02:49.680]  control that's called and that's basically just basically a canvas in which some other
[02:49.680 --> 02:53.520]  processes interface gets projected into, into your app.
[02:53.520 --> 02:58.960]  Um, and you know, previously if there was a bug or something that you would, you would
[02:58.960 --> 03:02.800]  crash and you'd see a stack trace of all of the, the private goodies that went on behind
[03:02.800 --> 03:04.720]  the scenes in order to make that happen.
[03:04.720 --> 03:09.200]  So we knew that stuff was going on and you could see, you know, it didn't have to be
[03:09.200 --> 03:14.320]  a genius if you knew that was going on and you could see that that's how Apple implemented
[03:14.320 --> 03:18.400]  the Twitter and Facebook sharing, then you could kind of think, well then that could
[03:18.400 --> 03:23.200]  be an API so that anybody could get into that share sheet.
[03:23.200 --> 03:27.840]  Uh, and we all kind of hoped that that was going to happen last year and didn't.
[03:27.840 --> 03:33.120]  Um, well the reason for that is like it had been at least two operating systems that it
[03:33.120 --> 03:35.200]  did, that XPC had been in there.
[03:35.200 --> 03:36.200]  Hmm.
[03:36.200 --> 03:37.200]  Right.
[03:37.200 --> 03:40.280]  I think it was Iowa six where some of that stuff, the sharing stuff started, right?
[03:40.280 --> 03:42.240]  Could be, but I think XPC was even in five.
[03:42.240 --> 03:43.800]  Well then it's three, right?
[03:43.800 --> 03:47.320]  Five, six, seven before they opened it up to third parties.
[03:47.320 --> 03:48.320]  Yeah.
[03:48.320 --> 03:52.800]  So it had to be, I don't, I don't actually believe XPC itself is yet open to third parties
[03:52.800 --> 03:53.800]  all.
[03:53.800 --> 03:54.800]  I can check.
[03:54.800 --> 03:56.120]  No, but they've stuff on top of it.
[03:56.120 --> 03:57.120]  Right.
[03:57.120 --> 03:58.120]  Exactly.
[03:58.120 --> 03:59.120]  Right.
[03:59.120 --> 04:00.120]  Like that.
[04:00.120 --> 04:01.120]  They're, they're building all this stuff on top of it.
[04:01.120 --> 04:03.840]  And that's how the keyboards, you know, all this crazy stuff, well not crazy, but all
[04:03.840 --> 04:10.600]  this seemingly divergent stuff like the sharing sheets and keyboards.
[04:10.600 --> 04:17.200]  And I'm pretty sure I had the new, um, uh, webkit.
[04:17.200 --> 04:22.440]  There's an all new webkit API and we went all the, a long time where when apple switched
[04:22.440 --> 04:29.680]  to the jet, the just in time compiler, which requires memory being marked as executable,
[04:29.680 --> 04:35.040]  therefore didn't allow it for the third party webkit framework that only safari got to use
[04:35.040 --> 04:39.920]  the faster webkit and they didn't slow down third party webkit.
[04:39.920 --> 04:45.560]  They just didn't let third party apps that embed webkit views take advantage of the new
[04:45.560 --> 04:47.060]  thing, which is a subtle difference.
[04:47.060 --> 04:48.060]  But it's, it is.
[04:48.060 --> 04:49.060]  It's kind of funny.
[04:49.060 --> 04:50.420]  Like, yeah, it's not that they slowed it down.
[04:50.420 --> 04:52.940]  They just sped their own thing up.
[04:52.940 --> 04:57.560]  But a lot of people took it as that they slowed us down and that was not the case.
[04:57.560 --> 04:58.560]  Right.
[04:58.560 --> 05:02.300]  I'm pretty sure that that's XPC too, right?
[05:02.300 --> 05:07.120]  So it's not, it's not that they know the way that they've done this and that they've given
[05:07.120 --> 05:09.920]  all apps that use the new webkit API.
[05:09.920 --> 05:17.040]  The fastest webkit on the system is not by having webkit running within your app anymore.
[05:17.040 --> 05:23.920]  It's a separate process and much like safari has been on the Mac for a while where you've
[05:23.920 --> 05:30.040]  got these separate rendering processes and a restricted sandbox, um, that only do the
[05:30.040 --> 05:33.520]  rendering and then they'd project their view into the app through XPC.
[05:33.520 --> 05:34.520]  Right.
[05:34.520 --> 05:42.160]  So, and so for now for new webkit on iOS, um, the reason that they allow the just-in-time
[05:42.160 --> 05:45.240]  to compiler is because you're completely shielded from your app.
[05:45.240 --> 05:50.760]  Like you, you, you see the results presented in your application, but, um, malicious code
[05:50.760 --> 05:51.760]  can't.
[05:51.760 --> 05:52.760]  Right.
[05:52.760 --> 05:55.560]  The actual, yeah, the actual rendering process is a separate process.
[05:55.560 --> 05:58.480]  It's not just like a, a plugin or whatever.
[05:58.480 --> 05:59.480]  Yeah.
[05:59.480 --> 06:00.480]  Same thing with the keyboards.
[06:00.480 --> 06:02.720]  So it is, it's, you're right.
[06:02.720 --> 06:07.280]  That's the, the big story is XPC.
[06:07.280 --> 06:12.160]  So one of the things I was saying maybe last week was, um, I think everybody's going to
[06:12.160 --> 06:16.480]  be talking about Swift a lot, but the, the big story is basically the extensions and
[06:16.480 --> 06:23.360]  XPC and what that allows it to, you know, to happen now and in the future.
[06:23.360 --> 06:28.840]  Uh, and it's, you know, a very Apple like way of doing it.
[06:28.840 --> 06:34.800]  I mean, we repeat ourselves frequently where, where, you know, so many times there's, you
[06:34.800 --> 06:38.260]  know, here's what we want Apple, please let us do this.
[06:38.260 --> 06:42.520]  And then they listen to it and they think about the actual problem and then they solve
[06:42.520 --> 06:47.120]  it in a way that we didn't expect right where everybody I think really was saying, what
[06:47.120 --> 06:52.960]  we want is we want that super fast, uh, JavaScript engine.
[06:52.960 --> 06:58.600]  And Apple didn't give it to us because, or let third parties use it because of the security
[06:58.600 --> 06:59.600]  issues.
[06:59.600 --> 07:05.400]  Um, but they figured out a way to give it to us without having it running in the process.
[07:05.400 --> 07:06.720]  Same thing with keyboards.
[07:06.720 --> 07:07.720]  Yeah.
[07:07.720 --> 07:14.000]  Um, it's, you know, it's at a measure twice, cut once kind of philosophy where I think
[07:14.000 --> 07:17.160]  they look at the actual problem to be solved and try to come up with a solution for it
[07:17.160 --> 07:20.320]  rather than sort of cave to like, well, okay, fine.
[07:20.320 --> 07:22.840]  We'll let you run some JavaScript in your app.
[07:22.840 --> 07:26.240]  There were, there were rumors two years ago, a year ago, man, I think it might've been
[07:26.240 --> 07:29.320]  last year, but it was previous WWDC and there were rumors.
[07:29.320 --> 07:33.480]  Somebody had reported that there were going to be third party keyboards announced and
[07:33.480 --> 07:36.200]  it came and went and they weren't announced.
[07:36.200 --> 07:41.320]  Um, and you know, I spoke to somebody from Apple, you know, a friend in a position to
[07:41.320 --> 07:47.120]  know and um, and they were like, no, it wasn't definitely wasn't going to happen that year.
[07:47.120 --> 07:53.200]  But, but that they had looked at it extensively, you know, like they knew an awful lot about
[07:53.200 --> 07:59.040]  how it worked on Android and, and you know, this person was like, you wouldn't believe
[07:59.040 --> 08:00.360]  how it works on Android.
[08:00.360 --> 08:05.480]  Like it's more or less just a remote key logger and you know, some of them, you know, send
[08:05.480 --> 08:09.960]  every single key you press up to a server because they're doing, you know, server side
[08:09.960 --> 08:13.480]  stuff, you know, and that there's nothing you can do as a user to stop it.
[08:13.480 --> 08:18.600]  You install this thing from the play store and everything you type could be being sent
[08:18.600 --> 08:23.840]  to a server and that's bananas and in some cases is not necessarily that it is that they're,
[08:23.840 --> 08:28.760]  that they're doing anything malicious with it, but that they're doing it for, um, you
[08:28.760 --> 08:32.800]  know, QA or for some kind of server side stuff for whatever reason.
[08:32.800 --> 08:33.800]  Yeah.
[08:33.800 --> 08:34.920]  You don't even need to believe that they're bad actors.
[08:34.920 --> 08:41.320]  It's that the fact that the system can be exploited is just, it's, it's just bad design.
[08:41.320 --> 08:42.320]  Right.
[08:42.320 --> 08:45.120]  And they were like, I mean, you know, you know, we're looking at it, but I mean, there's
[08:45.120 --> 08:48.240]  no way we're going to do it if it, you know, if it works like that.
[08:48.240 --> 08:49.240]  Right.
[08:49.240 --> 08:55.200]  So, um, so the custom keyboards, uh, you guess what you can't do, you can't use them to type
[08:55.200 --> 08:56.720]  into a secure text field.
[08:56.720 --> 08:58.120]  Ooh, interesting.
[08:58.120 --> 08:59.120]  Yep.
[08:59.120 --> 09:02.160]  Because when you think about it, that just makes sense.
[09:02.160 --> 09:03.160]  Yeah.
[09:03.160 --> 09:09.880]  When you tap into a secure text field, either, uh, like UI kit style or on the web, uh, you
[09:09.880 --> 09:12.040]  get switched to one of the system keyboards.
[09:12.040 --> 09:13.040]  Hmm.
[09:13.040 --> 09:14.040]  Hmm.
[09:14.040 --> 09:15.040]  I understand that.
[09:15.040 --> 09:19.880]  But then I guess that defeats one of the ideas that a bunch of us, like last week, we're
[09:19.880 --> 09:26.440]  bandying about that it would be a cool idea for one password to have a custom keyboard.
[09:26.440 --> 09:28.040]  I guess that rules that out for them.
[09:28.040 --> 09:32.840]  I mean, they still have a cool app for iOS, but I, we were, you know, just bouncing ideas.
[09:32.840 --> 09:33.840]  We had the idea.
[09:33.840 --> 09:34.840]  Well, what if they made a keyboard?
[09:34.840 --> 09:35.840]  Yeah.
[09:35.840 --> 09:40.800]  I'm sure they'll come up with some way of making it nice and cause you can't have the
[09:40.800 --> 09:41.800]  keyboard.
[09:41.800 --> 09:44.600]  So up until you put the password in, you can have your custom keyboard.
[09:44.600 --> 09:51.320]  So maybe you can see what site you're on and just copy the copy, uh, the password to the,
[09:51.320 --> 09:52.320]  to the passport.
[09:52.320 --> 09:53.320]  So you can paste it in.
[09:53.320 --> 09:54.320]  Yeah.
[09:54.320 --> 09:55.320]  Something like them, you know what I mean?
[09:55.320 --> 09:56.320]  They can do something.
[09:56.320 --> 10:00.720]  But when you do think about it, it's like, well, yeah, it kind of makes sense to only
[10:00.720 --> 10:04.960]  trust the system to handle those kinds of events.
[10:04.960 --> 10:05.960]  Right.
[10:05.960 --> 10:06.960]  Yeah.
[10:06.960 --> 10:07.960]  Secure entry.
[10:07.960 --> 10:08.960]  Yeah, I think so.
[10:08.960 --> 10:10.960]  I think it kind of does.
[10:10.960 --> 10:12.280]  Um, what else?
[10:12.280 --> 10:13.280]  What was the other kind?
[10:13.280 --> 10:16.680]  There's the keyboards, there's the sharing extensions.
[10:16.680 --> 10:20.520]  Um, there's this stuff in the today's screen.
[10:20.520 --> 10:21.760]  Oh, right.
[10:21.760 --> 10:22.760]  Yeah.
[10:22.760 --> 10:26.880]  And that's the same thing where those are like, they're, they're little more or less
[10:26.880 --> 10:32.440]  little standalone applications that run in a different context instead of running as
[10:32.440 --> 10:35.000]  regular apps in the system.
[10:35.000 --> 10:40.600]  They're like little mini apps that run right in that, in that notification center context.
[10:40.600 --> 10:41.600]  Yeah.
[10:41.600 --> 10:43.640]  And it's far more than less.
[10:43.640 --> 10:48.680]  It's, um, so what they are is like little bundles that sit inside your app bundle.
[10:48.680 --> 10:56.040]  And uh, I don't want to get too techie, but, um, inside an app you usually specify the
[10:56.040 --> 11:00.880]  principal class, like the class, the objective C class is going to be loaded and run.
[11:00.880 --> 11:07.720]  And it's, um, it's a UI application class on iOS or a subclass of it.
[11:07.720 --> 11:15.800]  Um, for these bundles, rather than, um, having the, you know, rather than it being an application
[11:15.800 --> 11:20.560]  that is sort of the root object, um, it's just a view controller.
[11:20.560 --> 11:26.680]  So these are little apps that just load up rather than booting up an entire application
[11:26.680 --> 11:27.680]  instance.
[11:27.680 --> 11:31.280]  They, they just load up a, like a view controller instance.
[11:31.280 --> 11:34.080]  And from there on in, you're running in your own code space.
[11:34.080 --> 11:39.920]  You've got pretty much all of the facilities that you would have, uh, in, in a regular
[11:39.920 --> 11:43.000]  app modulo some differences.
[11:43.000 --> 11:50.160]  Um, and it's, it's, you know, that the space that you're given is yours to play with.
[11:50.160 --> 11:53.200]  It's you have an app and you can do whatever you want in it.
[11:53.200 --> 11:57.480]  Uh, it's not like you're just pushing some XML description language stuff to the, to
[11:57.480 --> 11:59.840]  the screen and the system's doing it.
[11:59.840 --> 12:03.200]  It's a, like an honest to God full on application.
[12:03.200 --> 12:05.360]  Yeah, that's kind of amazing.
[12:05.360 --> 12:14.020]  And it's, uh, again, sort of a, like a recurring theme is it's that they've given us more than
[12:14.020 --> 12:15.480]  we expected.
[12:15.480 --> 12:18.360]  I would not in a million years have expected that.
[12:18.360 --> 12:19.360]  No.
[12:19.360 --> 12:25.480]  Uh, the API's are interesting too, because when you, um, when you start up one of these
[12:25.480 --> 12:29.840]  extensions, uh, it tells you what size you're going to be.
[12:29.840 --> 12:35.160]  And uh, they make no promises about, uh, you know, aspect ratio or anything.
[12:35.160 --> 12:37.360]  They're just going to give you a size.
[12:37.360 --> 12:41.840]  So in theory, down the road, they could be putting these, I don't know, like on the iPad,
[12:41.840 --> 12:45.680]  they could make them huge or they could do different stuff.
[12:45.680 --> 12:46.920]  Are they the same?
[12:46.920 --> 12:50.360]  Are the notification, I, this is something I don't know, it's still on my like list.
[12:50.360 --> 12:57.520]  I haven't watched the notification center sessions yet, but, um, it, are they the same
[12:57.520 --> 13:05.260]  for Mac and iOS or you, they're very similar, very similar, but it, you know, but you wouldn't,
[13:05.260 --> 13:11.460]  because you don't have fat apps that one dot app bundle that runs on both Mac and iOS,
[13:11.460 --> 13:15.860]  it doesn't really matter if they're exactly the same, but they're a lot more similar than
[13:15.860 --> 13:21.080]  say, um, a Mac app and an iOS app are.
[13:21.080 --> 13:22.080]  Oh yeah.
[13:22.080 --> 13:23.080]  Yeah.
[13:23.080 --> 13:25.400]  Well, I mean, ultimately you still got to do that.
[13:25.400 --> 13:26.960]  You're doing UI code at some point, right?
[13:26.960 --> 13:32.600]  So that that's divergent, but the structure and the idea and the notion is, is basically
[13:32.600 --> 13:33.600]  identical.
[13:33.600 --> 13:40.160]  They, these things were not developed, um, in the old fiefdom system of like, here's
[13:40.160 --> 13:44.760]  OS X and here's iOS and maybe once every few years, we'll try to sync some stuff up.
[13:44.760 --> 13:48.660]  These were clearly done, uh, together as one.
[13:48.660 --> 13:52.320]  And in fact, the core technology is from the core OS group.
[13:52.320 --> 13:59.800]  Um, so I think, you know, core OS had to drove the, um, the XPC and the, the, that kind of
[13:59.800 --> 14:00.920]  side of stuff.
[14:00.920 --> 14:05.360]  And then the various framework groups built, built on top of that, but you know, I think
[14:05.360 --> 14:08.640]  we're going to end up overusing this word, but clearly there's a lot of collaboration
[14:08.640 --> 14:09.640]  going on there.
[14:09.640 --> 14:10.640]  Yeah.
[14:10.640 --> 14:17.680]  That's sort of the keyword that like the central part of the post WWDC essay that I published
[14:17.680 --> 14:21.480]  today while recording today on Friday, I don't know when the show is going to air, but, but
[14:21.480 --> 14:26.240]  that collaboration press release from, from October, 2012, when they announced the sort
[14:26.240 --> 14:30.920]  of reorganization and that, that forestall was gone and Federighi was taking overall
[14:30.920 --> 14:33.600]  engineering and Johnny I've all design.
[14:33.600 --> 14:40.340]  Um, I were clearly seeing that that was not just an empty, you know, let's put a positive
[14:40.340 --> 14:44.860]  spin on an ugly infighting that's been put to an end.
[14:44.860 --> 14:46.560]  It was an actual statement of intent.
[14:46.560 --> 14:47.560]  Yeah.
[14:47.560 --> 14:48.560]  You know, it's funny.
[14:48.560 --> 14:52.560]  You actually, you, you often make that argument that Apple just says what they're like when
[14:52.560 --> 14:55.320]  they do say something, they just say it straight.
[14:55.320 --> 14:56.320]  Yeah.
[14:56.320 --> 15:02.960]  Uh, but, but even that one, like that, that memo or that, that press release, you know,
[15:02.960 --> 15:07.280]  people were kind of second guessing, wondering if they, if exactly what they meant, but no,
[15:07.280 --> 15:08.680]  turns out that's what they meant.
[15:08.680 --> 15:13.480]  They wanted to increase collaboration and here you go, here's the results of that.
[15:13.480 --> 15:15.760]  Um, it's fascinating.
[15:15.760 --> 15:16.760]  And they've done a terrific job.
[15:16.760 --> 15:17.760]  Right.
[15:17.760 --> 15:19.520]  I think it's a trust, but verify situation.
[15:19.520 --> 15:23.360]  I'm not putting it past them that someday they'll, they'll find themselves in some sort
[15:23.360 --> 15:31.800]  of hole where they have to lie or, you know, you know, white lie or whatever you want to
[15:31.800 --> 15:36.160]  say, just put a spin on something and that what they put out is a misdirection.
[15:36.160 --> 15:40.120]  I think you could certainly say that they did that with a lot of the things that they
[15:40.120 --> 15:43.600]  had to say about Steve Jobs's health in the last few years.
[15:43.600 --> 15:44.600]  Right.
[15:44.600 --> 15:47.680]  That that was not straightforward and it's an exceptional situation.
[15:47.680 --> 15:53.600]  It was obviously up to Steve and Apple PR had to more or less play along, you know,
[15:53.600 --> 15:58.480]  so there's a good example of, of, you know, some press releases or, or official statements
[15:58.480 --> 16:00.240]  from Apple that were not straightforward.
[16:00.240 --> 16:01.880]  I also think that's kind of fair enough.
[16:01.880 --> 16:03.880]  It's a little bit salacious to be digging into it.
[16:03.880 --> 16:04.880]  Right.
[16:04.880 --> 16:09.000]  It's very personal, you know, and I, you know, maybe one more and maybe one that wasn't quite
[16:09.000 --> 16:13.100]  so personal, but that was an ugly situation that comes to mind was the, um, the stock
[16:13.100 --> 16:14.100]  options backdating.
[16:14.100 --> 16:16.520]  Now that's going back, I think like a decade.
[16:16.520 --> 16:21.400]  I mean, you're talking about 2005, but that they skated very close, you know, maybe went
[16:21.400 --> 16:26.160]  over a line and, and you know, we're in a situation where they couldn't be straight
[16:26.160 --> 16:27.160]  forward.
[16:27.160 --> 16:28.160]  Yeah.
[16:28.160 --> 16:29.160]  That seemed to be like dirty pool for sure.
[16:29.160 --> 16:30.400]  But an awful lot of the time.
[16:30.400 --> 16:31.400]  Yeah.
[16:31.400 --> 16:35.240]  I think it proves that they're actually pretty straightforward.
[16:35.240 --> 16:38.960]  And I think that it's showing that that's clearly the case.
[16:38.960 --> 16:44.400]  And that collaboration, you know, like you said, that it's a core, you know, core OS
[16:44.400 --> 16:46.400]  effort.
[16:46.400 --> 16:47.840]  It's it's at the framework level.
[16:47.840 --> 16:52.840]  It's not about iOS, you know, iOS and Mac OS 10 haven't really gotten any closer to
[16:52.840 --> 16:53.840]  each other.
[16:53.840 --> 16:58.000]  You know, they're not, they're too, from a user perspective, from an interface perspective,
[16:58.000 --> 17:01.720]  there's no still no touch on the Mac.
[17:01.720 --> 17:06.540]  You know, changing the system fonts to match each other is Helvetica NUIA is not sure,
[17:06.540 --> 17:09.920]  you know, that's cosmetic, it's not technical.
[17:09.920 --> 17:15.320]  But the frameworks have, they've really done a massive job of getting as many of the frameworks
[17:15.320 --> 17:18.880]  that that could be shared between them to be shared between them.
[17:18.880 --> 17:19.880]  Yeah.
[17:19.880 --> 17:26.000]  Especially, you know, anything that doesn't touch the UI is pretty much equivalent on
[17:26.000 --> 17:27.360]  either of the platforms.
[17:27.360 --> 17:30.640]  You know, with this, you know, caveats here and there.
[17:30.640 --> 17:35.560]  But you know, like AV foundation, all of it, the video playback stuff, certainly a lot
[17:35.560 --> 17:38.560]  of the core stuff, you know, foundation itself.
[17:38.560 --> 17:41.920]  Yeah, AV foundation is probably the first one I can remember.
[17:41.920 --> 17:46.760]  Boy, it was a long, it was a couple years ago, definitely, maybe two years ago, I forget
[17:46.760 --> 17:50.040]  was when it first came out, maybe it was three years ago.
[17:50.040 --> 17:53.680]  That's the first one that might have been a sign of things to come, even though you
[17:53.680 --> 17:58.760]  know, it was before this, you know, the October 2012 reorganization, but AV foundation was
[17:58.760 --> 18:01.800]  one I can remember where they were in the session, you know, I was in the session, and
[18:01.800 --> 18:06.080]  it was clearly a unification between Mac and iOS.
[18:06.080 --> 18:12.280]  Not only that, it stopped on QuickTime, right, which was kind of unimaginable, you know,
[18:12.280 --> 18:17.220]  a number of years ago, yeah, QuickTime being a crown jewel of the company, right?
[18:17.220 --> 18:21.200]  I think they learned from it, it wasn't like that they, you know, threw it in the garbage,
[18:21.200 --> 18:24.920]  but that they more or less said, you know, you've got to start over.
[18:24.920 --> 18:27.920]  Yeah, QuickTime was what, 89 kind of thing?
[18:27.920 --> 18:32.360]  Like, I think it was like 91, but close, it was probably they probably started work on
[18:32.360 --> 18:34.040]  it in 89 or 90.
[18:34.040 --> 18:42.320]  And I remember running literally, like posted stamp size movies on my Mac LC and being amazed.
[18:42.320 --> 18:45.040]  Yeah, I think this is the best thing ever.
[18:45.040 --> 18:50.320]  I think like a very, they were like, what we would now use is like animated GIFs that
[18:50.320 --> 18:51.640]  fit on a line of text.
[18:51.640 --> 18:55.120]  They were maybe like, I don't know, 80 pixels by like 120 or something.
[18:55.120 --> 18:57.280]  But it would peg your CPU too.
[18:57.280 --> 18:58.280]  Oh, absolutely.
[18:58.280 --> 18:59.280]  Yeah.
[18:59.280 --> 19:00.280]  And drop frames.
[19:00.280 --> 19:01.280]  Yeah.
[19:01.280 --> 19:04.280]  You know, you'd get like, you know, 12 frames per second or something.
[19:04.280 --> 19:05.280]  256 colors.
[19:05.280 --> 19:06.280]  Yeah.
[19:06.280 --> 19:09.240]  But you'd have, you know, you'd have a video playing on your computer.
[19:09.240 --> 19:10.240]  It was amazing.
[19:10.240 --> 19:11.240]  Which was pretty cool.
[19:11.240 --> 19:17.560]  Actually, wait, did Macs do 256 colors with a color palette or did they just go 16 bit?
[19:17.560 --> 19:22.080]  No, mine had 256 colors, you had to have a better video card.
[19:22.080 --> 19:26.240]  And then they went to that they used to call it thousands of colors.
[19:26.240 --> 19:27.240]  That's it.
[19:27.240 --> 19:28.240]  Yeah.
[19:28.240 --> 19:29.920]  They had a mode, which was, I think, what would it have been?
[19:29.920 --> 19:33.320]  It would have been like 16,000 colors.
[19:33.320 --> 19:34.800]  65536.
[19:34.800 --> 19:37.720]  Yeah, exactly.
[19:37.720 --> 19:41.160]  But instead of giving you that number, they just called it it was very Apple.
[19:41.160 --> 19:42.720]  They just called it thousands.
[19:42.720 --> 19:43.720]  Yeah.
[19:43.720 --> 19:47.560]  And that was what that was, you know, if you had a good, good video card.
[19:47.560 --> 19:50.200]  I'm trying to picture a Mac with a 256 bit color palette.
[19:50.200 --> 19:53.120]  How did that work with different applications?
[19:53.120 --> 19:56.400]  Man, I wish SirQsa were here.
[19:56.400 --> 19:59.760]  I remember it because I had it for years and years.
[19:59.760 --> 20:07.180]  There was a standard system palette of 256 colors, but an app could change that.
[20:07.180 --> 20:15.360]  And it was a certain resedit resource type where you would, you would more or less just
[20:15.360 --> 20:20.440]  give it give the system a two, here's the 256 colors I want.
[20:20.440 --> 20:21.440]  Yeah.
[20:21.440 --> 20:22.740]  In RGB.
[20:22.740 --> 20:28.920]  So like, for example, I remember I had like, it wasn't called PGA golf, I forget, but I
[20:28.920 --> 20:34.280]  had a golf video game that I was totally addicted to in college.
[20:34.280 --> 20:37.480]  And I remember looking, it was like a clot, I think it was a CLUT resource.
[20:37.480 --> 20:40.320]  I forget what that's called a lookup table.
[20:40.320 --> 20:41.320]  Yeah, that's it.
[20:41.320 --> 20:42.320]  That's it.
[20:42.320 --> 20:43.320]  It was a clot resource.
[20:43.320 --> 20:45.440]  And I remember being curious one time, and I looked at it.
[20:45.440 --> 20:50.000]  And they, of course, they had like out of 256 colors that had like, I don't know, 180
[20:50.000 --> 20:59.640]  shades of green, and a couple of pink, so you could wear like obnoxious golf shirts.
[20:59.640 --> 21:05.280]  But then you'd see like some weird flashing if you switch between two apps like that.
[21:05.280 --> 21:07.960]  Okay, yeah, that's what it is.
[21:07.960 --> 21:08.960]  That's what I was curious about.
[21:08.960 --> 21:13.720]  Because in the background, the other app, there's one palette for the entire screen.
[21:13.720 --> 21:16.600]  So if you've gotten one image that with a nice palette, like the other one is just gonna
[21:16.600 --> 21:17.600]  look like garbage.
[21:17.600 --> 21:18.600]  Yeah.
[21:18.600 --> 21:20.640]  And so I seem to recall mostly it was for games, though.
[21:20.640 --> 21:22.400]  So you wouldn't notice, right?
[21:22.400 --> 21:23.800]  Most apps wouldn't switch it.
[21:23.800 --> 21:28.040]  And I guess if you were looking at like an image editor or something with, you know,
[21:28.040 --> 21:32.600]  in a regular not full screen mode, you know, with with windows overlapping, it would make
[21:32.600 --> 21:36.720]  windows in the background from other apps look, you know, all sorts of goofy.
[21:36.720 --> 21:37.720]  Yeah.
[21:37.720 --> 21:40.720]  But goofy was sort of the name of the game back in those days.
[21:40.720 --> 21:45.840]  Yeah, it somehow didn't really strike strike me as all that, you know, it seemed it seemed
[21:45.840 --> 21:46.840]  understandable.
[21:46.840 --> 21:47.840]  It was gross.
[21:47.840 --> 21:51.540]  But it was like, well, of course, because there's only 256 colors.
[21:51.540 --> 21:54.160]  And sometimes you need more than eight shades of green.
[21:54.160 --> 21:55.160]  Exactly.
[21:55.160 --> 21:56.160]  For golf.
[21:56.160 --> 21:58.160]  Um, okay, memory lane.
[21:58.160 --> 22:03.360]  Where are we talking about the iOS extensions?
[22:03.360 --> 22:04.360]  Right?
[22:04.360 --> 22:05.360]  Yeah.
[22:05.360 --> 22:07.960]  Well, let me take a break, because I have a couple sponsors to thank.
[22:07.960 --> 22:12.080]  And let me thank our first sponsor, our good friends at hover.
[22:12.080 --> 22:15.080]  Do you ever hear of hover?
[22:15.080 --> 22:16.080]  I have.
[22:16.080 --> 22:17.080]  Yeah.
[22:17.080 --> 22:18.080]  Good people.
[22:18.080 --> 22:19.960]  Yeah, really good people.
[22:19.960 --> 22:20.960]  So you have a great idea.
[22:20.960 --> 22:21.960]  You have a great idea.
[22:21.960 --> 22:24.040]  You want to secure a domain name for your great idea.
[22:24.040 --> 22:28.240]  So you want something catchy and memorable to represent your online identity.
[22:28.240 --> 22:31.500]  Hover gives you exactly what you need to get the job done.
[22:31.500 --> 22:35.600]  You can find the perfect domain for your idea and get started working on it rather than
[22:35.600 --> 22:38.640]  wasting time looking for a cool domain name.
[22:38.640 --> 22:40.520]  But it's more than just finding a good domain name.
[22:40.520 --> 22:43.060]  The big advantage to hover is what happens afterwards.
[22:43.060 --> 22:49.000]  Because it's not like every other domain registrar I've ever seen where it's full of spam and
[22:49.000 --> 22:55.080]  junk and upsells and gross ads and stuff like that.
[22:55.080 --> 22:58.520]  Hover, all they want is your business.
[22:58.520 --> 22:59.680]  You pay them.
[22:59.680 --> 23:02.220]  They give you a domain name and great service.
[23:02.220 --> 23:03.220]  And that's it.
[23:03.220 --> 23:05.600]  No upselling, no ads, no junk.
[23:05.600 --> 23:11.740]  Geeks, developers, designers, programmers have been using hover for years and love it.
[23:11.740 --> 23:13.720]  You don't have to be an expert to get a domain.
[23:13.720 --> 23:17.840]  If you've never registered a domain name before, you'll love hover too.
[23:17.840 --> 23:18.840]  Really easy.
[23:18.840 --> 23:20.160]  They give you an ENS expert.
[23:20.160 --> 23:24.080]  They give you easy to use powerful tools to manage your domain once you have it so that
[23:24.080 --> 23:26.200]  anyone can do it.
[23:26.200 --> 23:28.200]  They have good technical support.
[23:28.200 --> 23:30.680]  Great technical support really.
[23:30.680 --> 23:32.400]  And here's the best part.
[23:32.400 --> 23:33.400]  Let's say you're the opposite.
[23:33.400 --> 23:36.080]  And I think the listenership of this show, let's face it, there's probably not a lot
[23:36.080 --> 23:38.040]  of you out there who've never registered a domain.
[23:38.040 --> 23:42.720]  You're probably more like me and you've got like 20, 30, 40 domains that you've never
[23:42.720 --> 23:45.200]  even used.
[23:45.200 --> 23:48.120]  But you want to keep them because they're good domain names that you might use in the
[23:48.120 --> 23:49.120]  store.
[23:49.120 --> 23:51.800]  Here's the thing that hover has that's great.
[23:51.800 --> 23:57.360]  You've registered them with other hostings or registration services that stink and you
[23:57.360 --> 23:58.800]  kind of hate them.
[23:58.800 --> 24:03.640]  Hover will help you move those domains to hover and get out and stop.
[24:03.640 --> 24:06.920]  Stop doing business with, with registrar's who you feel gross about.
[24:06.920 --> 24:07.920]  Hover will help you.
[24:07.920 --> 24:09.000]  They've got this great service.
[24:09.000 --> 24:11.080]  They do all the work for you.
[24:11.080 --> 24:13.960]  Really, really impressive stuff.
[24:13.960 --> 24:17.320]  Really the bottom line, it just sounds goofy because you'd think, well, why wouldn't they
[24:17.320 --> 24:18.320]  be honest?
[24:18.320 --> 24:19.320]  But that's the thing.
[24:19.320 --> 24:25.320]  Hover is honest and it's the truth is red domain registration is a dishonest dirty business.
[24:25.320 --> 24:29.360]  Hover is the, is the, the, the good guy in the business.
[24:29.360 --> 24:31.780]  Where do you go to find out more easy?
[24:31.780 --> 24:32.780]  Go to hover.com.
[24:32.780 --> 24:35.560]  Now they gave me a promo code.
[24:35.560 --> 24:36.560]  This is great.
[24:36.560 --> 24:43.760]  Jeter J E T E R. I'll explain that to you in a minute guy, but use that code.
[24:43.760 --> 24:49.240]  They'll know you came from this show, uh, the talk show and you'll get 10% off your
[24:49.240 --> 24:52.320]  first purchase just by typing in that promo code.
[24:52.320 --> 24:54.080]  So go to hover.com.
[24:54.080 --> 24:57.360]  They've got all the new TLDs, everything you could want.
[24:57.360 --> 25:04.240]  Hover.com use the promo code Jeter, uh, and find out more by, I can't recommend these
[25:04.240 --> 25:05.640]  guys highly enough.
[25:05.640 --> 25:09.040]  So Jeter is a baseball player, Derek Jeter.
[25:09.040 --> 25:10.040]  Yeah.
[25:10.040 --> 25:11.040]  Yeah.
[25:11.040 --> 25:13.720]  So I hear he's a place for the vet socks, isn't it?
[25:13.720 --> 25:18.520]  Uh, well, he's in Brazil right now playing, uh, in the world cup.
[25:18.520 --> 25:19.520]  Nice.
[25:19.520 --> 25:26.440]  You know, I saw, I saw a thing we, I, we have so much tech stuff to talk about, but I know
[25:26.440 --> 25:30.040]  you're a fan of the football, um, kotke link to a cool thing.
[25:30.040 --> 25:33.600]  The New York times had showing the history of the world cup soccer balls.
[25:33.600 --> 25:35.040]  I was just looking at it.
[25:35.040 --> 25:36.040]  It's great.
[25:36.040 --> 25:37.040]  Oh my God.
[25:37.040 --> 25:38.040]  It's so great.
[25:38.040 --> 25:39.040]  I got to link that up.
[25:39.040 --> 25:41.280]  Uh, the first, the first one looks like a medicine bowl.
[25:41.280 --> 25:46.560]  It looks like a misshapen American football, you know, that somebody took a U S football
[25:46.560 --> 25:50.480]  and just pumped it up until it went right on.
[25:50.480 --> 25:52.200]  Like it's, it's crazy.
[25:52.200 --> 25:58.200]  Uh, I, I guess I, cause I've never, I mean, I'm, you know, a sports fan, but I'm not a
[25:58.200 --> 25:59.760]  soccer fan.
[25:59.760 --> 26:07.520]  Um, I had always assumed that the soccer balls that from like the seventies, that iconic
[26:07.520 --> 26:15.040]  black and white sort of checkered pattern, octagonal checkered pattern.
[26:15.040 --> 26:19.220]  That was the way they always looked, but it wasn't, it was really just like a brief period
[26:19.220 --> 26:20.920]  in our youth when they looked like that.
[26:20.920 --> 26:21.920]  Yeah.
[26:21.920 --> 26:24.840]  But to me, I, you know, basically the same age.
[26:24.840 --> 26:25.840]  Yes.
[26:25.840 --> 26:29.640]  That exact look, that seventies checkered look, that's soccer to me.
[26:29.640 --> 26:31.480]  Do you like these new soccer balls?
[26:31.480 --> 26:32.480]  I don't.
[26:32.480 --> 26:35.000]  I think that they're, they're messing around with them too much.
[26:35.000 --> 26:36.000]  I totally agree.
[26:36.000 --> 26:39.240]  No, I think that they're kind of crappy actually.
[26:39.240 --> 26:40.240]  I don't know.
[26:40.240 --> 26:45.120]  Maybe I'm just a traditionalist or something, but I, uh, you know, they got to be black
[26:45.120 --> 26:48.040]  and white and they need to have some kind of checkered pattern on them.
[26:48.040 --> 26:49.440]  That's all I care about.
[26:49.440 --> 26:50.440]  Yeah.
[26:50.440 --> 26:54.080]  They could, even if they want to use these, these fewer panels, they could somehow put
[26:54.080 --> 26:55.660]  the checkered pattern on.
[26:55.660 --> 26:58.180]  But even then, no, I kind of don't like the way they keep messing with it.
[26:58.180 --> 27:01.600]  Like it's, it seems contrary to tradition.
[27:01.600 --> 27:02.600]  Yeah.
[27:02.600 --> 27:04.600]  And soccer is a lot about tradition.
[27:04.600 --> 27:08.160]  Like if you did some, the same thing with baseball, it would, the baseball would look
[27:08.160 --> 27:09.160]  exactly the same.
[27:09.160 --> 27:14.760]  Like here it is 10 year, you know, 1920s looks like a baseball, 1930s looks like a baseball.
[27:14.760 --> 27:15.760]  Yeah.
[27:15.760 --> 27:20.040]  And there's always been rumors in major league baseball that in certain decades that, that,
[27:20.040 --> 27:26.460]  that there's a secretiveness to what's in the center of a baseball, which I've never
[27:26.460 --> 27:30.040]  really bought into because you know, you don't have to be a baseball fan to know that, you
[27:30.040 --> 27:32.720]  know, home runs and foul balls go into the stands all the time.
[27:32.720 --> 27:40.360]  Like it's not every game, some couple of dozen fans go home with a real major league baseball.
[27:40.360 --> 27:43.060]  So it's there to be cut open and, and looked at.
[27:43.060 --> 27:48.000]  But there's always been rumors like when, when home runs go up or down, there's always
[27:48.000 --> 27:52.000]  conspiracies that they've changed the rubber in the middle of the ball, you know, that
[27:52.000 --> 27:55.920]  the commissioner is, has decided we need more home runs and they've doctored the balls to
[27:55.920 --> 27:58.680]  make them easier to hit further, et cetera, et cetera.
[27:58.680 --> 28:02.640]  I think doctoring the players is, yeah, it was a lot more.
[28:02.640 --> 28:05.920]  Um, and there was, but you have to go back a hundred years for this.
[28:05.920 --> 28:11.000]  There was something called the dead ball era where, where the baseballs were harder to
[28:11.000 --> 28:12.000]  hit further.
[28:12.000 --> 28:16.840]  Um, what, like, because they would construct a different, yeah, they were just, I don't
[28:16.840 --> 28:20.840]  know what the technical, I don't know what the actual technical difference was, but this
[28:20.840 --> 28:22.320]  wasn't like a secret conspiracy.
[28:22.320 --> 28:28.120]  This was, you know, it's just a stated fact, you know, and, and then, uh, they, you know,
[28:28.120 --> 28:29.120]  there's like pre babe Ruth.
[28:29.120 --> 28:33.640]  I mean, so you're really talking like almost a hundred years ago, but it wouldn't be like
[28:33.640 --> 28:34.640]  that.
[28:34.640 --> 28:35.640]  Same thing for basketball.
[28:35.640 --> 28:40.320]  Like I think you could go back to like 1950 and a bat, you know, a basketball looks like
[28:40.320 --> 28:41.320]  a basketball.
[28:41.320 --> 28:43.320]  Yeah, I'd imagine so.
[28:43.320 --> 28:45.320]  I don't get it with soccer.
[28:45.320 --> 28:48.120]  I can't, I can't.
[28:48.120 --> 28:51.080]  Well, European fashionistas, right?
[28:51.080 --> 28:53.720]  Yeah, I guess so.
[28:53.720 --> 28:54.720]  I guess so.
[28:54.720 --> 28:55.720]  I dunno.
[28:55.720 --> 28:57.120]  There's so much money in soccer though.
[28:57.120 --> 28:58.120]  It's crazy.
[28:58.120 --> 28:59.120]  Yeah.
[28:59.120 --> 29:00.120]  I wonder if that's it.
[29:00.120 --> 29:04.120]  If they, you know, if they, if they make a lot of money by selling like these updated
[29:04.120 --> 29:07.720]  soccer balls, cause you know, but I, I would think so, you know, like any sport that the
[29:07.720 --> 29:11.880]  balls wear out anyway and that there's always going to be, you know, anybody who plays on
[29:11.880 --> 29:15.460]  a regular basis has to buy balls on a regular basis and it doesn't matter if they change
[29:15.460 --> 29:17.360]  the design, you're still buying the ball.
[29:17.360 --> 29:18.360]  Yeah.
[29:18.360 --> 29:23.960]  But getting a new design for the, for the world cup, it could spike up a thing.
[29:23.960 --> 29:24.960]  Yeah.
[29:24.960 --> 29:29.360]  And I guess what it does is it makes everybody want to get the official Adidas ball that
[29:29.360 --> 29:34.120]  it's more, it's, it's, you know, it's, whereas like in basketball, there's three, four, five
[29:34.120 --> 29:38.800]  major manufacturers of basketballs and they all make the same fundamental ball.
[29:38.800 --> 29:41.800]  But are they used interchangeably during the game?
[29:41.800 --> 29:42.800]  Uh, no.
[29:42.800 --> 29:45.680]  Each league usually at least is at a serious level.
[29:45.680 --> 29:50.920]  Once you get to like serious college basketball or, um, certainly in a professional level,
[29:50.920 --> 29:54.780]  it's, there's, somebody has a licensing deal in it, you know, and for fairness sake, there's
[29:54.780 --> 30:00.680]  one manufacturer, but like, you know, Spalding has long made the NBA's balls.
[30:00.680 --> 30:06.760]  Um, but very few of the college teams use a Spalding balls, they use, you know, Wilson
[30:06.760 --> 30:07.760]  and other brands.
[30:07.760 --> 30:08.760]  I don't know why that is.
[30:08.760 --> 30:19.520]  I guess it's, you know, whatever, like marketing deals, pay all the, uh, extension, we could
[30:19.520 --> 30:23.480]  talk about goofy stuff for ever, um, get a job to do.
[30:23.480 --> 30:24.480]  Yeah.
[30:24.480 --> 30:25.480]  Yeah.
[30:25.480 --> 30:26.480]  Where do we get to?
[30:26.480 --> 30:27.480]  Extensions.
[30:27.480 --> 30:28.480]  Good.
[30:28.480 --> 30:32.040]  Uh, I think maybe you linked to a piece by Sean Heber.
[30:32.040 --> 30:33.040]  Yeah.
[30:33.040 --> 30:34.040]  Yeah.
[30:34.040 --> 30:35.040]  Interesting.
[30:35.040 --> 30:36.040]  Yeah.
[30:36.040 --> 30:42.280]  Cause it's, you know, it's this, uh, I guess a lot of people, Sean Heber had a piece where
[30:42.280 --> 30:48.280]  he sort of speculated, um, he works, he does all the work for a Hockenberry, you know,
[30:48.280 --> 30:52.040]  uh, Hockenberry gets all the credit and Sean Heber, I guess, does all the hard work.
[30:52.040 --> 30:54.080]  And when you speak as Hockenberry, you don't want to,
[30:54.080 --> 30:57.600]  Yeah, you don't really need to do the typing.
[30:57.600 --> 31:06.240]  Um, I don't want to read his piece, but basically he, he took a look at this new extension emphasis
[31:06.240 --> 31:11.840]  on extensions and the safety, you know, the way that it's separate apps, really just little
[31:11.840 --> 31:17.600]  apps running in a different context and speculated that that could be the future of, of a new,
[31:17.600 --> 31:25.280]  like a next generation Apple TV with, um, you know, with apps, with an open, like an
[31:25.280 --> 31:27.360]  open for Apple and app store architecture.
[31:27.360 --> 31:28.360]  Yeah.
[31:28.360 --> 31:30.120]  It's an interesting piece.
[31:30.120 --> 31:32.120]  It's worth, worth checking out.
[31:32.120 --> 31:33.120]  Yeah.
[31:33.120 --> 31:35.360]  Cause the, I'll put it in the show notes.
[31:35.360 --> 31:36.360]  Yeah.
[31:36.360 --> 31:37.360]  Okay.
[31:37.360 --> 31:38.360]  Perfect.
[31:38.360 --> 31:40.960]  Cause the cool thing about the extensions thing is that they don't tell you really what
[31:40.960 --> 31:42.200]  context you're going to be in.
[31:42.200 --> 31:43.200]  Yeah.
[31:43.200 --> 31:47.200]  It doesn't say, okay, now you're coming up for the today context or whatever.
[31:47.200 --> 31:53.680]  Um, it, it gives you a frame in which to project your UI in.
[31:53.680 --> 32:01.840]  Um, and now that you can actually use the GPU in the background, uh, I, I can see them
[32:01.840 --> 32:07.640]  doing something where like an app can be running and, uh, projecting a UI into like an off
[32:07.640 --> 32:13.000]  screen surface and having that surface broadcast to a television using, um, basically, uh,
[32:13.000 --> 32:15.000]  what do they call it?
[32:15.000 --> 32:16.000]  Airplay.
[32:16.000 --> 32:17.000]  Yeah.
[32:17.000 --> 32:18.000]  Yeah.
[32:18.000 --> 32:19.000]  Video Airplay is great for games.
[32:19.000 --> 32:20.000]  It wouldn't be right.
[32:20.000 --> 32:23.880]  And there's, and, and, and just pie in the sky, what if blah, blah, blah.
[32:23.880 --> 32:28.120]  The idea that the game is running on your iPad or your iPhone and just projecting to
[32:28.120 --> 32:31.240]  the screen, it's going to be way too much latency.
[32:31.240 --> 32:36.560]  There's no way that you're going to get, you know, even fun, casual game waste latency
[32:36.560 --> 32:37.560]  with that.
[32:37.560 --> 32:41.400]  It depends on the game, but yes, rule out a lot of games.
[32:41.400 --> 32:42.760]  There's some games where that could work.
[32:42.760 --> 32:43.760]  All right.
[32:43.760 --> 32:44.760]  I'll backtrack.
[32:44.760 --> 32:47.920]  It could still work, but there's a lot of games where it wouldn't.
[32:47.920 --> 32:53.000]  I certainly don't think you'd get a big chunk of the console market through that method
[32:53.000 --> 32:55.640]  because yeah, you've had the latency wouldn't be there.
[32:55.640 --> 32:56.640]  All right.
[32:56.640 --> 33:02.880]  And the other thing that I keep coming back to is we know the basic or at least at Apple
[33:02.880 --> 33:10.240]  TV as we know it is the cheap parts of an iOS device by which I mean, and it just seems
[33:10.240 --> 33:15.600]  funny because if you're old enough to think that the CPU is one of the cheap parts is
[33:15.600 --> 33:24.840]  crazy because it used to be that a PC was a very expensive CPU surrounded by other stuff.
[33:24.840 --> 33:31.320]  And now like the, the, you know, the a series systems on a chip, not that they're cheap,
[33:31.320 --> 33:36.920]  but they're, you know, they're nowhere near as expensive as the touch screen, the display.
[33:36.920 --> 33:41.880]  You know, the glass, the actual glass is the expensive part of an iPad and an iPhone.
[33:41.880 --> 33:46.120]  Yeah, I think batteries are expensive.
[33:46.120 --> 33:48.920]  And I think, I think that it's the assembly too.
[33:48.920 --> 33:52.480]  I think that the, you know, that's not, you can't really call it a component, but getting
[33:52.480 --> 33:59.120]  all that stuff into these crazy thin small form factors, the affordances they have that
[33:59.120 --> 34:01.000]  it costs money in the tooling.
[34:01.000 --> 34:02.000]  Right.
[34:02.000 --> 34:07.360]  But then to take that little tiny system on a chip and put it into a relatively humongous
[34:07.360 --> 34:12.600]  hockey puck, like the Apple TV, I think is assembly wise, very cheap.
[34:12.600 --> 34:17.680]  So they can sell them like right now today, they sell an Apple TV for $99 and it has the,
[34:17.680 --> 34:19.240]  I think it has the a five, doesn't it?
[34:19.240 --> 34:23.480]  They never updated it.
[34:23.480 --> 34:28.200]  And you know, it's been updated to the a five for a while now that, you know, I think it
[34:28.200 --> 34:32.720]  was sometime like 18 months, two years ago when it came out.
[34:32.720 --> 34:39.080]  But when it did, the a five was roughly a year old, you know, they can put a year old
[34:39.080 --> 34:43.260]  system on a chip into a $99 Apple TV.
[34:43.260 --> 34:48.600]  So that means like sometime soon, if not, if not in the second half of this year, maybe
[34:48.600 --> 34:57.240]  early next year, they could put the a seven system on a chip in a $99 Apple TV.
[34:57.240 --> 34:58.680]  And it doesn't make any sense.
[34:58.680 --> 35:02.520]  If you've got a nice a seven in there, it doesn't make any sense to only use it for
[35:02.520 --> 35:03.520]  airplay.
[35:03.520 --> 35:05.360]  I mean, you'd want to have code running on it.
[35:05.360 --> 35:09.560]  I grab, you know, graphic stuff running on metal on a seven.
[35:09.560 --> 35:10.560]  I agree.
[35:10.560 --> 35:15.720]  Yeah, especially because yeah, a seven starts with the or sorry, the metal API, the new
[35:15.720 --> 35:21.240]  3d rendering API that they have requires an a seven right now.
[35:21.240 --> 35:27.200]  Again, I think it's a business thing, depending on how they think they can get into this market.
[35:27.200 --> 35:34.080]  Ben Thompson had a good piece up yesterday about disrupting like Apple disrupting the
[35:34.080 --> 35:38.520]  console market and how it's right for it.
[35:38.520 --> 35:39.520]  I agree with you.
[35:39.520 --> 35:46.400]  He at some point had two products, he had like a $99 one games and $179 one with games,
[35:46.400 --> 35:48.200]  which is boneheaded.
[35:48.200 --> 35:52.920]  Yeah, he over and it's funny because a year and I even updated it with a year prior, he
[35:52.920 --> 35:57.000]  had the right idea that it would just be a $99 device that you could run games on.
[35:57.000 --> 35:58.000]  Yeah.
[35:58.000 --> 35:59.000]  I did.
[35:59.000 --> 36:00.000]  That's a good long shot with him yesterday on.
[36:00.000 --> 36:02.000]  I forget what the show electric sharp shadow.
[36:02.000 --> 36:03.680]  Anyway, that'll come on sometime soon.
[36:03.680 --> 36:04.680]  He's a smart guy.
[36:04.680 --> 36:05.680]  He's a show.
[36:05.680 --> 36:06.680]  Yeah.
[36:06.680 --> 36:07.680]  Moises.
[36:07.680 --> 36:08.680]  Yeah, we were on it together.
[36:08.680 --> 36:09.680]  Exactly.
[36:09.680 --> 36:10.680]  And Sandy.
[36:10.680 --> 36:11.680]  Yeah.
[36:11.680 --> 36:12.680]  That was fun.
[36:12.680 --> 36:13.680]  Any excuse to talk to Sandy?
[36:13.680 --> 36:20.200]  He the thing that I thought his key observation was that historically zoom out to to, you
[36:20.200 --> 36:25.120]  know, like the Atari 2600 in 1979 or whenever it came out.
[36:25.120 --> 36:31.720]  For a very long stretch, consoles cost like 100 bucks, and then they try to make their
[36:31.720 --> 36:33.560]  money selling the games.
[36:33.560 --> 36:37.200]  And there was this $100 $100, you know, give or take, you know, maybe sometimes closer
[36:37.200 --> 36:40.200]  to 200.
[36:40.200 --> 36:46.660]  But that, I guess, probably starting with the PlayStation, and certainly with like PlayStation
[36:46.660 --> 36:54.080]  two, and then with Xbox, they got more expensive, you know, and it used to be the PCs were thousands
[36:54.080 --> 37:00.120]  of dollars, you know, average price like 2500 $3,000 back in like 1980 81.
[37:00.120 --> 37:03.800]  And consoles that you just hooked up to your TV were like $100.
[37:03.800 --> 37:05.680]  And that, you know, he made a nice graph.
[37:05.680 --> 37:09.160]  It's pretty I thought that was pretty insightful that they've converged that consoles have
[37:09.160 --> 37:13.600]  gotten more expensive because they've gotten more powerful and effectively they're they're
[37:13.600 --> 37:15.640]  gaming PCs.
[37:15.640 --> 37:18.480]  And PCs have gotten cheaper and cheaper.
[37:18.480 --> 37:24.160]  But that that that trend has left this pricing umbrella underneath.
[37:24.160 --> 37:28.360]  Yeah, the big one like console is now about 400 bucks.
[37:28.360 --> 37:30.800]  Xbox was 500 but they dropped it down.
[37:30.800 --> 37:38.920]  And I think his argument is that the console manufacturers been chasing sort of the high
[37:38.920 --> 37:41.360]  end gaming market.
[37:41.360 --> 37:50.160]  And that's made it necessary to sort of have high end machines all the time, which costs
[37:50.160 --> 37:51.640]  a bunch of money.
[37:51.640 --> 37:54.960]  And they try to make the money back over, you know, the six year seven year span of
[37:54.960 --> 37:55.960]  the console.
[37:55.960 --> 38:00.840]  But yeah, that is carved out a giant section below it.
[38:00.840 --> 38:06.460]  And I think for a long time, that didn't really matter.
[38:06.460 --> 38:12.200]  Because what was below sort of the high end consoles wasn't a compelling experience.
[38:12.200 --> 38:18.840]  But now I think with, you know, with an A7 powered level chip, I think he can have a
[38:18.840 --> 38:23.000]  pretty compelling experience that a lot of players would be happy with at a very low
[38:23.000 --> 38:29.320]  price point and sort of undercut the high end console market in a way that they don't
[38:29.320 --> 38:31.800]  expect and they can't really compete with.
[38:31.800 --> 38:33.000]  Yeah.
[38:33.000 --> 38:35.040]  And I don't think it's just about games.
[38:35.040 --> 38:37.160]  And I know that a lot of us I'm not even a gamer.
[38:37.160 --> 38:38.960]  I mean, I don't I don't play a ton of games.
[38:38.960 --> 38:42.400]  But I know you do have a background actually making games.
[38:42.400 --> 38:49.180]  But I think maybe that's part of the thing that we're overlooking is we're only focused
[38:49.180 --> 38:56.000]  on watching movies and TV shows, right on an Apple TV or any of these, you know, devices
[38:56.000 --> 38:59.440]  that you hook up that when you could do that on TiVo, you can do it on you know, you can
[38:59.440 --> 39:04.900]  get movies and TV shows on your PlayStation and your Xbox, and games.
[39:04.900 --> 39:07.960]  But there's other you could do anything you'd want to project on a TV.
[39:07.960 --> 39:08.960]  Right.
[39:08.960 --> 39:15.320]  And so think about the way that we can talk about other things that have been Sherlock'd,
[39:15.320 --> 39:23.360]  you know, by announcements, but it occurred to me that maybe like panics status board
[39:23.360 --> 39:28.680]  could be Sherlock'd by a future Apple TV that runs notification center widgets.
[39:28.680 --> 39:29.680]  Sure.
[39:29.680 --> 39:30.680]  Yeah.
[39:30.680 --> 39:31.680]  Right.
[39:31.680 --> 39:36.120]  And you can't do it in your living room for your family, but that if you're a business,
[39:36.120 --> 39:43.040]  you know, you might have a TV set up with, you know, Apple TV hooked up to it and just
[39:43.040 --> 39:48.720]  run notification center and have you know, company information and you know, status.
[39:48.720 --> 39:49.720]  I do that in a second.
[39:49.720 --> 39:51.120]  I think it's a good idea.
[39:51.120 --> 39:52.120]  Right.
[39:52.120 --> 39:55.520]  And it's powerful because then it's not just what here's the widgets Apple thinks you might
[39:55.520 --> 39:56.520]  want.
[39:56.520 --> 40:00.840]  It's any widget from any app, including ones that you the company with this board up on
[40:00.840 --> 40:03.560]  the wall wrote yourselves for your own internal system.
[40:03.560 --> 40:04.560]  Yeah.
[40:04.560 --> 40:05.560]  No, I totally agree.
[40:05.560 --> 40:06.560]  I think it's a great idea.
[40:06.560 --> 40:11.380]  You know, I need, you know, $99 box that you just plug into a TV is pretty, that's like
[40:11.380 --> 40:15.480]  not a huge argument you have to have with the procurement office in order to get that
[40:15.480 --> 40:16.480]  right.
[40:16.480 --> 40:17.480]  Right.
[40:17.480 --> 40:18.480]  Yeah.
[40:18.480 --> 40:19.480]  Yeah.
[40:19.480 --> 40:20.480]  It's, it's, you know, it's lunch for four or five people.
[40:20.480 --> 40:21.480]  Exactly.
[40:21.480 --> 40:22.480]  Yeah.
[40:22.480 --> 40:23.480]  So no, I think that's a good idea.
[40:23.480 --> 40:26.240]  I guess, um, you know, and also you can project your slides onto it for when you want to do
[40:26.240 --> 40:27.240]  the presentation.
[40:27.240 --> 40:28.240]  Yeah.
[40:28.240 --> 40:29.240]  Yeah.
[40:29.240 --> 40:34.080]  Yeah. Anywhere where you have a screen or project something is a possible place where
[40:34.080 --> 40:40.760]  you would use the Apple TV and that, you know, having these extension APIs make it possible
[40:40.760 --> 40:44.440]  to do a lot more than just show video or play a game.
[40:44.440 --> 40:45.440]  Yeah.
[40:45.440 --> 40:48.840]  I think it's a, I think there's an interesting product in there.
[40:48.840 --> 40:52.880]  I don't know if they're going to call it Apple TV, but yeah, who knows?
[40:52.880 --> 40:54.400]  Who knows if they changed the name of that.
[40:54.400 --> 40:59.360]  And I'd also don't know if it's a this year thing or not.
[40:59.360 --> 41:02.760]  I think that I get a sense it's a little bit further out.
[41:02.760 --> 41:03.760]  Yeah.
[41:03.760 --> 41:04.760]  I don't.
[41:04.760 --> 41:05.760]  I kind of did last week too.
[41:05.760 --> 41:07.120]  Um, and I don't know.
[41:07.120 --> 41:08.120]  It doesn't seem impossible.
[41:08.120 --> 41:09.120]  I don't know.
[41:09.120 --> 41:13.880]  I don't know anything for sure, but I kind of get the feeling that the, that it's not
[41:13.880 --> 41:17.360]  on the list of things that are coming at the end of the year.
[41:17.360 --> 41:18.360]  No.
[41:18.360 --> 41:21.600]  And you know, everybody seems excited about the list of stuff that is coming.
[41:21.600 --> 41:22.600]  So yeah.
[41:22.600 --> 41:27.000]  I think there's a lot of people who assume that TV has to be one of them because it's
[41:27.000 --> 41:29.200]  the one that's been rumored for the longest.
[41:29.200 --> 41:31.680]  Well, I mean, that's kind of the classic thing, right?
[41:31.680 --> 41:37.840]  Everybody assumes it gets back to what we're talking about, about the extensions or the,
[41:37.840 --> 41:40.380]  you know, the, the accelerated web kit.
[41:40.380 --> 41:45.260]  People say they want a specific thing and then Apple just kind of delivers something
[41:45.260 --> 41:48.460]  different that does address the problem.
[41:48.460 --> 41:53.640]  So I don't know if it's going to be a watch or a TV or whatever, but whatever it is, they
[41:53.640 --> 41:55.800]  seem pretty pleased with it.
[41:55.800 --> 41:57.560]  Sort of different topic.
[41:57.560 --> 42:02.320]  Um, one of the things I wanted to write about, but I skipped because I felt like I'd gone
[42:02.320 --> 42:03.940]  long enough in my piece.
[42:03.940 --> 42:08.640]  But when I, when you go to WWDC and you were there, I was there.
[42:08.640 --> 42:15.620]  Um, you see people who you don't see throughout the year, especially people who work at Apple,
[42:15.620 --> 42:20.600]  you know, people who I'm friends with or semi friends with or who at least have met before.
[42:20.600 --> 42:25.800]  And there's a certain personal repertoire and like I said with Mark Gurman on this show
[42:25.800 --> 42:30.360]  a couple of weeks ago that you develop, you know, not, not necessarily giving spilling
[42:30.360 --> 42:35.480]  secrets or, you know, tips that are, you know, super juicy or something like that, but you
[42:35.480 --> 42:39.600]  can learn things that you wouldn't learn any other way because face to face communication
[42:39.600 --> 42:44.800]  is somehow more human.
[42:44.800 --> 42:52.080]  I really got a sense talking to people at Apple last week at WWDC that they're happy,
[42:52.080 --> 42:54.120]  happy in a way that they haven't been again.
[42:54.120 --> 42:59.160]  In fact, one friend literally said the words, uh, it's fun again.
[42:59.160 --> 43:00.640]  Oh, that's cool.
[43:00.640 --> 43:01.640]  Which I thought was pretty interesting.
[43:01.640 --> 43:02.640]  Yeah.
[43:02.640 --> 43:03.640]  Um, I don't know.
[43:03.640 --> 43:07.680]  Did you, did you pick up on anything like that or, or yeah, somebody tell me almost
[43:07.680 --> 43:08.840]  exactly the same thing.
[43:08.840 --> 43:12.440]  Like, yeah, I'm having a lot of fun.
[43:12.440 --> 43:14.720]  So that's interesting.
[43:14.720 --> 43:16.960]  But yeah, to me it's really interesting.
[43:16.960 --> 43:20.120]  And I thought that that fun again was a, was a big tell.
[43:20.120 --> 43:25.720]  It's and again, it's not because they're, uh, taking it easy and relaxing.
[43:25.720 --> 43:27.640]  I mean, these are people who love their work.
[43:27.640 --> 43:28.640]  Yes.
[43:28.640 --> 43:29.640]  No, no.
[43:29.640 --> 43:32.240]  These people fun again probably means that they're working the weekends.
[43:32.240 --> 43:33.240]  Yeah.
[43:33.240 --> 43:34.240]  Unfortunately.
[43:34.240 --> 43:35.520]  I hope not because that just burns people out.
[43:35.520 --> 43:38.560]  But fun again means that they're tackling interesting problems and they're having a
[43:38.560 --> 43:39.560]  good time.
[43:39.560 --> 43:42.360]  Well, and I think it gets to the part.
[43:42.360 --> 43:47.160]  I think it is also part of what I did write about, which is this sort of like go back
[43:47.160 --> 43:52.720]  to the collaboration and more parts of the company working together on the same things,
[43:52.720 --> 44:01.480]  you know, and that, um, that there were iOS people working on, um, the umbrella, you know,
[44:01.480 --> 44:02.480]  it's an umbrella term.
[44:02.480 --> 44:07.520]  Continuity isn't one feature it's, you know, an umbrella name for several features, but
[44:07.520 --> 44:12.080]  that they're working hand in hand at the same time with people doing the same frameworks
[44:12.080 --> 44:13.360]  on the Mac side.
[44:13.360 --> 44:17.560]  Because the whole point of them is to, you know, like handoff, handoff doesn't exist
[44:17.560 --> 44:18.560]  if there aren't collaborating.
[44:18.560 --> 44:19.560]  Right.
[44:19.560 --> 44:23.440]  But it means that there's more people that nobody's like sitting there twiddling their
[44:23.440 --> 44:28.880]  thumbs while the attention of the top executives is all on iOS eight.
[44:28.880 --> 44:29.880]  Right.
[44:29.880 --> 44:36.440]  Well, I mean, the program office used to be divided between OS groups and now it's combined.
[44:36.440 --> 44:37.540]  Right.
[44:37.540 --> 44:43.600]  And it's, I think that it's, uh, it's meant that more, a lot more, not just a little more,
[44:43.600 --> 44:49.960]  but a lot more engineers are fully engaged on high priority projects than ever before.
[44:49.960 --> 44:51.680]  And that's what makes them happy.
[44:51.680 --> 44:53.480]  I think so.
[44:53.480 --> 44:54.480]  Yeah.
[44:54.480 --> 45:01.080]  Plus, I mean, so last year, um, it had been a slog to get iOS seven out, uh, the four
[45:01.080 --> 45:05.120]  style departure probably soured some people.
[45:05.120 --> 45:09.840]  And it's not that they were bitter necessarily, just that, um, you know, it's a big change
[45:09.840 --> 45:10.840]  up.
[45:10.840 --> 45:15.040]  So that there's always some kind of gnashing of teeth when, when there's a change up.
[45:15.040 --> 45:16.040]  Yeah.
[45:16.040 --> 45:17.040]  I worry about that too.
[45:17.040 --> 45:20.840]  And I, I hope that when what I wrote didn't come across as being anti forestall because
[45:20.840 --> 45:25.460]  I feel like as time goes on, it's easy to slag on the guy and as time goes on, I actually
[45:25.460 --> 45:27.360]  think he doesn't deserve it.
[45:27.360 --> 45:29.200]  No, I think it's an amazing job.
[45:29.200 --> 45:32.440]  Everybody I've talked to that's worked with him has nothing but high praise for him.
[45:32.440 --> 45:33.440]  Right.
[45:33.440 --> 45:37.480]  I think what might've soured some people is that the people who worked under him who were
[45:37.480 --> 45:43.600]  in his division, the iOS division mostly really, really liked and admired him and they always
[45:43.600 --> 45:50.840]  felt like that he had their back and because he was an effective corporate info in in fighter
[45:50.840 --> 45:57.160]  and was obviously famously, you know, close to Steve jobs that having their back meant
[45:57.160 --> 46:00.360]  that they, you know, that's a great boss, right?
[46:00.360 --> 46:04.080]  That's a great guy to be working for.
[46:04.080 --> 46:09.640]  I get the, and the other thing, I didn't know this till recently, like it's the Don Melton
[46:09.640 --> 46:15.840]  story, but the Don Melton story that, that forestall was the guy who went to back for
[46:15.840 --> 46:17.400]  the carbon strategy.
[46:17.400 --> 46:24.000]  Now we're going way back and they were talking like 1988, 1999.
[46:24.000 --> 46:28.000]  You know, you, you talked about this with rich Siegel on debug recently.
[46:28.000 --> 46:29.640]  Great, great episode of the show.
[46:29.640 --> 46:34.120]  Which my, it was actually one of the few people who I could say is my former boss at bare
[46:34.120 --> 46:35.120]  bones.
[46:35.120 --> 46:37.240]  Um, he was a blast to talk to you.
[46:37.240 --> 46:39.880]  Oh, he's super thoughtful guy.
[46:39.880 --> 46:42.720]  Um, but yeah, so he talked about it.
[46:42.720 --> 46:43.720]  Yeah, exactly.
[46:43.720 --> 46:44.720]  We covered the gut.
[46:44.720 --> 46:50.600]  Long story short, you know, the, you know, Apple buys next, uh, next comes in and Steve
[46:50.600 --> 46:56.400]  jobs and the next leadership effectively take over Apple, uh, correctly.
[46:56.400 --> 46:59.420]  You know, that's, they were, you know, the people who were there, whole reason Apple
[46:59.420 --> 47:03.080]  was in trouble was that their leadership was, was crap.
[47:03.080 --> 47:08.360]  Um, they come in, they come up with a strategy and their first strategy is, okay, everybody's
[47:08.360 --> 47:10.480]  going to write cocoa apps because cocoa is awesome.
[47:10.480 --> 47:11.480]  Trust us.
[47:11.480 --> 47:12.480]  It's better.
[47:12.480 --> 47:15.940]  Now they're correct that cocoa is great and that it was better.
[47:15.940 --> 47:21.400]  They were not correct that that was an effective, that Apple was in a position to dictate something
[47:21.400 --> 47:30.360]  like that because they needed a big developers like Adobe and Microsoft to have their apps
[47:30.360 --> 47:31.360]  on the system.
[47:31.360 --> 47:36.320]  And rewriting from scratch was not something they were going to do for a system that might
[47:36.320 --> 47:37.320]  not even work.
[47:37.320 --> 47:38.320]  Right.
[47:38.320 --> 47:39.320]  Right.
[47:39.320 --> 47:41.400]  Cause Apple had been promising next generation operating systems for the whole decade of
[47:41.400 --> 47:42.400]  the night.
[47:42.400 --> 47:43.400]  Yeah.
[47:43.400 --> 47:48.840]  Um, and at the smaller level, developers like bare bones, the small ones weren't on board
[47:48.840 --> 47:53.280]  with it either because they could actually even less afford to gamble because they couldn't
[47:53.280 --> 47:58.300]  afford to spend a year rewriting for a new system, you know, that it could put a small
[47:58.300 --> 48:00.720]  developer out of business.
[48:00.720 --> 48:08.060]  Um, so along comes this idea of carbon and it's surprising to me in hindsight, but not
[48:08.060 --> 48:12.800]  really having met forest all, you know, uh, once or twice and, and knowing a little bit
[48:12.800 --> 48:17.260]  about him, but knowing that he was an, a next guy had been there with the next day.
[48:17.260 --> 48:21.120]  There was a perception on the Mac side that the next people all wanted that they were
[48:21.120 --> 48:24.520]  a little religious about cocoa and the next stuff.
[48:24.520 --> 48:30.320]  And it's interesting to me that one of the next guys was the one who really fought for
[48:30.320 --> 48:35.680]  the carbon strategy within Apple and the whole reason I, well, I think practical in terms
[48:35.680 --> 48:40.160]  of realizing that it was a good strategy for Apple to keep developers on board.
[48:40.160 --> 48:45.600]  But I think it was also the case that forced all always, he was a supporter of third party
[48:45.600 --> 48:46.600]  developers.
[48:46.600 --> 48:48.680]  Yeah, I think so too.
[48:48.680 --> 48:53.500]  So we haven't released it yet, but, uh, we did an interview with, uh, an Eaton Ganatra
[48:53.500 --> 49:00.120]  who was the, uh, director in church of iOS apps, uh, like from the beginning of the project
[49:00.120 --> 49:04.480]  to, I don't know, a couple of years ago, um, this is going to be on debug debug.
[49:04.480 --> 49:05.480]  Yeah.
[49:05.480 --> 49:09.920]  Oh, no, it's not out yet, but it, man, it went long, it's like four hours long.
[49:09.920 --> 49:14.600]  So it's going to be in two hours, I guess, but the first half he started in 93 and he
[49:14.600 --> 49:18.320]  was with the company during this entire process that you just described and he was working
[49:18.320 --> 49:19.320]  on carbon.
[49:19.320 --> 49:24.840]  Uh, and it's, so if anything that John just said, it interests you, there's going to be
[49:24.840 --> 49:30.560]  more, more information than you can shake a stick at on, on a coming up debug show.
[49:30.560 --> 49:31.840]  But need is awesome though.
[49:31.840 --> 49:34.280]  He's such a smart, smart guy.
[49:34.280 --> 49:37.160]  I don't want to say it's ancient history, but it's certainly history at this point and
[49:37.160 --> 49:39.600]  it's surprisingly little of that has come out.
[49:39.600 --> 49:44.680]  I think it's just the nature of Apple's culture of not really talking about the internals
[49:44.680 --> 49:45.680]  of your work.
[49:45.680 --> 49:49.760]  I mean, it's not secret anymore, but yeah, you know, it's not like I think Don Melton
[49:49.760 --> 49:53.760]  is burning any bridges by having said that it's it, but Apple people just don't talk
[49:53.760 --> 49:54.760]  about stuff like that.
[49:54.760 --> 49:58.720]  So they hear these stories is, is usually there's something new to learn.
[49:58.720 --> 49:59.720]  Yeah, it's a treat.
[49:59.720 --> 50:02.440]  That's kind of one of the, uh, it's kind of where the interview went so long.
[50:02.440 --> 50:06.240]  I wanted to talk to him, you know, we, we try to get the backstory on people and then
[50:06.240 --> 50:07.240]  focus on something.
[50:07.240 --> 50:13.000]  I was going to focus on, you know, iOS development and the apps, um, but it was just so fascinating.
[50:13.000 --> 50:17.840]  All this historical stuff felt, I just couldn't help but go down the rabbit hole on it.
[50:17.840 --> 50:18.840]  Yeah.
[50:18.840 --> 50:24.320]  So anyway, I, you know, it's a, I think the, as time goes on, the forestall story and,
[50:24.320 --> 50:27.880]  and you know, whatever friction there was with him and the other executives and cook's
[50:27.880 --> 50:31.320]  decision to, to, to oust him.
[50:31.320 --> 50:38.000]  It's not a simple story of, well, forestall was a, you know, a bad guy or an asshole and
[50:38.000 --> 50:43.440]  you know, I think it was a complicated story and probably without question in my mind,
[50:43.440 --> 50:46.720]  the most difficult decision that Tim Cook has made as CEO.
[50:46.720 --> 50:47.720]  I'd say so.
[50:47.720 --> 50:49.440]  Didn't you have a piece arguing that?
[50:49.440 --> 50:54.640]  Uh, I think so, but I think as time goes on though, and we hear, you know, just to hear
[50:54.640 --> 50:58.120]  stories like that, like to hear that forestall was the guy who went to bat for carbon, even
[50:58.120 --> 51:02.960]  though he was a next guy who, who clearly was evangelizing for cocoa.
[51:02.960 --> 51:09.040]  Um, uh, you know, it just shows that he was, you know, he was good for third party developers,
[51:09.040 --> 51:12.080]  you know, but that it still might've been the right, you know, and I think more and
[51:12.080 --> 51:15.200]  more, it seems like it was the right move to, to move on.
[51:15.200 --> 51:20.240]  Well, it's, it's hard to look at this WWDC and argued that they made a misstep, right?
[51:20.240 --> 51:21.240]  Right.
[51:21.240 --> 51:22.240]  It's clearly not in the gutter.
[51:22.240 --> 51:27.880]  I mean, as, as greatest as forestall was, this is a, I don't want to say new era because
[51:27.880 --> 51:30.800]  it's not, but it's, you know, grown up.
[51:30.800 --> 51:34.960]  That's where I've, what I've, I've chosen to frame it is that the company has grown
[51:34.960 --> 51:35.960]  up.
[51:35.960 --> 51:36.960]  I like that.
[51:36.960 --> 51:37.960]  That's good.
[51:37.960 --> 51:42.760]  There's a maturity to, to their opening up internally.
[51:42.760 --> 51:43.760]  Sure.
[51:43.760 --> 51:48.160]  I mean, people have been saying it's a new Apple and yeah, maybe, but not really ultimately
[51:48.160 --> 51:54.520]  Apple is still going to do the thing that you can depend on them to do, which is, uh,
[51:54.520 --> 51:59.160]  act in their own interests first because it's a company, that's the way the world works.
[51:59.160 --> 52:05.760]  Uh, but now they, they seem to see their interests, uh, aligned with third parties in, in a, in
[52:05.760 --> 52:12.120]  a much more open kind of way in the, where maybe previously they thought they could just
[52:12.120 --> 52:14.980]  do everything in the today view or all of this stuff, right?
[52:14.980 --> 52:21.900]  Being a grownup and as a human is largely to me about being disciplined, that you can
[52:21.900 --> 52:26.960]  be an idiot when you're, you know, a teenager and you know, college student and maybe even
[52:26.960 --> 52:30.600]  in three or twenties, but that at a certain point you've got to stop being an idiot and
[52:30.600 --> 52:36.200]  you've got to be a little bit more disciplined and behave in a way that's not necessarily,
[52:36.200 --> 52:39.600]  you know, whatever you want to do at the moment, but it's, you know, part of a larger plan.
[52:39.600 --> 52:40.600]  Right.
[52:40.600 --> 52:42.320]  And I think it's true for companies too.
[52:42.320 --> 52:49.880]  And I think that immature, I say new Apple is the new Apple after they unified with next.
[52:49.880 --> 52:52.920]  And that, I love that term, by the way, I don't know if I'd heard it that way before
[52:52.920 --> 52:55.480]  being a reunification.
[52:55.480 --> 53:00.360]  I I've been using it for a little bit and, and it just struck me last night when I read
[53:00.360 --> 53:01.360]  the price.
[53:01.360 --> 53:02.360]  Yeah.
[53:02.360 --> 53:06.360]  Um, well I've thought about that cause you know, a lot of the next guys, there's guys
[53:06.360 --> 53:11.600]  like Bud Tribble who like bounced, I think he was at Apple then at next and now he's
[53:11.600 --> 53:12.600]  back at Apple.
[53:12.600 --> 53:15.200]  You know, it wasn't just Steve Jobs.
[53:15.200 --> 53:16.200]  Right.
[53:16.200 --> 53:21.680]  And when jobs left, he took Apple people with him or, or there were Apple people who after
[53:21.680 --> 53:28.360]  jobs was forced out of the company in 85 who then left Apple and then went to next because
[53:28.360 --> 53:32.880]  they liked the Apple when Steve was there, you know, and that it, to me, that's the best
[53:32.880 --> 53:33.880]  way to see it.
[53:33.880 --> 53:38.320]  I know that some people phrase it as, Hey, it was a reverse acquisition that Apple bought
[53:38.320 --> 53:42.320]  next and next took over Apple, um, at a leadership level.
[53:42.320 --> 53:43.320]  That's true.
[53:43.320 --> 53:46.240]  Uh, re reunification is to me the best way to look at it.
[53:46.240 --> 53:49.000]  It makes it sound happy too, right?
[53:49.000 --> 53:53.320]  That in their hearts they were always in, in alignment that they two companies that
[53:53.320 --> 53:54.640]  valued the same things.
[53:54.640 --> 53:55.640]  Oh yeah.
[53:55.640 --> 53:56.640]  Yeah, for sure.
[53:56.640 --> 53:58.640]  We'll design an interface for sure.
[53:58.640 --> 53:59.640]  Yeah.
[53:59.640 --> 54:00.640]  All right.
[54:00.640 --> 54:01.640]  Well let's come back.
[54:01.640 --> 54:03.640]  I want to come back to this corporate maturity.
[54:03.640 --> 54:04.640]  Remember that?
[54:04.640 --> 54:05.640]  Okay.
[54:05.640 --> 54:09.820]  Let me take a second break here and thank our great friends at Squarespace.
[54:09.820 --> 54:10.820]  Everybody knows Squarespace.
[54:10.820 --> 54:12.260]  They've sponsored this show many times.
[54:12.260 --> 54:14.400]  They sponsor a bunch of other shows.
[54:14.400 --> 54:15.400]  Here's the thing.
[54:15.400 --> 54:20.840]  They sponsor this show repeatedly because people keep signing up because they have a
[54:20.840 --> 54:23.080]  great service.
[54:23.080 --> 54:24.080]  People haven't checked it out.
[54:24.080 --> 54:25.520]  You've heard me talk about it.
[54:25.520 --> 54:30.900]  Um, but then when people do, they finally, Hey, I do need a new website because I'm starting
[54:30.900 --> 54:36.800]  my own podcast or you're starting a blog or you're, uh, selling t-shirts or something
[54:36.800 --> 54:37.800]  like that.
[54:37.800 --> 54:41.800]  Uh, and then, you know, people who listen to these shows, they think, well, everybody's
[54:41.800 --> 54:42.800]  always telling me about Squarespace.
[54:42.800 --> 54:43.800]  I'll go look at Squarespace.
[54:43.800 --> 54:44.800]  Well, guess what?
[54:44.800 --> 54:50.160]  When people look at Squarespace, uh, there's a reason they tend to sign up and it's just
[54:50.160 --> 54:51.160]  a great thing.
[54:51.160 --> 54:58.800]  It's an all in one service for hosting, building, designing a website, a website of almost any
[54:58.800 --> 54:59.800]  sort that you can imagine.
[54:59.800 --> 55:05.160]  Like I said, you could do a blog, you could do a podcast, you can do a store, all sorts
[55:05.160 --> 55:06.160]  of things.
[55:06.160 --> 55:10.960]  They have built in templates, professionally designed, really, really good looking, um,
[55:10.960 --> 55:11.960]  to choose from.
[55:11.960 --> 55:16.120]  You want to customize the design because you know, CSS, you can do that.
[55:16.120 --> 55:21.440]  You want to decide which components to include on your website.
[55:21.440 --> 55:26.380]  You can do it in their graphical interface, drag and drop, uh, move stuff around.
[55:26.380 --> 55:30.440]  On the other hand, you know, code, you can go in and you can inject your own JavaScript
[55:30.440 --> 55:32.160]  if you want.
[55:32.160 --> 55:37.840]  So they've got high level features, uh, nice visual editing, low level features where you
[55:37.840 --> 55:41.640]  can inject code if you're safe, if you feel, you know, you know how to do that.
[55:41.640 --> 55:44.400]  They have award winning technical support.
[55:44.400 --> 55:45.400]  They've just expanded.
[55:45.400 --> 55:46.400]  They used to all be in New York.
[55:46.400 --> 55:52.400]  Now they're in New York and Dublin, um, 24 hours, seven days a week.
[55:52.400 --> 55:56.400]  If you have a website idea for a website that you want to build or you have a website and
[55:56.400 --> 56:01.280]  you're not happy with the system you have running it right now, go check out Squarespace.
[56:01.280 --> 56:10.160]  com slash Gruber squarespace.com slash Gruber and they also have an offer code.
[56:10.160 --> 56:18.200]  Now the offer code is JG, just my initials, JG, uh, and you save 10% off big bucks over
[56:18.200 --> 56:20.880]  the lifetime of your account because once you go there, you're going to stick there
[56:20.880 --> 56:21.880]  for years.
[56:21.880 --> 56:25.720]  Uh, so my thanks to Squarespace.
[56:25.720 --> 56:26.720]  So corporate maturity.
[56:26.720 --> 56:28.440]  Yeah, that's, that's how I look at it.
[56:28.440 --> 56:34.040]  I do and, and I think it's discipline and it takes discipline to do multiple things
[56:34.040 --> 56:36.120]  at once and to collaborate.
[56:36.120 --> 56:38.160]  Yeah, for sure.
[56:38.160 --> 56:41.880]  And I think when apples was new, apple was immature.
[56:41.880 --> 56:50.360]  I think that it, it, it manifested itself and do one thing at a time and it left a lot
[56:50.360 --> 56:57.200]  big parts of the company untapped, you know, and that, you know, I'd linked to it today
[56:57.200 --> 57:03.920]  and Jock had had a great piece on it in 2007 but I, uh, in 2007 when the iPhone first came
[57:03.920 --> 57:06.040]  out, they had a press release.
[57:06.040 --> 57:11.240]  They actually had to issue a press release before WWDC and cause they, it wasn't that
[57:11.240 --> 57:14.200]  they were expected to announce leopard.
[57:14.200 --> 57:17.920]  They had, they were expected to release leopard.
[57:17.920 --> 57:21.960]  Leopard was supposed to ship to consumers at WWDC, not like a developer beta, but the
[57:21.960 --> 57:23.200]  real thing.
[57:23.200 --> 57:26.520]  And they had to say in advance of WWDC, this isn't going to happen.
[57:26.520 --> 57:28.360]  We're going to shoot for October.
[57:28.360 --> 57:34.200]  Um, we'll have a beta for developers at WWDC, but it's nowhere near shipping because we
[57:34.200 --> 57:40.000]  had to pull engineering and QA resources off Mac OS 10 to ship the iPhone.
[57:40.000 --> 57:45.920]  Um, you know, and it's not the only example of it, but that, you know, that, that they
[57:45.920 --> 57:50.600]  were, you know, and I, you know, I think a lot of it comes down to Steve jobs that he
[57:50.600 --> 57:56.400]  was insular and you know, what his attention was on was where he directed the company and
[57:56.400 --> 58:02.880]  it was well, well both, you know, that he was folk that the, it, it, it's a different
[58:02.880 --> 58:08.340]  thing for the company to be focused than for one person to be focused, I think.
[58:08.340 --> 58:15.040]  And I think mature Apple is doing more things at the same time, but in unity that they're
[58:15.040 --> 58:21.520]  not all over the place, you know, and, and an example, um, and maybe it's unfair.
[58:21.520 --> 58:25.480]  Maybe you tell me if it's unfair, but here's, so Apple announced a new programming language
[58:25.480 --> 58:27.520]  and it really is new and it's interesting.
[58:27.520 --> 58:28.520]  We can talk.
[58:28.520 --> 58:30.920]  I'd like to talk to you and see what you think about it because I've, what I've learned in
[58:30.920 --> 58:34.400]  two weeks since it was announced is pretty interesting.
[58:34.400 --> 58:37.040]  Um, but it's really is a new language.
[58:37.040 --> 58:38.040]  This is no joke.
[58:38.040 --> 58:42.880]  They haven't just, you know, made a small tweak to some existing language.
[58:42.880 --> 58:49.320]  Um, and that's a pretty big deal and they expect to have very big deal, you know, millions
[58:49.320 --> 58:54.020]  of apps written using this language starting this year.
[58:54.020 --> 58:57.040]  And it runs on both iOS and Mac.
[58:57.040 --> 59:03.160]  So it's not like this abstract, here's a new language and, but it doesn't really, you know,
[59:03.160 --> 59:07.420]  you can't use it to write apps or, or you can't use it to write Mac apps yet.
[59:07.420 --> 59:10.480]  You can only use it to write iOS apps or the other way around.
[59:10.480 --> 59:16.640]  It's no, here's an, here's a new language and you can start using it now or very soon
[59:16.640 --> 59:19.120]  because you know, the syntax is like in beta.
[59:19.120 --> 59:24.000]  Um, but you know, I think they expect to finalize at least finalize the 1.0 version of it very
[59:24.000 --> 59:25.480]  soon.
[59:25.480 --> 59:29.160]  Um, and you can start using it for real in production.
[59:29.160 --> 59:35.760]  Now compare and contrast that with, with Google, which put a crackerjack like hall of fame
[59:35.760 --> 59:42.680]  team together, um, of language guys, you know, and they came up with a new language go, which
[59:42.680 --> 59:46.120]  has a, you know, I don't, I wouldn't call it that close to Swift, but it's the same
[59:46.120 --> 59:53.120]  basic idea of let's solve the problems of C without losing the performance of C. Uh,
[59:53.120 --> 59:58.400]  let's do something like safety, like say, that's the big theme of that shared by almost
[59:58.400 --> 01:00:00.960]  all newer systems languages.
[01:00:00.960 --> 01:00:06.840]  You know, Java was, you know, the having it in a runtime is about safety and security.
[01:00:06.840 --> 01:00:11.040]  Same thing with she C sharp, which is, you know, in layman's terms, Microsoft's version
[01:00:11.040 --> 01:00:16.720]  of Java, uh, or maybe Microsoft's vision for something like Java.
[01:00:16.720 --> 01:00:22.040]  Um, go is about, you know, getting rid of, uh, pointers and stuff like that.
[01:00:22.040 --> 01:00:25.920]  Swift is about getting rid of pointers and memory management and stuff like that for
[01:00:25.920 --> 01:00:31.800]  safety and for programmer efficiency, but while having that same performance.
[01:00:31.800 --> 01:00:37.320]  But so Google has this new language, well-respected it's, it's been out for a while now, but it
[01:00:37.320 --> 01:00:39.480]  has absolutely nothing to do with Android.
[01:00:39.480 --> 01:00:44.560]  So they've got this platform with hundreds of millions, maybe even close to a billion
[01:00:44.560 --> 01:00:47.920]  now devices running it and a new programming language.
[01:00:47.920 --> 01:00:51.520]  But the two are just, there's no relationship between them whatsoever.
[01:00:51.520 --> 01:00:52.520]  Yeah.
[01:00:52.520 --> 01:00:54.000]  They're completely divorced from one another.
[01:00:54.000 --> 01:00:57.240]  Android uses a version of Java, right?
[01:00:57.240 --> 01:01:00.600]  And maybe that's unfair that it, you know, that anything Google does has to be part of
[01:01:00.600 --> 01:01:04.400]  Android or something like that, but it just seems to me that Google is still an immature
[01:01:04.400 --> 01:01:07.920]  company in that regard and that they have these different initiatives and they're not
[01:01:07.920 --> 01:01:09.540]  really pulling together.
[01:01:09.540 --> 01:01:12.640]  It's a throw it all up against the wall and see what sticks.
[01:01:12.640 --> 01:01:18.960]  Yeah, I think they're, they do have a little bit of that sort of academia style thing,
[01:01:18.960 --> 01:01:22.800]  which I'm really not knocking, but they will try a bunch of different stuff.
[01:01:22.800 --> 01:01:25.440]  And sometimes I come up with really, really cool stuff.
[01:01:25.440 --> 01:01:29.560]  Yeah, that's exactly what go seems like it's, and that's, that just doesn't mean that go,
[01:01:29.560 --> 01:01:33.320]  there's anything wrong with go or that, you know, that they should have done differently.
[01:01:33.320 --> 01:01:40.320]  But to me, there's something more interesting and more about Apple's Swift because it's
[01:01:40.320 --> 01:01:42.600]  so practically useful.
[01:01:42.600 --> 01:01:43.600]  Yes.
[01:01:43.600 --> 01:01:47.600]  And in fact, you can tell from the design of it that it was built, um, to interoperate
[01:01:47.600 --> 01:01:54.080]  with Objective-C. Yeah, the way that they, they have like pseudo named functions, uh,
[01:01:54.080 --> 01:02:00.160]  pseudo named parameters and the functions, uh, like Objective-C, um, I don't know how
[01:02:00.160 --> 01:02:04.800]  nerdy you want to get here, but an Objective-C you have like multiple parts to the, to the
[01:02:04.800 --> 01:02:06.800]  method name, right?
[01:02:06.800 --> 01:02:07.800]  Right.
[01:02:07.800 --> 01:02:13.200]  After each, after each part, like, um, I'm trying to think of one, you, uh, URL for resource
[01:02:13.200 --> 01:02:18.160]  supply of type that that's a method, so there's two parameters.
[01:02:18.160 --> 01:02:21.440]  So when a go function, you can, you can name them similarly.
[01:02:21.440 --> 01:02:26.160]  So each parameter in a function can have a separate name, but you can't swap them around
[01:02:26.160 --> 01:02:27.160]  it.
[01:02:27.160 --> 01:02:31.640]  In many languages with named parameters, you can, uh, name them Swift, not with go.
[01:02:31.640 --> 01:02:32.640]  Oh, sorry.
[01:02:32.640 --> 01:02:33.640]  It was Swift.
[01:02:33.640 --> 01:02:34.640]  Yeah.
[01:02:34.640 --> 01:02:35.640]  Sorry.
[01:02:35.640 --> 01:02:36.640]  We had done with Swift in many languages with named parameters.
[01:02:36.640 --> 01:02:40.440]  You can, um, put the parameters in arbitrary order.
[01:02:40.440 --> 01:02:43.800]  That's not the case with Swift because it's built interoperate with objective.
[01:02:43.800 --> 01:02:46.560]  Can you, and Objective-C you couldn't move them around either.
[01:02:46.560 --> 01:02:47.560]  Nope.
[01:02:47.560 --> 01:02:48.560]  Can't do it.
[01:02:48.560 --> 01:02:49.560]  Right.
[01:02:49.560 --> 01:02:50.920]  Cause what happens in Objective-C is it basically takes all of those parts and it sticks them
[01:02:50.920 --> 01:02:56.760]  into one string method name effectively called a selector.
[01:02:56.760 --> 01:02:59.760]  And that's what gets looked up in the run time.
[01:02:59.760 --> 01:03:00.760]  Right.
[01:03:00.760 --> 01:03:06.880]  Um, yeah, like the traditional way of doing it would be if you have two parameters to
[01:03:06.880 --> 01:03:12.800]  a method call or call it a function, whatever, um, you, most languages you have to know which
[01:03:12.800 --> 01:03:19.440]  order to put them and you say, here's my function, my function, parentheses, first parameter,
[01:03:19.440 --> 01:03:23.920]  second parameter, and you have to know what those two are in that order.
[01:03:23.920 --> 01:03:28.080]  And then once you get to three, you know, maybe if you get to four, you're, you've got
[01:03:28.080 --> 01:03:33.000]  a problem with your, your design of the function, but you know, three is not crazy, but then
[01:03:33.000 --> 01:03:36.040]  you've got three things to remember and you could easily screw that up.
[01:03:36.040 --> 01:03:41.400]  And if they're both, if two of them are integers, you're not going to get a compiler warning
[01:03:41.400 --> 01:03:44.440]  and you might have a bug that's very, you can swap them around and you don't have the
[01:03:44.440 --> 01:03:45.960]  context to understand what they are.
[01:03:45.960 --> 01:03:48.600]  So the name parameters helps a lot, right?
[01:03:48.600 --> 01:03:53.280]  Because it reads more like language where the, you know, the purpose of the second parameter
[01:03:53.280 --> 01:03:56.640]  is right there where you're putting it.
[01:03:56.640 --> 01:03:57.640]  Right.
[01:03:57.640 --> 01:03:58.640]  I see exactly what you mean though.
[01:03:58.640 --> 01:04:02.800]  So in Swift, in theory, they could have done it, you know, w w which sounds like a nice
[01:04:02.800 --> 01:04:08.200]  idea here, just put the name parameters in, in whatever order you want.
[01:04:08.200 --> 01:04:12.560]  But I see what you mean that it's, it's meant to be a sibling to Objective-C.
[01:04:12.560 --> 01:04:13.560]  Yeah.
[01:04:13.560 --> 01:04:15.260]  Cause it runs on the same runtime.
[01:04:15.260 --> 01:04:19.760]  So just explain Objective-C for a second.
[01:04:19.760 --> 01:04:23.240]  There's the language of Objective-C and then there's what's called the runtime, which is
[01:04:23.240 --> 01:04:26.960]  kind of what, you know, where the magic happens effectively.
[01:04:26.960 --> 01:04:28.600]  The runtime is where all the classes are.
[01:04:28.600 --> 01:04:37.880]  The runtime is where when you send a message to a class, when you ask an object to do something
[01:04:37.880 --> 01:04:41.460]  under the hood, what happens is we go into the runtime and you'd look up where the little
[01:04:41.460 --> 01:04:46.660]  piece of code that can respond to that message lives in memory.
[01:04:46.660 --> 01:04:51.240]  And then the computer jumps to it and it starts executing that code.
[01:04:51.240 --> 01:04:56.600]  So that runtime is shared between Swift and Objective-C. It's the same runtime.
[01:04:56.600 --> 01:04:59.540]  What's different is the, the language layer on top.
[01:04:59.540 --> 01:05:04.560]  So Objective-C is kind of, I guess now that the traditional way of addressing that language,
[01:05:04.560 --> 01:05:09.200]  which is that runtime, which is obviously C based.
[01:05:09.200 --> 01:05:16.320]  So it's got all the power and folly of ancient C and it's got this objective layer on top
[01:05:16.320 --> 01:05:21.280]  of it, which is where you get all the classes and the message handling and all of the fancy
[01:05:21.280 --> 01:05:23.760]  stuff that you've come to expect from Cocoa.
[01:05:23.760 --> 01:05:29.960]  So Swift is just another way of addressing that, the, the, the runtime.
[01:05:29.960 --> 01:05:35.080]  And it does away with all of the sort of the followers of C. Arguably it picks up a few
[01:05:35.080 --> 01:05:39.300]  of its own here and there, but it's like you said, you get rid of pointers, you get rid
[01:05:39.300 --> 01:05:45.200]  of all of the, hopefully most of the ways that you can kind of cause trouble and, and
[01:05:45.200 --> 01:05:47.300]  be insecure.
[01:05:47.300 --> 01:05:52.680]  What do you make of, um, can some of this stuff I haven't followed too closely, but
[01:05:52.680 --> 01:06:01.360]  in the keynote they, they put forth that not only was it as fast as Objective-C, but they
[01:06:01.360 --> 01:06:05.660]  gave two examples, you know, where they showed that it was faster than C. One of them seemed
[01:06:05.660 --> 01:06:13.360]  a little realistic, which was like some kind of, you know, uh, standard security, um, compression
[01:06:13.360 --> 01:06:17.020]  or not, uh, encryption algorithm.
[01:06:17.020 --> 01:06:23.100]  And that the same encryption algorithm, you know, mathematically intense, uh, in, in Swift
[01:06:23.100 --> 01:06:27.340]  was actually faster than an Objective-C. The other one though, and I think it was you at
[01:06:27.340 --> 01:06:28.340]  dinner last week.
[01:06:28.340 --> 01:06:29.460]  I think you even pointed it out.
[01:06:29.460 --> 01:06:31.680]  It was actually just total bullshit.
[01:06:31.680 --> 01:06:34.960]  It was a quote, complex object sort.
[01:06:34.960 --> 01:06:35.960]  Yeah.
[01:06:35.960 --> 01:06:39.120]  I was talking to, I think it was Sir Cusan and I were chatting about it.
[01:06:39.120 --> 01:06:41.020]  Um, like that's not a thing.
[01:06:41.020 --> 01:06:42.020]  I don't understand.
[01:06:42.020 --> 01:06:47.820]  It was at dinner with the both of you at the, at the prime rib where we were joking about
[01:06:47.820 --> 01:06:50.620]  what a nonsensical, like, it means nothing.
[01:06:50.620 --> 01:06:52.460]  It could mean anything.
[01:06:52.460 --> 01:06:53.460]  That's the thing.
[01:06:53.460 --> 01:06:54.660]  It could literally just mean anything.
[01:06:54.660 --> 01:07:00.020]  Um, and so that one was much faster than Objective-C. So the reason I'm going to guess that that
[01:07:00.020 --> 01:07:06.860]  one was faster is that in Objective-C every time you want to see if two objects are equal,
[01:07:06.860 --> 01:07:10.660]  you need to go and look up the, the method like the is equal method.
[01:07:10.660 --> 01:07:13.860]  So you have to go to the runtime, so you get one trip for the runtime per object to check
[01:07:13.860 --> 01:07:14.860]  if they're equal.
[01:07:14.860 --> 01:07:18.900]  And if you're going to sort something, obviously you're checking if stuff's equal a lot.
[01:07:18.900 --> 01:07:25.380]  Um, now with Swift, because you can say that all of the objects that you're going to sort
[01:07:25.380 --> 01:07:27.620]  are going to be the exact same type.
[01:07:27.620 --> 01:07:31.760]  You only have to go look up that method once in the amount of time, because once you've
[01:07:31.760 --> 01:07:34.660]  got it, you know that it's going to apply to all of the objects in your collection.
[01:07:34.660 --> 01:07:36.180]  Do you know what I mean?
[01:07:36.180 --> 01:07:37.780]  I mean, yeah, that makes sense.
[01:07:37.780 --> 01:07:41.620]  So you, rather than asking each object, okay, how do you want me to compare you?
[01:07:41.620 --> 01:07:45.620]  Okay, here's a little, maybe it's not an expensive thing, but it's, if you're doing it to sort,
[01:07:45.620 --> 01:07:46.620]  it's going to add up.
[01:07:46.620 --> 01:07:50.860]  And when they call it a complex object sort, I'm pretty sure they just threw a whole bunch
[01:07:50.860 --> 01:07:52.580]  of crap at it, like a lot.
[01:07:52.580 --> 01:07:55.100]  And you know, so yeah, Swift is faster.
[01:07:55.100 --> 01:07:56.100]  Um, right.
[01:07:56.100 --> 01:08:00.340]  That there's, in other words, I think it's, let me see if I can put it in layman's terms
[01:08:00.340 --> 01:08:11.020]  is it would Swift would allow you with objects to do something just once, even if it's 100,000
[01:08:11.020 --> 01:08:16.340]  objects that would have to happen 100,000 times in objective C. And even if it's relatively
[01:08:16.340 --> 01:08:19.540]  lightweight, you're still there's something that you don't have to do each iteration,
[01:08:19.540 --> 01:08:20.540]  each comparison,
[01:08:20.540 --> 01:08:21.540]  right?
[01:08:21.540 --> 01:08:22.540]  And it is it's an objective.
[01:08:22.540 --> 01:08:27.660]  See, it's, it's very small, but you know, but everything adds up, right?
[01:08:27.660 --> 01:08:31.900]  When you're doing something when you're got 100,000 items to compare anything you don't
[01:08:31.900 --> 01:08:36.020]  have, you can do once instead of each time through the loop is, is a win.
[01:08:36.020 --> 01:08:37.020]  Yeah.
[01:08:37.020 --> 01:08:39.340]  So that's maybe a little bit of a contrived example.
[01:08:39.340 --> 01:08:40.340]  Right?
[01:08:40.340 --> 01:08:44.580]  Because you could actually trick that in objective C, too, if you if you fancy pants.
[01:08:44.580 --> 01:08:50.780]  Well, the thing I thought that I'm thinking about, though, is the fact that and I would
[01:08:50.780 --> 01:08:54.540]  think and so far from what I've seen, I've seen it.
[01:08:54.540 --> 01:08:58.700]  I've seen some performance examples that people have written simple little things where objective
[01:08:58.700 --> 01:09:01.380]  C still comes out ahead.
[01:09:01.380 --> 01:09:06.180]  But that it's easily that Swift looks fast enough.
[01:09:06.180 --> 01:09:08.660]  Oh, yeah, whether certainly fast enough.
[01:09:08.660 --> 01:09:09.660]  Yeah.
[01:09:09.660 --> 01:09:10.660]  Right.
[01:09:10.660 --> 01:09:14.500]  Like, if there are problems with Swift, it's not going to be about performance.
[01:09:14.500 --> 01:09:16.820]  No, no, no, no, I don't want to.
[01:09:16.820 --> 01:09:19.100]  I was ragging on that particular thing.
[01:09:19.100 --> 01:09:20.100]  Right?
[01:09:20.100 --> 01:09:24.420]  Greg Titus, that's more and I think that's more of a marketing issue than, you know,
[01:09:24.420 --> 01:09:28.540]  more of a keynote than it might.
[01:09:28.540 --> 01:09:32.540]  Let's face it, I don't know this, but the Swift team was probably rolling their eyes
[01:09:32.540 --> 01:09:33.540]  at that, too.
[01:09:33.540 --> 01:09:34.540]  I would not be surprised.
[01:09:34.540 --> 01:09:39.700]  They are not very, very smart people to say the least.
[01:09:39.700 --> 01:09:40.700]  I think so.
[01:09:40.700 --> 01:09:46.500]  I think I think it was Greg Titus, omni group guy, classic comp side problem is called a
[01:09:46.500 --> 01:09:48.260]  try like a T.R.I.E.
[01:09:48.260 --> 01:09:51.600]  And he's got very fast objective C code to sort of do it.
[01:09:51.600 --> 01:09:57.300]  And he reloaded in Swift and his initial implementation was 80 times slower.
[01:09:57.300 --> 01:10:01.660]  But he managed within a day of sort of optimizing and figuring things out, he got it to be only
[01:10:01.660 --> 01:10:07.840]  1.5 times slower than than Objective C. Now, keep in mind his Objective C one he's had
[01:10:07.840 --> 01:10:10.220]  since forever.
[01:10:10.220 --> 01:10:15.500]  He's been using it for performance testing stuff for a long time, like 20 years.
[01:10:15.500 --> 01:10:20.860]  And he got the Swift one within very close to it in only a day.
[01:10:20.860 --> 01:10:25.940]  And his conclusion and this I mean, this is from a series of tweets.
[01:10:25.940 --> 01:10:29.260]  So if I'm getting something wrong, I apologize.
[01:10:29.260 --> 01:10:32.940]  But his conclusion was that it's going to take a little bit of time to figure out how
[01:10:32.940 --> 01:10:36.340]  to make Swift fast.
[01:10:36.340 --> 01:10:40.700]  But it's certainly got it where it counts like you can you can definitely get there.
[01:10:40.700 --> 01:10:44.380]  And I'm eager, I'm looking forward to it.
[01:10:44.380 --> 01:10:49.860]  I think it's telling that effectively what we now know, and he didn't take credit for
[01:10:49.860 --> 01:10:53.500]  and it's typical Apple way, but that, you know, it makes sense that they let Latner
[01:10:53.500 --> 01:10:57.380]  Chris Latner do the demo in the keynote, which was super cool.
[01:10:57.380 --> 01:11:02.900]  Yeah, I was like, compiler guy comes out of his cave and just walks onto the stage.
[01:11:02.900 --> 01:11:03.900]  That's pretty cool.
[01:11:03.900 --> 01:11:06.580]  And in a keynote where there were only five people on stage.
[01:11:06.580 --> 01:11:07.580]  Yeah, right.
[01:11:07.580 --> 01:11:13.860]  There was a cook, mostly Craig Federighi, a senior vice president, one product demo
[01:11:13.860 --> 01:11:19.140]  by Brian Kroll, who's a, you know, like on Schiller's team, a product marketing guy won
[01:11:19.140 --> 01:11:25.340]  by jaws, who's I think, second to Schiller in product marketing.
[01:11:25.340 --> 01:11:30.320]  But those guys were both on stage very briefly, you know, maybe like five minutes each.
[01:11:30.320 --> 01:11:36.260]  And then a nice big demo from Chris Latner in the keynote, which is crazy.
[01:11:36.260 --> 01:11:40.820]  But it you know, effectively, what we now know is that for about a year, it started
[01:11:40.820 --> 01:11:42.780]  to he started in 2010.
[01:11:42.780 --> 01:11:45.840]  And for a first year, Latner was doing it on his own.
[01:11:45.840 --> 01:11:50.060]  So it's, you know, not that it's his language, and it should be swift by Chris Latner, but
[01:11:50.060 --> 01:11:54.700]  that he's the, you know, assuming the father of it, you know, the progenitor is maybe the
[01:11:54.700 --> 01:11:55.700]  better term.
[01:11:55.700 --> 01:11:59.860]  And he's the guy, you know, who did the compiler, he's, you know, clang and LLVM.
[01:11:59.860 --> 01:12:09.660]  So I think it's interesting that the language came from the compiler, and not the abstract,
[01:12:09.660 --> 01:12:18.580]  you know, like, you know, like, Ruby, like, Ruby, it's like, Matt's had the idea for the
[01:12:18.580 --> 01:12:19.580]  language, right?
[01:12:19.580 --> 01:12:23.340]  And it or that's how I, you know, not that it's anywhere near as complex as a programming
[01:12:23.340 --> 01:12:24.340]  language.
[01:12:24.340 --> 01:12:25.340]  But that's how I did markdown.
[01:12:25.340 --> 01:12:26.660]  Here's, here's what I want, right?
[01:12:26.660 --> 01:12:32.100]  I want to put asterisks around the word and then have m tags come out around it in the
[01:12:32.100 --> 01:12:33.100]  output.
[01:12:33.100 --> 01:12:37.700]  And then I then I figured out, well, how do I make that happen in a Perl script?
[01:12:37.700 --> 01:12:42.060]  Whereas Latner was starting with, here's a compiler, and here's a runtime, and here's
[01:12:42.060 --> 01:12:49.600]  a bunch of frameworks for, you know, a huge, you know, wide frameworks.
[01:12:49.600 --> 01:12:53.800]  How do I make a language that's optimal for this?
[01:12:53.800 --> 01:12:57.540]  And so I don't think it's any, you know, it would probably be surprising if the performance
[01:12:57.540 --> 01:13:00.900]  was bad, because, you know, he started starting with the compiler.
[01:13:00.900 --> 01:13:01.900]  Yeah, yeah, exactly.
[01:13:01.900 --> 01:13:08.980]  This and there is a little bit of a language wonk smell to Swift, but I could just be an
[01:13:08.980 --> 01:13:09.980]  old man.
[01:13:09.980 --> 01:13:10.980]  I don't know.
[01:13:10.980 --> 01:13:13.780]  Yeah, I think so too.
[01:13:13.780 --> 01:13:14.780]  I guess I don't know.
[01:13:14.780 --> 01:13:16.580]  I don't know if I should be surprised or not.
[01:13:16.580 --> 01:13:17.580]  I did think it was crazy.
[01:13:17.580 --> 01:13:24.780]  I forget whose tweet it was where I was in a thing on on Swift.
[01:13:24.780 --> 01:13:27.660]  It was with Syracuse and we're talking about like how big the language was might have been
[01:13:27.660 --> 01:13:33.260]  another omni guy, but somebody said, just go to a playground and go import Swift to
[01:13:33.260 --> 01:13:37.220]  import the Swift.
[01:13:37.220 --> 01:13:38.220]  What is that?
[01:13:38.220 --> 01:13:39.220]  Would you call it the?
[01:13:39.220 --> 01:13:42.900]  I don't even know what that is when you import Swift.
[01:13:42.900 --> 01:13:49.540]  It's like the framework that I mean, yeah, yeah, like the not the runtime.
[01:13:49.540 --> 01:13:51.980]  Well, whatever it is, but it's with itself.
[01:13:51.980 --> 01:13:52.980]  Yeah, yeah.
[01:13:52.980 --> 01:13:53.980]  I think they have a name for it.
[01:13:53.980 --> 01:14:00.340]  I think and then you command click Swift after you've imported it to bring it up in the playground
[01:14:00.340 --> 01:14:04.780]  and inspect it and you can see that Swift itself is actually written in Swift that the
[01:14:04.780 --> 01:14:10.180]  language is actually the the true what is the language itself is extremely thin.
[01:14:10.180 --> 01:14:11.180]  Yeah.
[01:14:11.180 --> 01:14:12.180]  Yeah, I'm looking at it now.
[01:14:12.180 --> 01:14:16.740]  So there's no so all of the built in operators, right?
[01:14:16.740 --> 01:14:20.940]  So an operator is like an equal or an addition or minus even just addition is not really
[01:14:20.940 --> 01:14:22.200]  part of the language.
[01:14:22.200 --> 01:14:29.220]  It's in the Swift object or class, you know, that's implicitly imported into every Swift
[01:14:29.220 --> 01:14:30.220]  program.
[01:14:30.220 --> 01:14:31.220]  It's a Swift function.
[01:14:31.220 --> 01:14:32.220]  Yeah.
[01:14:32.220 --> 01:14:33.220]  Right.
[01:14:33.220 --> 01:14:35.460]  Because I thought I was a little surprised they did operator overload.
[01:14:35.460 --> 01:14:36.460]  I did.
[01:14:36.460 --> 01:14:37.460]  Were you at first?
[01:14:37.460 --> 01:14:40.780]  Yeah, I'm not a fan of operating overloading.
[01:14:40.780 --> 01:14:43.420]  In some cases, it makes turning real comps.
[01:14:43.420 --> 01:14:44.420]  Yeah.
[01:14:44.420 --> 01:14:45.420]  Yeah.
[01:14:45.420 --> 01:14:46.420]  Hope.
[01:14:46.420 --> 01:14:47.420]  Yeah.
[01:14:47.420 --> 01:14:48.420]  Operator overloading.
[01:14:48.420 --> 01:14:51.460]  C++ is the only language I ever did any work in that had operator overloading and the gist
[01:14:51.460 --> 01:14:56.140]  of operator overloading is you could so you could say, right out of the bag, if you say
[01:14:56.140 --> 01:15:00.620]  four plus four, you're going to get eight because it knows how to do integers.
[01:15:00.620 --> 01:15:02.460]  But you can write your own class.
[01:15:02.460 --> 01:15:06.440]  And your class could be, I don't know, a color.
[01:15:06.440 --> 01:15:11.420]  And you could say, color a plus color B and get a new color.
[01:15:11.420 --> 01:15:16.100]  And you define what it means to add color one color to another.
[01:15:16.100 --> 01:15:19.660]  And which in some cases, that's cool.
[01:15:19.660 --> 01:15:24.500]  So you don't have to write a function that says add colors, color, a color B, you could
[01:15:24.500 --> 01:15:31.220]  just say color a plus color B, and you've that's overriding the plus sign in the language.
[01:15:31.220 --> 01:15:32.220]  Sounds great.
[01:15:32.220 --> 01:15:33.420]  But in practice, it would drive you nuts.
[01:15:33.420 --> 01:15:37.180]  Because people who you were working with, if you're sharing a code would do stupid things.
[01:15:37.180 --> 01:15:40.520]  Yeah, somebody would come it would make somebody would have a cute idea.
[01:15:40.520 --> 01:15:44.860]  And you would look at something like an expression like a plus b.
[01:15:44.860 --> 01:15:46.320]  And it would not be a plus b.
[01:15:46.320 --> 01:15:50.540]  It's like a plus b, but b is like, well, we won't let any negative values in like some
[01:15:50.540 --> 01:15:52.300]  weird, weird stuff.
[01:15:52.300 --> 01:15:57.180]  Why that you would never guess by looking at the code, you can't, you have to Yeah,
[01:15:57.180 --> 01:15:59.940]  so I'm not a fan of operator overloading.
[01:15:59.940 --> 01:16:03.380]  Yeah, it does ultimately come down to basically, you're gonna have to trust the team that you
[01:16:03.380 --> 01:16:04.380]  work with.
[01:16:04.380 --> 01:16:10.220]  Yeah, which is true for like a lot of programming.
[01:16:10.220 --> 01:16:16.580]  And I kind of feared that a lot of crazy shit's gonna, he's gonna sort of hit the fan.
[01:16:16.580 --> 01:16:18.260]  Yeah, I wonder, I don't know.
[01:16:18.260 --> 01:16:23.060]  But the reason once you do go to a playground and do import Swift and command click Swift,
[01:16:23.060 --> 01:16:26.740]  you can see why it has operator overloading because all of the operators in the language
[01:16:26.740 --> 01:16:28.180]  are defined in Swiss itself.
[01:16:28.180 --> 01:16:29.180]  Yes, Swift itself.
[01:16:29.180 --> 01:16:30.180]  Yes.
[01:16:30.180 --> 01:16:36.380]  It's which is like a sort of recursive mentality that I imagine is comes naturally to somebody
[01:16:36.380 --> 01:16:37.380]  like Chris.
[01:16:37.380 --> 01:16:38.380]  Yeah.
[01:16:38.380 --> 01:16:43.180]  And Chris Ladner is, you know, if I explain this to him, how interesting that is, he'd
[01:16:43.180 --> 01:16:45.700]  be like, well, you know, I probably like, why would I do it any other way?
[01:16:45.700 --> 01:16:50.300]  You know, it seems but as to me, it's sort of like, mind bending, like looking behind
[01:16:50.300 --> 01:16:55.900]  the matrix, like, whoa, all of these super simple things, like, what does the plus sign
[01:16:55.900 --> 01:16:59.940]  mean, when you have an integer on one side, an integer on the other is defined in Swift
[01:16:59.940 --> 01:17:00.940]  itself.
[01:17:00.940 --> 01:17:01.940]  Yeah.
[01:17:01.940 --> 01:17:03.160]  And it's kind of funny.
[01:17:03.160 --> 01:17:06.540]  It's like, basically, that, you know, the design that the base language to have like
[01:17:06.540 --> 01:17:11.180]  two things you can add, and you can compare, and then everything else just gets built on
[01:17:11.180 --> 01:17:12.180]  top.
[01:17:12.180 --> 01:17:13.180]  Yeah.
[01:17:13.180 --> 01:17:18.180]  And then you end up with a language that's not verbose, it's, you know, really, really
[01:17:18.180 --> 01:17:19.700]  easy to read and simple.
[01:17:19.700 --> 01:17:20.700]  Yeah.
[01:17:20.700 --> 01:17:21.700]  Or it looks like it is.
[01:17:21.700 --> 01:17:22.700]  It's pretty much.
[01:17:22.700 --> 01:17:23.700]  Yeah.
[01:17:23.700 --> 01:17:24.700]  I mean, I think people can abuse it.
[01:17:24.700 --> 01:17:25.700]  But you can abuse anything.
[01:17:25.700 --> 01:17:26.700]  So we'll see.
[01:17:26.700 --> 01:17:31.700]  I'm really looking forward to actually getting some real work done with it.
[01:17:31.700 --> 01:17:32.940]  I think it's going to be a long time.
[01:17:32.940 --> 01:17:40.340]  I'm not sure if you put it on Darren Fireball, but there was a piece recently by Aaron Hillegas,
[01:17:40.340 --> 01:17:45.460]  you did link to it, saying that you're still going to need to learn Objective C. I think
[01:17:45.460 --> 01:17:47.820]  if, yes, I agree with him.
[01:17:47.820 --> 01:17:55.940]  I, again, I don't think that Swift is harder to learn Objective C. But I think what he
[01:17:55.940 --> 01:18:00.300]  does when he teaches is basically he just ignores all of the C stuff.
[01:18:00.300 --> 01:18:06.780]  The Objective C is relatively easy, but once you get into the C stuff, things get a little
[01:18:06.780 --> 01:18:07.780]  wonky.
[01:18:07.780 --> 01:18:14.500]  But I'd guess it's like at least two to five years out before Objective C is something
[01:18:14.500 --> 01:18:19.700]  that you don't need in any way, shape, or form, at least.
[01:18:19.700 --> 01:18:24.940]  Like I know that they're not shipping any frameworks with Swift now.
[01:18:24.940 --> 01:18:25.940]  Yeah.
[01:18:25.940 --> 01:18:29.540]  They probably, I'll bet they'll start with apps, right?
[01:18:29.540 --> 01:18:35.860]  And they even said at the WWDC that they rewrote the WWDC app in Swift.
[01:18:35.860 --> 01:18:41.460]  And assuming that they meant the whole thing, I'm still using it to watch sessions, and
[01:18:41.460 --> 01:18:42.460]  the app is great.
[01:18:42.460 --> 01:18:43.460]  Yeah.
[01:18:43.460 --> 01:18:44.460]  It's perfect.
[01:18:44.460 --> 01:18:45.460]  It's good.
[01:18:45.460 --> 01:18:49.260]  Never know anything better than any other previous year.
[01:18:49.260 --> 01:18:54.040]  And presumably, as the language settles down, they will start writing frameworks with it.
[01:18:54.040 --> 01:19:01.980]  But I can see why they want to be super conservative with the frameworks, because the frameworks
[01:19:01.980 --> 01:19:03.420]  are the heart and soul of the company.
[01:19:03.420 --> 01:19:04.420]  Yeah.
[01:19:04.420 --> 01:19:06.580]  They are definitely the crown jewel.
[01:19:06.580 --> 01:19:13.180]  And I think that that came across last week at WWDC, too, where Microsoft has one operating
[01:19:13.180 --> 01:19:16.180]  system, Windows, that they want to run on all devices.
[01:19:16.180 --> 01:19:21.580]  Apple has two very different operating systems, but they do share the frameworks.
[01:19:21.580 --> 01:19:22.580]  Yeah, definitely.
[01:19:22.580 --> 01:19:29.040]  I thought I heard you make that point, but yeah, the foundation and all of the other
[01:19:29.040 --> 01:19:31.860]  frameworks are really what Apple shares.
[01:19:31.860 --> 01:19:37.980]  Honestly, they could probably just pull the kernel bit out and stick a different kernel
[01:19:37.980 --> 01:19:39.220]  in there.
[01:19:39.220 --> 01:19:45.100]  And so long as all the frameworks are good, they'd still be happy.
[01:19:45.100 --> 01:19:47.260]  It's the identity of the company at this point.
[01:19:47.260 --> 01:19:48.260]  Right.
[01:19:48.260 --> 01:19:49.260]  I would almost assume that...
[01:19:49.260 --> 01:19:52.820]  Not that I think that they...I don't know if they are ever going to replace the kernel,
[01:19:52.820 --> 01:19:55.580]  but I would almost assume that they've written them with that in mind.
[01:19:55.580 --> 01:19:56.580]  Oh, yeah, definitely.
[01:19:56.580 --> 01:20:01.540]  Like in the way that they wrote them in the mind that they should be CPU architecture
[01:20:01.540 --> 01:20:02.540]  in the past.
[01:20:02.540 --> 01:20:03.540]  Yes.
[01:20:03.540 --> 01:20:04.540]  Yeah, definitely.
[01:20:04.540 --> 01:20:08.480]  And that's so they could switch from PowerPC to Intel, and that they could switch from
[01:20:08.480 --> 01:20:15.140]  Intel to ARM without any kind of pain, or the sort of pain that people have had before.
[01:20:15.140 --> 01:20:16.140]  Yeah.
[01:20:16.140 --> 01:20:23.140]  And the stuff they got from NeXT and on like Avi, Davinion, and Bertrand, those guys.
[01:20:23.140 --> 01:20:27.260]  Very agnostic about the particular hardware that they were running on.
[01:20:27.260 --> 01:20:28.260]  Yeah.
[01:20:28.260 --> 01:20:30.060]  Let me take a third break here.
[01:20:30.060 --> 01:20:32.060]  Thank our final sponsor of the show.
[01:20:32.060 --> 01:20:34.960]  Another repeat sponsor.
[01:20:34.960 --> 01:20:35.960]  Great guys.
[01:20:35.960 --> 01:20:43.220]  Our good friends at Transporter, aka File Transporter from Connected Data.
[01:20:43.220 --> 01:20:46.860]  We've been on the show before, but if you're not familiar with them, here's the idea.
[01:20:46.860 --> 01:20:51.940]  Would you like your own private cloud that lets you securely store and share files in
[01:20:51.940 --> 01:20:55.780]  a way that is completely private and resistant to governmental snooping?
[01:20:55.780 --> 01:20:59.900]  Want a way to automatically back up all your photos and videos that you take on your iPhone
[01:20:59.900 --> 01:21:03.020]  and iPad?
[01:21:03.020 --> 01:21:04.220]  Here's the idea.
[01:21:04.220 --> 01:21:07.940]  How could that work, though, if you're not running your own server?
[01:21:07.940 --> 01:21:12.380]  Well, you go there, you buy Transporter from them.
[01:21:12.380 --> 01:21:13.380]  It's a little gadget.
[01:21:13.380 --> 01:21:14.380]  It's adorable.
[01:21:14.380 --> 01:21:15.380]  Very small.
[01:21:15.380 --> 01:21:16.380]  Very quiet.
[01:21:16.380 --> 01:21:17.660]  Put it in your house.
[01:21:17.660 --> 01:21:19.920]  Connect an Ethernet cable to it.
[01:21:19.920 --> 01:21:24.340]  And then you install a little bit of software on your Mac or you install their app on your
[01:21:24.340 --> 01:21:26.200]  iPhone.
[01:21:26.200 --> 01:21:32.700]  And now you've got your own little Dropbox, except instead of the data being served somewhere
[01:21:32.700 --> 01:21:39.340]  in Amazon's cloud or Google's cloud or Apple's cloud, it's right there on your device.
[01:21:39.340 --> 01:21:40.340]  But you could buy two.
[01:21:40.340 --> 01:21:46.660]  You can have one at home, one at work, and they'll sync with each other.
[01:21:46.660 --> 01:21:52.180]  And all they do to go to the cloud is just to coordinate what their addresses are behind
[01:21:52.180 --> 01:21:54.940]  your network.
[01:21:54.940 --> 01:21:58.260]  There's no place in the cloud where your data is copied.
[01:21:58.260 --> 01:22:01.620]  It's right from the one Transporter to the other.
[01:22:01.620 --> 01:22:06.780]  And you can set up things just like with Dropbox, where if I have an account and Guy English
[01:22:06.780 --> 01:22:11.900]  has an account, I can share a file from him, and instead of going to some sort of shared
[01:22:11.900 --> 01:22:14.520]  server, it's only on our device.
[01:22:14.520 --> 01:22:19.540]  So personally, for peace of mind, the appeal is obvious.
[01:22:19.540 --> 01:22:22.760]  These guys, I've said this before when they sponsored it, they could not have gone into
[01:22:22.760 --> 01:22:27.260]  business with this idea at a better time, given what's happened in the last year with
[01:22:27.260 --> 01:22:32.780]  the NSA and other Western governments snooping on the Internet.
[01:22:32.780 --> 01:22:36.420]  But even from a legal perspective, for some people, in healthcare and stuff like that,
[01:22:36.420 --> 01:22:39.980]  they have things that they want to share with each other, but that they are legally not
[01:22:39.980 --> 01:22:45.620]  even allowed to put on a device that's not within their control.
[01:22:45.620 --> 01:22:48.900]  Transporter can help solve that.
[01:22:48.900 --> 01:22:49.900]  Really great idea.
[01:22:49.900 --> 01:22:50.900]  Well done.
[01:22:50.900 --> 01:22:51.900]  Nice hardware.
[01:22:51.900 --> 01:22:55.740]  They've got two basic ways to do it.
[01:22:55.740 --> 01:22:59.180]  You can get the puck.
[01:22:59.180 --> 01:23:03.260]  Yeah, the puck is called Transporter Sync.
[01:23:03.260 --> 01:23:05.260]  Little Apple TV sized puck.
[01:23:05.260 --> 01:23:07.140]  It's adorable, very small.
[01:23:07.140 --> 01:23:09.900]  Then you buy the puck, you plug your own hard drive in the back.
[01:23:09.900 --> 01:23:14.020]  Just bring your own external hard drive, plug it in, and it works.
[01:23:14.020 --> 01:23:20.520]  The regular Transporter is a little bit bigger, and you can get it right from them in various
[01:23:20.520 --> 01:23:22.580]  sizes with a hard drive right in there.
[01:23:22.580 --> 01:23:26.460]  Or you could buy that Transporter and just put the raw naked hard drive in there.
[01:23:26.460 --> 01:23:27.460]  It's up to you.
[01:23:27.460 --> 01:23:29.460]  A lot of options.
[01:23:29.460 --> 01:23:33.740]  Here's the idea.
[01:23:33.740 --> 01:23:38.740]  For the sizes, they have 500 gigabyte, one terabyte, two terabyte capacities.
[01:23:38.740 --> 01:23:47.560]  So go there, go to file transporter store.com file transporter store.com.
[01:23:47.560 --> 01:23:56.340]  Use this code TTS, the talk show TTS 10 TTS 10 and you'll save 10% off your purchase up
[01:23:56.340 --> 01:23:58.820]  to 35 bucks.
[01:23:58.820 --> 01:24:03.280]  They're not that expensive, but hey, 35 bucks is 35 bucks.
[01:24:03.280 --> 01:24:10.740]  So use that code TTS 10 at file transporter store.com and check them out if you have any
[01:24:10.740 --> 01:24:13.380]  reason that you'd want to share stuff privately.
[01:24:13.380 --> 01:24:14.380]  Great thing.
[01:24:14.380 --> 01:24:16.500]  I've got one here and works a charm.
[01:24:16.500 --> 01:24:18.500]  I got one too.
[01:24:18.500 --> 01:24:20.660]  Full disclosure that they also sponsored my show.
[01:24:20.660 --> 01:24:27.100]  I'm trying to find my discount code so I can gin up my stats.
[01:24:27.100 --> 01:24:28.100]  But no, they're great.
[01:24:28.100 --> 01:24:29.100]  I love it.
[01:24:29.100 --> 01:24:30.100]  Use it all the time.
[01:24:30.100 --> 01:24:33.740]  I'm literally going to use it to send this audio off to Dave.
[01:24:33.740 --> 01:24:37.980]  What are we talking about?
[01:24:37.980 --> 01:24:39.300]  We've got to wrap this up soon.
[01:24:39.300 --> 01:24:42.500]  No, we never wrap these things up.
[01:24:42.500 --> 01:24:43.500]  We just keep rolling.
[01:24:43.500 --> 01:24:45.500]  We should start talking about movies.
[01:24:45.500 --> 01:24:46.500]  Yeah.
[01:24:46.500 --> 01:24:47.500]  Yeah.
[01:24:47.500 --> 01:24:49.220]  See nothing good, isn't he?
[01:24:49.220 --> 01:24:50.820]  You know what?
[01:24:50.820 --> 01:24:53.660]  So here's a guy on Twitter.
[01:24:53.660 --> 01:24:57.820]  I think he's being sarcastic.
[01:24:57.820 --> 01:24:59.300]  Brian S. Hall.
[01:24:59.300 --> 01:25:02.660]  I like people who criticize me on Twitter.
[01:25:02.660 --> 01:25:07.780]  Just finished a long group or post and it's now clear that Tim Cook is Apple's Steve Ballmer,
[01:25:07.780 --> 01:25:09.420]  which is exactly what Apple needs.
[01:25:09.420 --> 01:25:10.860]  I don't understand.
[01:25:10.860 --> 01:25:15.500]  So, well, I think what he's trying to say is I think he's trying to make an argument
[01:25:15.500 --> 01:25:21.820]  that I'm going to say that whatever's going on at Apple is good.
[01:25:21.820 --> 01:25:27.460]  And if Tim Cook is a operations type minded guy and not a design guy, then that's and
[01:25:27.460 --> 01:25:36.820]  now he's CEO, that now that's exactly what Apple needs as CEO.
[01:25:36.820 --> 01:25:43.100]  But see, I would say it's too early to tell whether it's eventually going to be a problem
[01:25:43.100 --> 01:25:46.740]  not having a product guy atop the company.
[01:25:46.740 --> 01:25:52.460]  But I think the early signs are that he gets that and that he doesn't try to be a product
[01:25:52.460 --> 01:25:53.460]  guy.
[01:25:53.460 --> 01:25:54.460]  Yeah.
[01:25:54.460 --> 01:26:01.380]  But I think if anything, the biggest mistake, you know, Ballmer or Tim Cook or anybody who
[01:26:01.380 --> 01:26:05.660]  wasn't necessarily product focused could make is to try to step into the shoes of like the
[01:26:05.660 --> 01:26:08.380]  ultimate product guy that's not going to happen.
[01:26:08.380 --> 01:26:16.380]  And by which I mean both Bill Gates, I think he was a product guy at the end of the day
[01:26:16.380 --> 01:26:18.460]  in a very different way.
[01:26:18.460 --> 01:26:26.540]  But you know, he was also focused on what was actually shipping, I think.
[01:26:26.540 --> 01:26:34.220]  I say I and I pointed it out in my piece today that I think that the the john browett hiring
[01:26:34.220 --> 01:26:41.200]  and quick firing is a good sign because it wasn't and I had to tone down my initial language
[01:26:41.200 --> 01:26:45.740]  as I edited it because I think I called it a disastrous stint in my early draft, maybe
[01:26:45.740 --> 01:26:47.340]  the one that you read last night.
[01:26:47.340 --> 01:26:49.860]  But I changed it to ill fated because it wasn't disastrous.
[01:26:49.860 --> 01:26:53.340]  I mean, he wasn't there long enough to do anything really bad.
[01:26:53.340 --> 01:26:55.820]  And it wasn't like, he just looks shaky on the wheel.
[01:26:55.820 --> 01:26:59.460]  And they think right, it wasn't like, and it wasn't like people were always, you know,
[01:26:59.460 --> 01:27:02.580]  after he took over, you were walking into the Apple store and the computers were set
[01:27:02.580 --> 01:27:07.860]  up on on folding tables, you know, the lights were flickering.
[01:27:07.860 --> 01:27:13.220]  And you know, it smelled like urine in a subway station.
[01:27:13.220 --> 01:27:18.020]  I mean, it was, I think most people who weren't really finely tuned to what people who worked
[01:27:18.020 --> 01:27:21.660]  in the stores were saying didn't even notice it wasn't there long enough.
[01:27:21.660 --> 01:27:25.540]  I think it was just a cultural misfit.
[01:27:25.540 --> 01:27:26.540]  Yeah.
[01:27:26.540 --> 01:27:33.380]  And, you know, I think, you know, I think Tim Cook knew that dismissing him was going
[01:27:33.380 --> 01:27:36.420]  to make him that is Tim Cook look bad.
[01:27:36.420 --> 01:27:37.420]  Right?
[01:27:37.420 --> 01:27:38.420]  Yeah.
[01:27:38.420 --> 01:27:41.780]  In a way, because it's, you know, there's the guy who was only on the job six months,
[01:27:41.780 --> 01:27:45.740]  and they were like, Oh, by the way, john Broward has left the company.
[01:27:45.740 --> 01:27:51.620]  You know, it's, it's a tacit admission that, hey, my first executive hire was a dud.
[01:27:51.620 --> 01:27:52.620]  Right.
[01:27:52.620 --> 01:28:01.300]  And I think it would have been a lot easier to, or at least easier ego wise to just stick
[01:28:01.300 --> 01:28:07.740]  with the guy, you know, and instead, you know, I think he clearly took a look and thought,
[01:28:07.740 --> 01:28:13.500]  you know, what, I think I needed entirely 180 degree different sort of person to take
[01:28:13.500 --> 01:28:19.920]  over this job, which is, you know, exactly what Angela aren't, you know, clearly is,
[01:28:19.920 --> 01:28:26.540]  you know, this the barrow, it came from, you know, nickel and dime electronics reseller
[01:28:26.540 --> 01:28:32.660]  that has a reputation, you know, for being pretty low, low margin, low rent.
[01:28:32.660 --> 01:28:37.860]  And, you know, Angela arts comes from a very genuine luxury retailer.
[01:28:37.860 --> 01:28:42.100]  Nothing that I mean, the worst thing to do when you make a mistake is to double down
[01:28:42.100 --> 01:28:43.100]  on it.
[01:28:43.100 --> 01:28:44.100]  Right.
[01:28:44.100 --> 01:28:45.100]  So it's exactly but it's easy.
[01:28:45.100 --> 01:28:49.100]  Human nature makes it so easy to do that, because it feels like the worst thing to do
[01:28:49.100 --> 01:28:51.940]  is to say, Oh, hell yeah, do that all the time.
[01:28:51.940 --> 01:28:56.340]  Every time we order one too many drinks at night, I'm like, No, this is the right thing
[01:28:56.340 --> 01:29:03.980]  to do.
[01:29:03.980 --> 01:29:11.300]  So when I left, I left me that silly.
[01:29:11.300 --> 01:29:19.020]  When I left WWD, I tell you this when I left, we town, I left early, I left on Thursday
[01:29:19.020 --> 01:29:22.180]  morning, and you were still there for a couple of days.
[01:29:22.180 --> 01:29:29.620]  And I woke up and I thought, Oh, I hope I gave guy the rest of that bottle of bourbon.
[01:29:29.620 --> 01:29:32.740]  Because I can't get it on an airplane, I only had to carry on and I would hate to throw
[01:29:32.740 --> 01:29:33.740]  it away.
[01:29:33.740 --> 01:29:37.400]  And I got a quick hurry up and pack, there's no way I'm not, you know, what, you were probably
[01:29:37.400 --> 01:29:41.140]  still asleep, I wasn't gonna wake you up and run it to your room and give it to you.
[01:29:41.140 --> 01:29:42.780]  And I looked at the bottle and it was empty.
[01:29:42.780 --> 01:29:48.180]  And I was like, Oh, well, no wonder I didn't give it.
[01:29:48.180 --> 01:29:52.180]  I was right to worry that I didn't give it to you to take with you.
[01:29:52.180 --> 01:29:54.180]  And I was wrong to be worried.
[01:29:54.180 --> 01:29:56.460]  I appreciate it.
[01:29:56.460 --> 01:30:02.500]  And then my second thought was to realize that that was a mistake.
[01:30:02.500 --> 01:30:05.300]  A different sort of mistake.
[01:30:05.300 --> 01:30:16.020]  Here's what I have, I think that complacency is the problem that besets giant companies.
[01:30:16.020 --> 01:30:23.980]  And I certainly think that that's what I think that's what ailed balmer term at Microsoft,
[01:30:23.980 --> 01:30:31.100]  you know that he was too complacent, too willing to keep making money and you know, and again,
[01:30:31.100 --> 01:30:35.940]  in defense of balmer record way, way higher profits and revenues than they ever made under
[01:30:35.940 --> 01:30:37.700]  Bill Gates.
[01:30:37.700 --> 01:30:43.540]  You know, those financial things grew, grew, grew under Steve Ballmer.
[01:30:43.540 --> 01:30:48.820]  But I think he got complacent in terms of moving onward and being willing to cannibalize
[01:30:48.820 --> 01:30:54.060]  his own stuff, right and make something new and take a chance that might take away from
[01:30:54.060 --> 01:30:55.060]  the existing stuff.
[01:30:55.060 --> 01:30:57.340]  And I don't get the sense that Tim Cook is like that at all.
[01:30:57.340 --> 01:30:58.340]  No, I agree.
[01:30:58.340 --> 01:31:03.860]  In fact, I was saying similar to to Ben last night.
[01:31:03.860 --> 01:31:05.580]  I think Nintendo did the same thing.
[01:31:05.580 --> 01:31:11.500]  Nintendo for a long time was the only console manufacturer that was, you know, making money
[01:31:11.500 --> 01:31:13.460]  on their devices.
[01:31:13.460 --> 01:31:18.740]  And I think they kind of, they got addicted to, to that kind of revenue stream.
[01:31:18.740 --> 01:31:23.020]  And now they're kind of in a bad spot where, you know, if Apple does do something, they're
[01:31:23.020 --> 01:31:26.260]  just going to take the legs out from underneath Nintendo.
[01:31:26.260 --> 01:31:29.740]  And Nintendo can't be up on the high end, because that's not what they were doing.
[01:31:29.740 --> 01:31:34.460]  Yeah, and complacency is a weird thing, because everybody would say, No, I'm not complacent.
[01:31:34.460 --> 01:31:37.460]  Any leader is going to say that they're not and I think balmer would be the first to say
[01:31:37.460 --> 01:31:38.460]  no way.
[01:31:38.460 --> 01:31:39.460]  I'm not complacent.
[01:31:39.460 --> 01:31:43.580]  I'm going to destroy everybody, but denial is is hard to recognize.
[01:31:43.580 --> 01:31:49.020]  Yeah, you know, you can go into denial about things like what the iPhone was going to do
[01:31:49.020 --> 01:31:51.100]  to Windows Mobile, right?
[01:31:51.100 --> 01:31:52.660]  Which wasn't really that big, really.
[01:31:52.660 --> 01:31:56.020]  Windows Mobile never really was big anyway, that they were just thought they were going
[01:31:56.020 --> 01:32:01.820]  to be big and their whole attack plan was attacking Blackberry and Symbian was weird.
[01:32:01.820 --> 01:32:06.420]  They thought it felt to me like they they felt entitled to be big.
[01:32:06.420 --> 01:32:13.920]  John, I mean, it was more or less exactly right that that, you know, that that was Microsoft.
[01:32:13.920 --> 01:32:19.100]  When Microsoft enters a market with a new platform, it's going to be a majority share
[01:32:19.100 --> 01:32:23.340]  because not because of rational reasons, but because that's what happens when Microsoft
[01:32:23.340 --> 01:32:24.980]  enters Yeah, a market
[01:32:24.980 --> 01:32:27.900]  because I don't didn't really do anything.
[01:32:27.900 --> 01:32:31.060]  I mean, they had so Windows CE was around for ages.
[01:32:31.060 --> 01:32:32.060]  And they didn't really do anything.
[01:32:32.060 --> 01:32:36.140]  And they had plenty of time to I don't know if they could have done like, so the iPhones
[01:32:36.140 --> 01:32:37.140]  a leap.
[01:32:37.140 --> 01:32:41.340]  Let's just say that, you know, whatever, that that's neither here nor there.
[01:32:41.340 --> 01:32:45.580]  But they kept shipping something that looked like Windows 95 for years.
[01:32:45.580 --> 01:32:49.180]  They didn't, they never really bothered rethinking the problem.
[01:32:49.180 --> 01:32:52.180]  They just
[01:32:52.180 --> 01:32:56.240]  I think they just thought eventually, it's gonna, you know, eventually, this is going
[01:32:56.240 --> 01:32:57.400]  to be a big thing.
[01:32:57.400 --> 01:33:00.900]  And since we're already there, we'll be the ones who who reap the benefits.
[01:33:00.900 --> 01:33:02.640]  Yeah, well, to your point, it's almost immature.
[01:33:02.640 --> 01:33:04.500]  It's almost like they're just pouty.
[01:33:04.500 --> 01:33:07.200]  Like, why aren't you buying our phones?
[01:33:07.200 --> 01:33:14.180]  We have we're not going to give you a compelling reason to do it, but you should be weird.
[01:33:14.180 --> 01:33:15.420]  So I'm not worried about that.
[01:33:15.420 --> 01:33:23.140]  I really a, I could not be more bullish on Tim Cook's leadership at Apple.
[01:33:23.140 --> 01:33:25.740]  No, I think he's doing a great job.
[01:33:25.740 --> 01:33:33.360]  I think he knows his wheelhouse and sticks to it and and and leaves the other stuff that's
[01:33:33.360 --> 01:33:35.700]  out of his wheelhouse to people who are experts.
[01:33:35.700 --> 01:33:40.540]  Yeah, well, everything we've seen is great.
[01:33:40.540 --> 01:33:44.900]  Definitely closer collaboration between the teams or between the two operating system
[01:33:44.900 --> 01:33:47.520]  groups.
[01:33:47.520 --> 01:33:53.980]  Way more opportunities for third party developers than we've ever had on the platform before.
[01:33:53.980 --> 01:33:56.940]  Speaking with friends in the company, everybody's happy and excited.
[01:33:56.940 --> 01:33:57.940]  Right?
[01:33:57.940 --> 01:34:00.140]  Everybody seemed happy and excited on stage.
[01:34:00.140 --> 01:34:06.700]  They even tried to do some nice stuff in the App Store, which, yes, you know, that's kind
[01:34:06.700 --> 01:34:13.260]  of I don't think that's going to change much, but they tried right like there was almost
[01:34:13.260 --> 01:34:16.340]  nothing negative coming out of this this this WWDC.
[01:34:16.340 --> 01:34:21.060]  Yeah, it's a good way to put it very, very hard to find anything other than niggling
[01:34:21.060 --> 01:34:22.060]  details.
[01:34:22.060 --> 01:34:23.060]  Oh, yeah.
[01:34:23.060 --> 01:34:24.060]  Yeah.
[01:34:24.060 --> 01:34:27.200]  Like I've got little complaints about Swift and but pretty much everything they announced
[01:34:27.200 --> 01:34:30.100]  was all good all around for everyone.
[01:34:30.100 --> 01:34:31.100]  Yeah.
[01:34:31.100 --> 01:34:36.500]  Well, except that they Sherlock a couple of people, but well, yeah, like, yeah, well,
[01:34:36.500 --> 01:34:41.220]  I got a minor Sherlocking, but the reveal app guys got that stank.
[01:34:41.220 --> 01:34:42.220]  Yeah.
[01:34:42.220 --> 01:34:50.220]  So reveal, it's worth, you know, pouring one out for reveal because it was really clever.
[01:34:50.220 --> 01:34:53.020]  Long story short, you probably know more about it than me, but I would explain it as sort
[01:34:53.020 --> 01:34:56.540]  of like a WebKit inspector for cocoa apps.
[01:34:56.540 --> 01:34:57.540]  Good enough.
[01:34:57.540 --> 01:34:58.540]  Yeah.
[01:34:58.540 --> 01:35:04.740]  So like the UI could show your app, you know, the layering, like which controls are on top
[01:35:04.740 --> 01:35:09.740]  or Yeah, it would give you a three dimensional look at the at the way that the controls are
[01:35:09.740 --> 01:35:11.020]  stacked on top of each other.
[01:35:11.020 --> 01:35:13.660]  So if you scroll, I can see what's going to go behind one or the other.
[01:35:13.660 --> 01:35:14.660]  And it's handy.
[01:35:14.660 --> 01:35:15.660]  Yeah.
[01:35:15.660 --> 01:35:18.500]  And if you have like a drawing bug, where you're seeing something that you shouldn't
[01:35:18.500 --> 01:35:22.860]  be able to see or not seeing something, you should be able to see that 3d view can help
[01:35:22.860 --> 01:35:23.860]  you.
[01:35:23.860 --> 01:35:25.200]  Oh, look, no wonder you can't see that button.
[01:35:25.200 --> 01:35:29.140]  It's overlapped on the wrong way.
[01:35:29.140 --> 01:35:32.140]  And it really cool, really advanced, very fancy stuff.
[01:35:32.140 --> 01:35:35.940]  And it's like, the same thing is now built into Xcode.
[01:35:35.940 --> 01:35:36.940]  Yeah.
[01:35:36.940 --> 01:35:40.740]  And, and more, you can do more with it, obviously, because it's built in, but it's, it's pretty
[01:35:40.740 --> 01:35:41.860]  much a direct rip off.
[01:35:41.860 --> 01:35:44.100]  So good idea.
[01:35:44.100 --> 01:35:46.100]  You know, it kind of deserves to be part of Xcode.
[01:35:46.100 --> 01:35:51.940]  I don't know what to say, you know, Sherlocking is a double edged sword, right?
[01:35:51.940 --> 01:35:54.540]  Yeah, especially if you're doing developer tools.
[01:35:54.540 --> 01:36:01.500]  It's, you know, did you ever did you listen to the episode of Brent and Chris's the record
[01:36:01.500 --> 01:36:02.500]  with john Chaffee?
[01:36:02.500 --> 01:36:03.740]  Yes, I did.
[01:36:03.740 --> 01:36:08.160]  So Brent Simmons and your colleague at aged and distilled Chris Paris have a podcast,
[01:36:08.160 --> 01:36:14.800]  the record, where they're talking to, you know, long standing members of the indie Mac
[01:36:14.800 --> 01:36:21.820]  development committee, john Chaffee of busy Mac now, you know, the great busy calc, and
[01:36:21.820 --> 01:36:28.100]  they're doing, what's the new one that's coming out soon, busy contacts, that was called.
[01:36:28.100 --> 01:36:33.820]  And he talked about when he was at extensive, which used to make suitcase plugins, yeah,
[01:36:33.820 --> 01:36:36.880]  and they made plugins for like Quark Express and Photoshop.
[01:36:36.880 --> 01:36:41.980]  And I remember when I was doing like, practically, or even not even practically, like literally
[01:36:41.980 --> 01:36:47.260]  full time work doing graphic design layout and Quark Express, there were some extensive
[01:36:47.260 --> 01:36:53.420]  plugins that were essential, you know, that I don't use that word lately, you'd once you
[01:36:53.420 --> 01:36:55.780]  had them, you just could not go back.
[01:36:55.780 --> 01:37:00.380]  But his, you know, he said, like, we knew that the bet our best extensions that there's
[01:37:00.380 --> 01:37:04.100]  Adobe and Quark, we're going to see that and they're going to see well, you know, if everybody's
[01:37:04.100 --> 01:37:08.340]  using it, that should be part of Photoshop, or that should be part of Quark Express.
[01:37:08.340 --> 01:37:13.460]  And so it was he said, it was like, you know, you had to stay ahead of them because we needed
[01:37:13.460 --> 01:37:14.460]  hits.
[01:37:14.460 --> 01:37:18.200]  And once we had a hit, we knew that that hit was very likely going to be rolled into the
[01:37:18.200 --> 01:37:21.300]  next version, and that we weren't going to get a heads up about it.
[01:37:21.300 --> 01:37:22.300]  Right?
[01:37:22.300 --> 01:37:23.300]  Yeah, that was a great show.
[01:37:23.300 --> 01:37:24.300]  Great interview.
[01:37:24.300 --> 01:37:27.380]  Yeah, that's an especially insightful point.
[01:37:27.380 --> 01:37:30.700]  Because it's kind of funny, because once you see the numbers spike on a certain plugin,
[01:37:30.700 --> 01:37:32.700]  you're like, well, that one's dead.
[01:37:32.700 --> 01:37:37.160]  Yeah, yeah, which is, you know, but and and I hate to say it, but the same is true for
[01:37:37.160 --> 01:37:42.460]  developer tools, you know, and it's, you know, it's been evident.
[01:37:42.460 --> 01:37:48.860]  Ever since again, go back to the next reunification that Apple is very, very serious about providing
[01:37:48.860 --> 01:37:52.940]  the definitive developer tool, you know, for for their platform.
[01:37:52.940 --> 01:37:53.940]  Oh, yeah, definitely.
[01:37:53.940 --> 01:37:54.940]  Yeah.
[01:37:54.940 --> 01:38:00.380]  Like when they showed off Xcode for the first time, very clear indication that code warrior
[01:38:00.380 --> 01:38:03.380]  was going to be persona non credit pretty soon.
[01:38:03.380 --> 01:38:08.820]  Yeah, that they were going to do it, you know, they saw it as a strategic of strategic importance
[01:38:08.820 --> 01:38:12.300]  to get all the numbers using the first party.
[01:38:12.300 --> 01:38:13.300]  And it really is.
[01:38:13.300 --> 01:38:14.300]  I mean, next.
[01:38:14.300 --> 01:38:20.260]  It's like so the objective, well, cocoa, the frameworks and the developer tools, in particular
[01:38:20.260 --> 01:38:25.100]  interface builder, were pretty much the crown jewels of next.
[01:38:25.100 --> 01:38:30.180]  And they've taken that and they've sort of kept that as much as I complained professionally
[01:38:30.180 --> 01:38:32.660]  about Xcode or whatever going wrong.
[01:38:32.660 --> 01:38:34.860]  They they do take it very seriously.
[01:38:34.860 --> 01:38:40.140]  I say this as a guy who still uses on a daily basis, BB edit and loves BB edit and wants
[01:38:40.140 --> 01:38:42.180]  bare bones to continue to thrive.
[01:38:42.180 --> 01:38:48.380]  But there used to be like in the code warrior days, really solid support for external editors
[01:38:48.380 --> 01:38:53.880]  and that you could use BB edit as your editor for code warrior development.
[01:38:53.880 --> 01:38:57.980]  And you'd miss a few things, but you'd gain things and you know, the things that are in
[01:38:57.980 --> 01:39:00.300]  BB editor weren't in their editor.
[01:39:00.300 --> 01:39:03.060]  And Xcode does it still support X current internal?
[01:39:03.060 --> 01:39:08.580]  I'm looking right now at one point it did but I did for a long time but not in a robust
[01:39:08.580 --> 01:39:09.580]  way.
[01:39:09.580 --> 01:39:14.500]  And whenever you'd file if you could get if you could get the ear of somebody on the team
[01:39:14.500 --> 01:39:16.860]  or file a radar and get a response.
[01:39:16.860 --> 01:39:22.740]  And you'd ask for better external editor support because I want to use BB edit and the answer
[01:39:22.740 --> 01:39:26.980]  would be well what would you what features and BB editor do you want us to add X?
[01:39:26.980 --> 01:39:31.500]  Which is sort of not what you want to hear if you're working at bare bones or even if
[01:39:31.500 --> 01:39:35.740]  you're a user who wants bare bones to thrive so that you still have you know, yeah, you
[01:39:35.740 --> 01:39:38.180]  know that BB edit does well.
[01:39:38.180 --> 01:39:40.460]  But you know, I understand why.
[01:39:40.460 --> 01:39:41.460]  Right.
[01:39:41.460 --> 01:39:45.260]  Yeah, I do understand why that if there's good features like that, that they want them
[01:39:45.260 --> 01:39:49.180]  in these free developer tools that all developers can have and take advantage of and not have
[01:39:49.180 --> 01:39:51.340]  to, to do that.
[01:39:51.340 --> 01:39:52.340]  Yeah.
[01:39:52.340 --> 01:39:53.340]  But it does hurt.
[01:39:53.340 --> 01:39:55.060]  And you know, yeah, hats off to the reveal people.
[01:39:55.060 --> 01:39:56.060]  Yeah, exactly.
[01:39:56.060 --> 01:39:59.740]  I just gave up and I started using defaults and pretty much everything all the time.
[01:39:59.740 --> 01:40:05.020]  Like I don't like it used to be that it changed all my my text colors for my man like now
[01:40:05.020 --> 01:40:09.660]  I'm just like, I've given up I'm resigned I'm like just give me give me the defaults
[01:40:09.660 --> 01:40:10.660]  I'll work with that.
[01:40:10.660 --> 01:40:14.300]  Because at least when I go to somebody else's Mac the odds are that they've also given up
[01:40:14.300 --> 01:40:18.460]  and we've all been out into doing everything the exact you know what when you do give up
[01:40:18.460 --> 01:40:23.820]  like that and it's you know, then you get a new computer it there's a huge advantage
[01:40:23.820 --> 01:40:27.540]  you think hey I used to spend three days when I got a new computer getting everything set
[01:40:27.540 --> 01:40:32.460]  up the way I want it and now I just log in with three things and install Dropbox and
[01:40:32.460 --> 01:40:33.460]  I'm up.
[01:40:33.460 --> 01:40:37.100]  Yeah, the one thing I do is I speed up the mouse a little bit and I make the keyboard
[01:40:37.100 --> 01:40:40.020]  so that it's not glacial speed.
[01:40:40.020 --> 01:40:42.620]  I don't know why they default the keyboard to be that slow.
[01:40:42.620 --> 01:40:46.660]  Oh, like when you're yeah, the repeat key stuff, which doesn't matter that much anymore
[01:40:46.660 --> 01:40:50.820]  because they've kind of nerfed that with the Yeah, because half the time you you know,
[01:40:50.820 --> 01:40:56.460]  if you hit like the E key, it gives you the iOS style pop up for your the little Frenchy
[01:40:56.460 --> 01:40:57.780]  things they put over there.
[01:40:57.780 --> 01:41:01.740]  Yeah, but for me, it's normally like I just type something I hate and I just hold down
[01:41:01.740 --> 01:41:06.420]  delete and when it takes like half a second Oh, yeah, delete Yeah, delete would be the
[01:41:06.420 --> 01:41:10.220]  one or if you want to add a bunch of returns, but I can see how delete Yeah, yeah, I definitely
[01:41:10.220 --> 01:41:13.380]  changed some of those things.
[01:41:13.380 --> 01:41:14.380]  What else happened?
[01:41:14.380 --> 01:41:15.380]  Oh, yeah.
[01:41:15.380 --> 01:41:17.460]  So I was joking last week.
[01:41:17.460 --> 01:41:23.080]  So markup kind of Sherlock's us a little bit Sherlock's napkin.
[01:41:23.080 --> 01:41:29.700]  And I was joking last week saying that I would rather have it just be everywhere in the system
[01:41:29.700 --> 01:41:31.780]  because that's a cool feature.
[01:41:31.780 --> 01:41:32.780]  And it is a cool feature.
[01:41:32.780 --> 01:41:34.380]  And guess what?
[01:41:34.380 --> 01:41:39.380]  It's everywhere in the system turns out that markup the one that the demo did mail is an
[01:41:39.380 --> 01:41:40.380]  extension.
[01:41:40.380 --> 01:41:42.820]  Yeah, I knew I figured that out.
[01:41:42.820 --> 01:41:48.940]  And I didn't want to tell you, I don't want to hurt my feelings.
[01:41:48.940 --> 01:41:52.860]  I didn't want to be better if you figured it out.
[01:41:52.860 --> 01:41:53.860]  So I didn't know.
[01:41:53.860 --> 01:41:54.860]  But that's cool.
[01:41:54.860 --> 01:41:55.860]  That's really cool.
[01:41:55.860 --> 01:42:00.820]  So in the app, now you can just get well, and certainly text edit and mail and so any
[01:42:00.820 --> 01:42:07.300]  text view on the system, you can edit an image in markup, was I calling it markdown whatever
[01:42:07.300 --> 01:42:08.300]  markup?
[01:42:08.300 --> 01:42:11.300]  No, it's markup.
[01:42:11.300 --> 01:42:17.340]  Or any other image editing capable extension on the system.
[01:42:17.340 --> 01:42:18.340]  I love that idea.
[01:42:18.340 --> 01:42:23.900]  I've always loved the idea of services that came from next that gets super underused.
[01:42:23.900 --> 01:42:29.340]  But hopefully with this new extensions mechanism, that's going to sort of breathe new life into
[01:42:29.340 --> 01:42:30.340]  that idea.
[01:42:30.340 --> 01:42:38.380]  Yeah, it's a good you know, and napkin getting Sherlock to say, you guys, you're big boys.
[01:42:38.380 --> 01:42:39.380]  But you're right.
[01:42:39.380 --> 01:42:40.380]  And it is more elegant.
[01:42:40.380 --> 01:42:44.620]  It's more elegant to know that it's a feature that implemented on the new extension mechanism
[01:42:44.620 --> 01:42:47.360]  and not hard coded into mail, right?
[01:42:47.360 --> 01:42:51.260]  It's not that the mail dot app team went in and made this feature.
[01:42:51.260 --> 01:42:52.980]  It's a system level thing.
[01:42:52.980 --> 01:42:57.660]  And you're exactly right that it's the second coming of services because services the things
[01:42:57.660 --> 01:43:01.340]  you see in the you know, you go up to the application name and go down to services and
[01:43:01.340 --> 01:43:06.340]  you see this or you they put it in the control the right click menu a couple years ago.
[01:43:06.340 --> 01:43:07.340]  Powerful.
[01:43:07.340 --> 01:43:13.700]  I use them all the time, but largely unchanged from the next days very much so yeah, in fact,
[01:43:13.700 --> 01:43:18.940]  I don't think you know, maybe it takes one API change since then like yeah, you take
[01:43:18.940 --> 01:43:24.620]  an op you know what type of data I'll take text I'll take files I only want here I'm
[01:43:24.620 --> 01:43:31.420]  a service I only want images if it's an image I'm available otherwise not and then you return
[01:43:31.420 --> 01:43:37.220]  the same you return something optional so it works super basically you you have an app
[01:43:37.220 --> 01:43:44.700]  you you offer to provide a service in your in your your app bundle up list and what happens
[01:43:44.700 --> 01:43:47.580]  is when you get fired up.
[01:43:47.580 --> 01:43:51.740]  So when the user selects something and then chooses your service it copies it onto a special
[01:43:51.740 --> 01:43:56.940]  copy of pasteboard and then in your app when you launch you just look at that pasteboard
[01:43:56.940 --> 01:44:00.620]  and do something with it and then put it back on the pasteboard and say that you're done
[01:44:00.620 --> 01:44:06.580]  and the other the app that sent it to you gets the changes it's the most simple system
[01:44:06.580 --> 01:44:09.220]  you could think of right like I'm just going to put it on the pasteboard you don't blow
[01:44:09.220 --> 01:44:13.420]  away the one that the user one the copy paste one you just use another one.
[01:44:13.420 --> 01:44:17.860]  It's simple and elegant but it's simplicity and elegance almost shows that it dates from
[01:44:17.860 --> 01:44:23.460]  like 1989 or 1990s computers needed it had to be so lightweight because there wasn't
[01:44:23.460 --> 01:44:28.180]  all that much disk space or memory or CPU time.
[01:44:28.180 --> 01:44:33.340]  They're very very thin you know they're elegant and powerful but they're thin whereas this
[01:44:33.340 --> 01:44:42.260]  new extension system is in in 1990 or 91 it would have been way too heavy it would have
[01:44:42.260 --> 01:44:47.980]  been too much it's too CPU intensive and takes too much memory.
[01:44:47.980 --> 01:44:53.380]  It does bring back the the heady days of 90s sort of open doc stuff.
[01:44:53.380 --> 01:44:58.860]  Yeah exactly I've I thought the same thing that you know hey why do I have to keep going
[01:44:58.860 --> 01:45:04.260]  between different apps if I just want to take advantage of this apps thing right here like
[01:45:04.260 --> 01:45:09.640]  I just want to tweet this here's a URL I just want to tweet it out why do I have to copy
[01:45:09.640 --> 01:45:15.340]  and paste it and then switch to another Twitter app and then hit command and and open a tweet
[01:45:15.340 --> 01:45:20.260]  and do this thing and then switch back to go to where I was it's exactly that it's sort
[01:45:20.260 --> 01:45:26.700]  of like that the idea of open doc where you just here just go to share hit Twitter and
[01:45:26.700 --> 01:45:34.220]  a little view will open right here where you are but you know with this new safety thing
[01:45:34.220 --> 01:45:37.500]  where it's not actually injecting any code into your process.
[01:45:37.500 --> 01:45:41.060]  Which was kind of the problem with open well there's a lot of problems with open doc but.
[01:45:41.060 --> 01:45:45.660]  Well and open doc had problems I think conceptually where they they lost I think they lost the
[01:45:45.660 --> 01:45:49.860]  wheel by basing it on documents rather the fundamental thing was a document instead of
[01:45:49.860 --> 01:45:52.140]  an app.
[01:45:52.140 --> 01:45:55.340]  Well I think that they got caught up with what people were doing with computers in the
[01:45:55.340 --> 01:46:00.980]  90s where everybody was making documents you know it's new Excel files and new Word documents
[01:46:00.980 --> 01:46:05.060]  and Claris works documents and everybody was doing documents and emailing documents and
[01:46:05.060 --> 01:46:08.500]  so they thought well why don't we make documents the first class.
[01:46:08.500 --> 01:46:14.660]  It only made sense in the 90s I think I think long term the app is the fundamental metaphor
[01:46:14.660 --> 01:46:20.900]  in the system is great and I don't necessarily think that's true though like I so wait that
[01:46:20.900 --> 01:46:31.500]  let me back up that is inarguably true in our timeline to simplify it I think if computers
[01:46:31.500 --> 01:46:36.300]  had started with with documents being the first class item like from day one you always
[01:46:36.300 --> 01:46:40.100]  working in a document so rather than a command prompt on your Apple to where you'd run a
[01:46:40.100 --> 01:46:46.860]  program you had some kind of worksheet that as you type stuff would happen to the worksheet
[01:46:46.860 --> 01:46:52.380]  do you know what I mean I think I think you can grow an interesting computer platform
[01:46:52.380 --> 01:46:56.700]  based entirely around documents however but nobody is nobody's doing now and it was by
[01:46:56.700 --> 01:47:01.020]  the 90s is way too late to put the genie back in the bottle and reboot yeah and nobody pulled
[01:47:01.020 --> 01:47:07.340]  it off no no no definitely not but it is that you know and the man I remember I had a job
[01:47:07.340 --> 01:47:14.340]  this back when I was thought I was going to be a programmer college internship I got my
[01:47:14.340 --> 01:47:20.300]  third one it was at a Windows software developer here that did project management so I had
[01:47:20.300 --> 01:47:25.340]  I had to read the open doc spec oh god I'm sorry because I wanted to know if they should
[01:47:25.340 --> 01:47:29.220]  do it and they were already going to do object linking and embedding and I had to read the
[01:47:29.220 --> 01:47:35.180]  open doc spec and actually like try to understand it it was it made me it made me want to just
[01:47:35.180 --> 01:47:40.420]  jump out of window it's crazy yeah it was so hard to get your head wrapped around whereas
[01:47:40.420 --> 01:47:45.020]  you know even as an outsider you know not a sitting there in Xcode writing code it's
[01:47:45.020 --> 01:47:52.100]  like I can watch the extensions you know WWDC sessions and read the high levels docs and
[01:47:52.100 --> 01:47:56.100]  I get it I see exactly you know all right you just put it in a little bundle and a little
[01:47:56.100 --> 01:48:00.100]  rectangle will open up and you're drawing in that rectangle yeah it's just terrific
[01:48:00.100 --> 01:48:05.380]  that in situ editing is is brilliant and I hope a lot of people adopt it I really do
[01:48:05.380 --> 01:48:08.300]  yeah well and the other thing too I think see I think it's great because I think it's
[01:48:08.300 --> 01:48:13.380]  a very good conceptual model for developers and developers forget it I think it's really
[01:48:13.380 --> 01:48:17.500]  really easy it's almost like well why not do it it's the sort of thing you can you know
[01:48:17.500 --> 01:48:22.140]  you're working on a big complicated app you can take you need a break you can work on
[01:48:22.140 --> 01:48:27.060]  a little sharing extension yeah it's a nice little side project like the way Martin Scorsese
[01:48:27.060 --> 01:48:32.500]  always likes to after he directs a major motion picture he often afterwards directs like a
[01:48:32.500 --> 01:48:36.960]  commercial often for like companies in Europe and stuff like that because it's like a nice
[01:48:36.960 --> 01:48:42.500]  brain you'll go from a three-hour you know Wolf of Wall Street now we just want to do
[01:48:42.500 --> 01:48:49.040]  a 30-second the sorbet between courses yeah but I also think it's gonna be huge for users
[01:48:49.040 --> 01:48:55.220]  because there's so much more exposed I don't know what I really hope so I don't know what
[01:48:55.220 --> 01:48:59.900]  the percentage of Mac users who've ever used a services menu item is but I'll bet it's
[01:48:59.900 --> 01:49:04.900]  in the single digits even once let alone use them on a regular basis whereas that sharing
[01:49:04.900 --> 01:49:09.740]  button which they know from their iPhones yeah boy I think that's I think they're already
[01:49:09.740 --> 01:49:14.820]  using it and I think that now that they can do more I think that I think they it's really
[01:49:14.820 --> 01:49:20.940]  nicely exposed yeah in my opinion I think so too hopefully it takes off I'd be thrilled
[01:49:20.940 --> 01:49:25.460]  I think it's gonna be a big deal I'd be less thrilled if they tank napkins other than that
[01:49:25.460 --> 01:49:32.220]  I think it's a terrific idea and there's there's equal exposure on iOS right like you can have
[01:49:32.220 --> 01:49:39.380]  photo editing extensions on iOS which I think is gonna be huge yeah I think so too like
[01:49:39.380 --> 01:49:42.920]  the first well the first person who writes a Gotham filter is gonna get bought immediately
[01:49:42.920 --> 01:49:51.800]  by Pinterest it's the easiest acquisition strategy like an immediate billion-dollar
[01:49:51.800 --> 01:49:58.460]  payout for interest and just put it put it right into Michael Lops camera alright I gotta
[01:49:58.460 --> 01:50:05.300]  get going I gotta go to damn cool okay it's been fun man yeah guy English you guys can
[01:50:05.300 --> 01:50:16.040]  find guy on the Twitter's at GTE GTE yeah three low you gets you look at all the space
[01:50:16.040 --> 01:50:20.500]  you'll have left for text because you only have to use it well used to be used to be
[01:50:20.500 --> 01:50:25.220]  at kicking bear and I pulled a whammy and I got it down to three liners yeah well remember
[01:50:25.220 --> 01:50:30.480]  I registered at guy English for you you did yeah and I know I didn't why I did not post
[01:50:30.480 --> 01:50:35.900]  a single no I get everything to it kind of should I don't know I think I've got the the
[01:50:35.900 --> 01:50:40.580]  password somewhere I think I took it over at some point but yeah anyway yeah I did that
[01:50:40.580 --> 01:50:45.820]  at the chief that's a chieftain yeah that's very very candy and and handed it over to
[01:50:45.820 --> 01:50:52.080]  you like the friend that I had kicking bear.com you write once in a while but then the big
[01:50:52.080 --> 01:51:00.820]  thing is debug with you and Rene Ritchie yeah I think you know nerd listeners out there
[01:51:00.820 --> 01:51:08.380]  may enjoy debug if only because man we've got some great guests we're all of us are
[01:51:08.380 --> 01:51:16.460]  enjoying an incredible blossoming of cool nerd podcasts you know yeah but no not just
[01:51:16.460 --> 01:51:21.460]  because you're my guest on the show debug is really been one of my favorites and especially
[01:51:21.460 --> 01:51:26.240]  recently you guys are killing it thanks man I normally I do mirror from that kind of stuff
[01:51:26.240 --> 01:51:30.940]  but our guests are I don't know we've got some great guests yeah that's the cool thing
[01:51:30.940 --> 01:51:34.900]  about doing a podcast is you can you can you you can just put it all on the guests and
[01:51:34.900 --> 01:51:39.300]  and and be proud of it yeah anyway what's the best way to find it it's over at I'm more
[01:51:39.300 --> 01:51:44.940]  I'm more dot com slash debug or just yeah go to iTunes oh you got a you could just got
[01:51:44.940 --> 01:51:51.580]  a nice little tweet from Jean-Louis Gesset oh that guy I gotta get him on yeah yeah you
[01:51:51.580 --> 01:52:18.140]  know you got to step it up your guests think if it's not moles it's garbage
