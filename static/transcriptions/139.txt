[00:00.000 --> 00:07.040]  I always end up seeking back to figure out what part I missed where where the podcast started and then I realize
[00:07.560 --> 00:09.560]  It just starts
[00:11.080 --> 00:13.080]  That is how it goes Craig it is
[00:14.520 --> 00:17.040]  So we this is a great
[00:18.000 --> 00:20.000]  Thrill for me to be speaking to you
[00:20.860 --> 00:24.920]  Craig Federighi senior vice president of software engineering at
[00:27.280 --> 00:29.280]  What's the company
[00:29.280 --> 00:31.520]  Apple Apple Apple. Yes
[00:32.360 --> 00:34.080]  and
[00:34.080 --> 00:40.240]  We are talking on the occasion of the open sourcing of Swift which went live
[00:41.680 --> 00:43.680]  Last week what day was it last week?
[00:44.320 --> 00:48.840]  It was last Thursday, wasn't it? Yeah, it's it's there's been a huge
[00:49.400 --> 00:55.600]  Yeah, yeah, it's but it was it was incredibly exciting for us. Yeah, so we're speaking as we speak. It's about a week later
[00:55.600 --> 01:00.040]  So, how do you think this first week of Swift as an open source project has gone?
[01:00.640 --> 01:03.280]  Yeah, really really well. I mean the the level of
[01:04.240 --> 01:07.440]  Activity on on github is off the charts. I mean we
[01:08.240 --> 01:13.280]  We've had really high aspirations for Swift from the beginning but at every step it's been
[01:14.040 --> 01:20.800]  Pretty amazing for us how much bigger it's gone than we could have could have ever hoped and I think already on on github
[01:20.800 --> 01:23.440]  We're a more active project than I think all the other
[01:23.440 --> 01:25.720]  languages that are on github, which is
[01:26.440 --> 01:29.720]  Just just incredible for first week. I think over 60,000
[01:30.960 --> 01:32.800]  people that have
[01:32.800 --> 01:37.680]  taken a clone of the project so it's it's it's pretty amazing and
[01:38.320 --> 01:41.660]  The the team is just ecstatic over the whole thing
[01:41.920 --> 01:47.700]  Yeah, there's different ways for a big company, especially a big company to do a quote unquote open source project
[01:47.700 --> 01:54.920]  there's sort of like yes, technically it's open source, but it's really just sort of a zip file with a open source license and
[01:55.680 --> 01:58.800]  there it goes, you know have at it and then there's the
[01:59.640 --> 02:00.800]  actively
[02:00.800 --> 02:06.760]  engaging in a community manner with the outer world and I
[02:07.880 --> 02:10.880]  So when you guys announced that WWDC Swift would be open source
[02:10.880 --> 02:16.000]  I think there were some skeptics who thought maybe it was going to be a well technically it's open source and there it is but
[02:16.000 --> 02:18.840]  This is really like full throttle
[02:19.720 --> 02:21.960]  fully engaged with the the world outside
[02:22.640 --> 02:27.160]  Cupertino, yeah, I mean, it's funny. I guess there there always will be skeptics but
[02:28.360 --> 02:32.340]  Anyone who's been watching our team in the context of like the LLVM world
[02:33.480 --> 02:34.680]  clang
[02:34.680 --> 02:37.100]  LLDB and and our webkit team
[02:38.200 --> 02:40.200]  would see how how much
[02:40.680 --> 02:42.880]  developing in the open is in the
[02:42.880 --> 02:47.480]  the spirit of those teams and so the the Swift team has been
[02:48.040 --> 02:49.360]  among the most
[02:49.360 --> 02:55.920]  engaged with our developer community of any group in Apple even even prior to open sourcing in terms of from the
[02:56.120 --> 03:02.040]  first launch of our announcement of Swift 1.0 and the App Store, I mean at the WWDC and how much
[03:03.040 --> 03:10.080]  they were engaging with all the feedback that was coming in and modifying the language right up to to 1.0 and
[03:10.080 --> 03:17.480]  and then and then beyond and this is really an extension of how the only way they really have ever wanted to work
[03:18.120 --> 03:23.120]  and so yeah, they they are very excited to be working completely in the open and
[03:23.680 --> 03:26.800]  It really is a case where as you know all the features
[03:27.440 --> 03:29.440]  in Swift that will be
[03:29.860 --> 03:33.480]  announcing officially to the world at our next developer conference
[03:34.000 --> 03:34.600]  You know
[03:34.600 --> 03:40.080]  You can sort of see them unfold before your eyes and the time leading up to that as they're working on them in the open
[03:40.080 --> 03:43.240]  On github. Yeah, just like everything else Apple does
[03:44.440 --> 03:47.560]  Very very similar to everything else we do
[03:47.560 --> 03:48.040]  That's right
[03:48.040 --> 03:51.360]  The the thing that to me is most telling and I know that you know
[03:51.360 --> 03:54.880]  GitHub makes it easy to track all these changes and see how many people are involved
[03:54.880 --> 03:59.240]  but to me them if you just want a quick look at just how much this is a
[04:00.000 --> 04:01.720]  collaboration between
[04:01.720 --> 04:08.160]  The Swift team at Apple and the outside world. It's the Swift evolution mailing list
[04:09.600 --> 04:15.240]  Where you know you guys have been upfront about this right from Swift 1.0 in
[04:15.880 --> 04:18.520]  2014 that this is not a finished language
[04:18.520 --> 04:22.840]  We didn't you know, you didn't go and finish a language and here it is have a right
[04:23.000 --> 04:30.240]  it's you know, we're still working on this a lot of what we're gonna be working on is tell us what what you need and
[04:30.240 --> 04:37.880]  Here on the mailing list. There are people actively engaging and and employees from Apple, you know, Chris Lattner and the people on his team are
[04:39.040 --> 04:45.240]  Fully engaging with these ideas and proposals that are coming from outside the company already one week
[04:45.240 --> 04:48.160]  You know one week into it being an open source project. Oh, yeah
[04:48.160 --> 04:48.880]  I mean
[04:48.880 --> 04:56.320]  I think our team is is a really seasoned team in the world of developing languages and and we know that
[04:56.320 --> 05:00.600]  a language really can't be developed in a vacuum
[05:00.600 --> 05:07.060]  it's it is a product of how people use it and the problems that people are trying to solve and so
[05:07.860 --> 05:13.000]  We knew from the outset with Swift 1.0 that we could come up with the language that a first step
[05:13.000 --> 05:15.880]  You have to crystallize your basic ideas and have a starting point
[05:16.680 --> 05:18.680]  But we knew we needed feedback then
[05:19.280 --> 05:25.280]  To work toward the the language that that ultimately Swift has and has become and will become in the future
[05:25.280 --> 05:32.960]  But that we we needed to have this kind of open open dialogue and open sourcing is as you say just really
[05:34.080 --> 05:37.960]  accelerating and deepening the kind of feedback that that we're getting and so
[05:38.480 --> 05:40.680]  It's it's really energizing for us
[05:40.680 --> 05:45.340]  And I think it's really exciting for a lot of the developers in our community as well to be a part of it
[05:46.400 --> 05:52.320]  What are the other reasons to to go open source with with a new programming language?
[05:52.320 --> 05:57.600]  Well, you know when when we talked about it just briefly at WWDC
[05:57.600 --> 06:01.480]  I think we laid out the big ones which which are for us
[06:03.760 --> 06:09.240]  Swift is we think the primary programming language that developers
[06:09.920 --> 06:12.420]  Should be taught to programming in actually
[06:12.420 --> 06:16.360]  I mean if you're gonna learn computer science Swift is a fantastic learning language
[06:16.360 --> 06:22.920]  And if you're a developer who is going to invest a huge part of your career in
[06:23.680 --> 06:25.900]  mastering Swift and developing code in Swift
[06:25.900 --> 06:30.800]  You're gonna want the ability to use that code in every context possible
[06:30.800 --> 06:35.040]  And you're gonna want to use your skill in that language and all the environments in which you have to work to do your job
[06:35.080 --> 06:36.840]  so whether you're
[06:36.840 --> 06:38.840]  scripting your build system
[06:39.340 --> 06:40.640]  writing
[06:40.640 --> 06:42.120]  web services
[06:42.120 --> 06:44.360]  Or of course writing your mobile applications
[06:44.360 --> 06:51.040]  We want to make sure that that's you can invest in Swift in that way and know that it's going to be available to you
[06:51.640 --> 06:52.920]  everywhere and so
[06:52.920 --> 07:00.800]  We saw open sourcing as a as a critical element to make Swift reach its potential to be to be the language the major
[07:00.920 --> 07:02.600]  language for
[07:02.600 --> 07:07.240]  The next 20 years of programming in our industry. It's a really ambitious goal
[07:07.760 --> 07:10.200]  It is it is but I I think
[07:10.200 --> 07:15.540]  You know at every point along the way because this this has been our vision from before we
[07:16.340 --> 07:17.380]  first
[07:17.380 --> 07:20.600]  unleashed Swift on the world, but at every step actually
[07:21.340 --> 07:23.340]  the reaction has
[07:24.140 --> 07:29.420]  Really outdone our expectations. So maybe our goal isn't so outlandish
[07:30.780 --> 07:34.620]  Do you think that I would say that that for education purposes?
[07:34.620 --> 07:41.820]  it really has to be open source because there's really no way that a language is going to take take root as a teaching language if
[07:41.820 --> 07:43.820]  it's proprietary to
[07:45.180 --> 07:47.580]  Apple platform or any other, you know
[07:48.220 --> 07:51.220]  vendors platform right, you know, we had a lot of
[07:52.100 --> 07:58.620]  Universities who would teach a specialized mobile programming course or an iOS programming course and in that context, of course
[07:58.620 --> 08:07.660]  They teach Swift and Stanford has an outstanding course that's on iTunes you about programming in Swift to program on iOS
[08:08.060 --> 08:14.080]  But when it comes to bringing it into the core curriculum that every student in this the university has to take to let's say
[08:14.340 --> 08:21.100]  Learn computer science making it open source having it available to every student on whatever platform. They're going to use to do their work
[08:21.660 --> 08:26.060]  is is we think ultimately a huge enabler and
[08:26.060 --> 08:30.480]  And so many of the people we talked to pray the professor's wanted
[08:31.300 --> 08:33.300]  To use the language in these ways
[08:33.980 --> 08:35.780]  but
[08:35.780 --> 08:41.840]  They needed it to be open source for this to happen. And so we're really excited to follow through with them on this
[08:43.740 --> 08:48.060]  Why not open source it what what were the downsides that were debated
[08:49.020 --> 08:52.080]  Before you decide, you know made the decision to go open source with it
[08:53.220 --> 08:55.220]  You know, there really weren't
[08:55.220 --> 08:56.500]  the
[08:56.500 --> 08:58.500]  You know we of course
[08:58.620 --> 09:00.420]  Talked it over
[09:00.420 --> 09:02.180]  at length
[09:02.180 --> 09:07.180]  We had a tough time coming up with a significant reason not to do it. It was more a
[09:07.900 --> 09:11.700]  When question, you know is is it now and we knew after 1-0
[09:12.300 --> 09:19.800]  That that we weren't quite there that we wanted to get that first round of feedback begin to stabilize the definition of the language
[09:20.500 --> 09:23.440]  But as we got close to WWDC this last year
[09:23.440 --> 09:25.440]  We
[09:25.480 --> 09:30.080]  Realized we were where we needed to be to take a step that we knew was was going to happen
[09:30.080 --> 09:32.680]  it was going to be this year or it was going to be that the following year and
[09:33.220 --> 09:39.640]  And we realized we were where we needed to be. And so we we moved ahead and the hunger out there
[09:40.320 --> 09:43.880]  Was was so great. We thought let's let's do it now
[09:44.840 --> 09:47.640]  But but the downsides are really limited
[09:47.640 --> 09:55.040]  I mean, I think it's it's inevitable but positive that Swift will be used in all kinds of contexts outside of Apple
[09:55.040 --> 09:57.040]  That's that's kind of the point. So
[09:57.360 --> 09:59.520]  That's fine. It's clear
[09:59.520 --> 10:06.080]  we're gonna get a lot of people wanting to do things with the language that aren't directly related to
[10:07.040 --> 10:12.960]  Apple's line of business and that's okay, right? That's that's actually fine as well. So
[10:12.960 --> 10:17.900]  They're just there weren't a lot of downsides and and we think the upsides are tremendous
[10:20.520 --> 10:25.320]  One of the areas that I would I think it's definitely I see so much excitement about it already is
[10:25.640 --> 10:29.360]  In terms of being cross-platform is the use of Swift on servers
[10:29.480 --> 10:35.320]  Yes, and you know, a lot of that is certainly going to be Linux and you guys have already done the port to Linux
[10:36.360 --> 10:41.960]  That's right. And and that's that's an area where I feel like we I have no idea
[10:41.960 --> 10:45.120]  I feel like it's going to be used but I just it's like it's so early
[10:45.120 --> 10:46.800]  We don't know where that's going to be
[10:46.800 --> 10:51.760]  But do you do you see that happening that it's gonna be used for a lot of server-based development. That's really outside
[10:52.360 --> 10:58.280]  Apple's platforms. Oh totally. Yeah, I mean, you know from really the outset
[10:58.920 --> 11:04.760]  IBM for instance jumped all over Swift for building their their mobile apps and
[11:05.720 --> 11:10.560]  Almost immediately. They were coming back to us with we really want to use this on the server
[11:10.560 --> 11:12.560]  How can we how can we get this on the server?
[11:13.000 --> 11:19.880]  And of course with an Apple there's tremendous passion for Swift and our own iCloud team has been you know
[11:20.000 --> 11:23.860]  Completely chomping at the bit to be able to apply it in many and many of the things they do
[11:24.880 --> 11:31.160]  So I think it's it's gonna be the first among the first kind of breakout uses of Swift
[11:31.160 --> 11:34.560]  and of course these days so many mobile applications are
[11:34.560 --> 11:41.240]  Part mobile app part server code and in a lot of cases you you at the very least want to share your knowledge
[11:41.240 --> 11:47.280]  but very often you want to share parts of your code parts of your model layer some of your utility libraries you want to and
[11:47.480 --> 11:48.560]  having
[11:48.560 --> 11:53.040]  Swift enabling you to do that is going to be huge for a lot of our community
[11:53.360 --> 11:58.040]  Yeah, I can definitely see that and I that to me is sort of the building for the future
[11:58.040 --> 12:03.560]  Version are aspects of Swift versus say objective C
[12:03.560 --> 12:08.640]  which has roots from you know 20 or even 30 years ago, and yeah the
[12:09.320 --> 12:12.360]  The fact that the the cloud or whatever you want to call it
[12:12.360 --> 12:20.520]  But you know a client software running on a device talking to servers somewhere off on the internet is part of I would say
[12:20.520 --> 12:27.920]  Almost certainly the overwhelming majority of apps that are being written for for these platforms that having a language that will make sense in both
[12:27.920 --> 12:29.920]  ends of the communication
[12:30.080 --> 12:37.400]  It's huge well exactly exactly and you know if you if you look at where I think it is for a lot of developers
[12:37.960 --> 12:39.720]  prior to Swift
[12:39.720 --> 12:41.720]  They probably were using
[12:42.760 --> 12:47.920]  Objective C if they had high-performance code they had to write part of objective C is C
[12:47.920 --> 12:53.000]  And so they were dropping down into C to do some of the more optimized work which can be almost
[12:53.920 --> 12:57.480]  Another language there's a real continuum there within the environment
[12:58.040 --> 13:05.480]  they might have been using a scripting language for part of what they do and then they might be using a server-side language like Java and
[13:06.640 --> 13:09.960]  Swift is uniquely capable of spanning from
[13:10.560 --> 13:16.180]  Really easy and natural kind of scripting expressive uses. It's a great application programming language
[13:16.180 --> 13:22.980]  But it was also designed to be a great systems language and be really fast so that you can do C kind of high-performance work
[13:23.540 --> 13:31.260]  Without compromises and Swift and then it's gonna work in the cloud as well, so I think it's going to really
[13:31.860 --> 13:39.380]  Unify the environment for a lot of developers is that how would you describe a systems language because I this is this is right from
[13:39.380 --> 13:40.460]  the
[13:40.460 --> 13:43.660]  One of my notes here from the Swift programming language mm-hmm
[13:43.660 --> 13:49.440]  It says Swift is intended to be quote the first industrial quality systems programming language
[13:49.440 --> 13:55.960]  That is as expressive and enjoyable as a scripting language. It's designed to scale from hello world to an entire operating system
[13:56.340 --> 13:58.540]  What is a systems programming language?
[14:00.420 --> 14:05.460]  Well there there's there's some some low-level bits and and some some matters of
[14:06.860 --> 14:10.940]  Spirit I think and in terms of low-level bits Swift has a very
[14:10.940 --> 14:12.700]  very predictable
[14:12.700 --> 14:19.420]  Memory management model a very a very contained runtime if you look at traditional
[14:20.260 --> 14:22.420]  scripting languages or languages
[14:23.100 --> 14:24.700]  like Java
[14:24.700 --> 14:28.700]  There they run garbage collectors. You really can't control
[14:30.100 --> 14:37.260]  Memory in a specific way Swift builds on our arc technology that that first came to objective C
[14:37.260 --> 14:44.420]  To provide really high performance and really predictable and manageable memory management, which means that if you wanted to write
[14:45.500 --> 14:49.820]  Everything from an operating system kernel to a you know high performance graphics library
[14:50.300 --> 14:52.180]  You could do that without
[14:52.180 --> 14:57.700]  inheriting a huge per process memory footprint overhead and you see that when you see how
[14:58.260 --> 14:59.820]  Apple's
[14:59.820 --> 15:04.340]  OS and apps are able to run in a lower memory footprint
[15:04.340 --> 15:09.580]  And we're able to ship devices with different memory footprints than then some of our competitors who use
[15:10.340 --> 15:12.340]  Languages that don't have this characteristic
[15:12.500 --> 15:19.040]  But Swift is also designed so that when it can be fast. It's as fast as can be
[15:19.980 --> 15:23.380]  so we aren't taking the overhead of
[15:24.920 --> 15:28.500]  Dynamic dispatch for every call, but yet we can provide dynamism
[15:28.500 --> 15:35.580]  When when needed we can optimize if you use an array and in Swift
[15:35.780 --> 15:40.700]  we can be every bit as optimal and do auto vectorization and
[15:41.900 --> 15:43.340]  parallelization
[15:43.340 --> 15:49.340]  In ways that you would expect from optimized C code, but are very hard to do if you were trying to optimize
[15:50.420 --> 15:52.420]  Ruby or Python or
[15:52.420 --> 15:59.220]  Even an Objective-C, you know NS array built on top of the foundation classes and so you can go very very
[15:59.740 --> 16:05.700]  Low-level and get very predictable peak performance out of your hardware. Yeah, so in other words, it's
[16:06.220 --> 16:12.120]  It it at least compared. Let's just compare it to Objective-C that Objective-C. There's so many great things we could say about it
[16:12.220 --> 16:16.140]  It's served, you know Apple so incredibly
[16:16.140 --> 16:19.460]  Well, it still will for the foreseeable future in so many ways
[16:19.460 --> 16:22.900]  but yeah, there's this big but which is that sometimes you need to
[16:23.900 --> 16:27.340]  Let's say drop down into C or C++
[16:27.340 --> 16:34.380]  And now you're losing all of the stuff that you love about Objective-C because you need to drop down
[16:34.620 --> 16:41.600]  Temporarily for performance reasons and Swift you don't need to do that. You can write the high-performance code right in Swift
[16:42.140 --> 16:43.480]  That's right. I mean Swift
[16:43.480 --> 16:46.640]  I think one of when we first introduced Swift we we
[16:46.640 --> 16:53.440]  We said we were imagining a world where we took what we loved about Objective-C without carrying forward the baggage of C
[16:54.200 --> 16:57.160]  But what that meant is Swift has to replace
[16:57.880 --> 17:04.880]  C in its role in Objective-C programming and it does that really well while bringing all of these
[17:05.560 --> 17:07.560]  higher levels of abstraction
[17:07.720 --> 17:13.000]  And higher productivity programming techniques to writing that kind of high-performance systems code
[17:13.000 --> 17:16.460]  But also so great for for app code
[17:17.660 --> 17:19.220]  so
[17:19.220 --> 17:23.340]  One thing that Swift is not I mean and I think we've already covered this but it's not
[17:24.140 --> 17:30.940]  Objective-C with prettier better syntax and and it's the syntax of Objective-C that that
[17:31.580 --> 17:35.500]  People find off-putting at least at first and I know that you know
[17:35.700 --> 17:39.380]  That's a debate that that people who love Objective-C and have used it for decades
[17:39.380 --> 17:47.020]  You know, it's a never-ending argument. But yeah, at least at first even if you really really love Objective-C you
[17:47.300 --> 17:52.380]  It's I feel like you can't avoid the fact that at first it it looks weird. Uh-huh
[17:53.460 --> 17:57.020]  I'll admit I'm an Objective-C lover and I
[17:58.340 --> 18:05.280]  You know there were plenty of good debates internally about you know, should we have a small talk inspired syntax? Should we should we?
[18:05.280 --> 18:08.280]  Stick with something like Objective-C
[18:09.600 --> 18:11.600]  but but it is a
[18:12.520 --> 18:14.520]  in the end
[18:14.760 --> 18:19.320]  it can go either way and what we were able to retain in Swift are
[18:20.360 --> 18:22.480]  the the sort of literate nature of
[18:23.720 --> 18:28.460]  Apis that Objective-C enabled the readability of code with the labeled arguments
[18:29.120 --> 18:31.280]  And we brought all of that to Swift
[18:31.280 --> 18:37.280]  while at the same time having a syntax that is just much more concise and at this point with the the sort of
[18:37.480 --> 18:40.300]  evolution of people's expectations around programming languages
[18:40.760 --> 18:42.760]  Just much more natural for them
[18:43.320 --> 18:48.520]  Like is is part of the thinking there that in terms of the the small talk inspired
[18:49.320 --> 18:51.320]  dynamic runtime that
[18:53.200 --> 18:56.840]  You didn't need a new language to do that because you already have Objective-C and
[18:56.840 --> 19:03.120]  and that you can go it, you know that for the future for the next 20 years that that sort of
[19:04.200 --> 19:11.740]  That sort of model of looking at frameworks and programming languages isn't the best way to go from here going forward
[19:12.240 --> 19:19.240]  No, I would I would really separate. I know it's I would separate the the syntax from some of the underlying
[19:20.360 --> 19:23.800]  aspects of the runtime and the programming model
[19:23.800 --> 19:30.120]  Swift, you know, some of my favorite features from Objective-C
[19:30.880 --> 19:32.880]  are things like
[19:33.000 --> 19:34.920]  protocols and
[19:34.920 --> 19:37.440]  categories which which in Swift are called
[19:38.800 --> 19:40.800]  extensions and
[19:42.000 --> 19:44.400]  Those literate APIs as well as
[19:45.520 --> 19:47.440]  first class
[19:47.440 --> 19:51.840]  Classes with with class methods, you know all of these things that were so important for us to build
[19:51.840 --> 19:53.840]  great APIs
[19:54.320 --> 20:00.720]  And great extensible frameworks were brought to Swift along with things like
[20:01.640 --> 20:03.640]  labeled arguments and
[20:04.600 --> 20:06.600]  Slowly we've also been bringing back
[20:07.400 --> 20:12.960]  much of the dynamism now, there's some things that are possible in Objective-C and most the dynamism that
[20:12.960 --> 20:20.960]  You you really want is the ability to figure out what class is this really to be able to cast the class dynamically to a particular
[20:22.480 --> 20:23.640]  Protocol
[20:23.640 --> 20:29.800]  To be able to do a kind of response to select or perform select or check. All of these things are possible in Swift today
[20:30.560 --> 20:37.120]  And there's some other things that aren't but that certainly we consider important to ultimately bring bring to the language. So
[20:37.720 --> 20:41.000]  This thing about a dynamic programming model is is still
[20:41.000 --> 20:43.800]  Very important to us now
[20:43.800 --> 20:48.480]  There's some very unsafe things that people do in Objective-C and I've you know been guilty of this myself
[20:48.520 --> 20:52.040]  where you walk the objective-c runtime and hack the method table and
[20:52.440 --> 20:53.960]  And that's cool
[20:53.960 --> 20:59.240]  But it is it is highly unsafe and doesn't lead to very maintainable scalable large programs some of those techniques
[20:59.240 --> 21:02.600]  But the vast vast majority of what makes Objective-C great and dynamic
[21:02.960 --> 21:09.160]  Is is part of either part of Swift now or certainly part of our ongoing ambition for the language
[21:09.160 --> 21:13.880]  But the thing we didn't want to bring from Objective-C is that in Objective-C
[21:14.320 --> 21:18.960]  You're paying the overhead of that dynamism all the time
[21:19.760 --> 21:20.720]  a you know
[21:20.720 --> 21:26.800]  You're trying to use an array or some some class and you've got the compiler with both hands tied behind its back in terms of
[21:26.920 --> 21:30.440]  opportunities for optimization and then you're forcing the
[21:30.800 --> 21:36.640]  Developer to then modify the way they've written their code to maybe drop down to C for something where performance matters
[21:36.640 --> 21:41.560]  For Swift because it's safer has more type information
[21:41.560 --> 21:45.040]  It gives the compiler what it needs to optimize when it can
[21:45.520 --> 21:50.980]  But that that alone doesn't stand in the way of all the in my opinion all the dynamism that matters
[21:51.840 --> 21:57.520]  In in layman's terms and I'm you know, probably way more on the layman side
[21:57.520 --> 22:01.200]  it's been a long time since I've programmed regularly, but
[22:01.200 --> 22:08.960]  It you know for people listening I think that the big difference is that with with Objective-C
[22:10.080 --> 22:13.500]  What you mean what and you know people might not even know what a runtime is
[22:13.500 --> 22:18.120]  But more or less what it means is you compile the app it starts running and a lot of the stuff gets decided
[22:19.080 --> 22:22.620]  Within the app while it's running and with Swift
[22:23.080 --> 22:27.920]  By by doing these things at compile time and knowing more of the type information
[22:27.920 --> 22:34.440]  And forcing you to to to be a little more specific about the type information upfront it it
[22:34.960 --> 22:40.160]  It enables the compiler to do more efficient things before the app is even
[22:40.600 --> 22:47.200]  Running because it's it's happening at the time that the app is compiled. That's right. That's right. And then it permits all kinds of
[22:48.240 --> 22:53.000]  optimizations because maybe if if the compiler can determine ahead of time that
[22:53.760 --> 22:55.360]  absolutely this
[22:55.360 --> 22:59.560]  Object you're about to message is of a certain type and we know
[23:00.160 --> 23:05.720]  It's you've done whole module optimization and we know what the result of that what that method is
[23:06.280 --> 23:11.000]  Sometimes the compiler could even inline the implementation and even involve the overhead of a function call
[23:11.640 --> 23:18.480]  So let alone a dynamic method dispatch and so you really that's that's part of how you can get these incredible
[23:18.480 --> 23:21.240]  You know hand optimized see kinds of performance
[23:22.240 --> 23:24.060]  numbers out of
[23:24.060 --> 23:28.460]  What looks what what you get to write as as very high level?
[23:29.280 --> 23:30.240]  code
[23:30.240 --> 23:36.520]  So so Swift I think has a really excellent balance there, but the key is we still have a runtime where you can
[23:38.000 --> 23:44.440]  Look at your classes and and introspect them and and there's there's more of more of that coming
[23:47.160 --> 23:48.640]  Which
[23:48.640 --> 23:54.920]  Which partly is is on an open roadmap and partly is you know and in terms of the frameworks for the operating system?
[23:54.920 --> 23:59.600]  Obviously is the sort of thing that you're not going to be able to talk about in advance because that's not the stuff that that's open
[23:59.600 --> 24:00.880]  source
[24:00.880 --> 24:04.320]  That's right. I mean some of it honestly you will you will see us
[24:06.120 --> 24:13.160]  Bringing up over the course of the coming months in the context of the open source project because certain things that that our team is
[24:14.760 --> 24:16.640]  Will take on
[24:16.640 --> 24:17.960]  will
[24:17.960 --> 24:22.720]  Will bring them forward as proposals to the open source community and then you'll see us start to implement them
[24:22.720 --> 24:27.880]  So I don't want to I don't want to jump the gun and pre-announce everything that the team is is thinking
[24:28.120 --> 24:30.120]  but as soon as they
[24:30.260 --> 24:34.400]  You know and they've already pre announced a bunch of the things and you know big big part of the focus
[24:34.400 --> 24:41.160]  We wanted to make sure was clear right out of the gates with Swift was that the goal for Swift 3 was
[24:41.720 --> 24:44.240]  Really to stabilize the binary interface
[24:44.240 --> 24:50.880]  And to refine the API's and finalize our API guidelines and all of those things because we want
[24:51.120 --> 24:55.040]  I think I think it's the the next important step is to really
[24:55.840 --> 25:01.240]  Stabilize the language and the environment for for our community and that's a that's a big task
[25:01.240 --> 25:05.100]  One of the things that's been so great about Objective-C is it has
[25:06.040 --> 25:08.040]  this great
[25:08.040 --> 25:15.800]  Stability where that have enabled us to write frameworks with binary compatible interfaces release over release of release something that that
[25:15.800 --> 25:17.800]  You know languages like C++
[25:17.880 --> 25:19.560]  Really couldn't get right
[25:19.560 --> 25:20.880]  and
[25:20.880 --> 25:26.880]  We absolutely need to bring that to to Swift. So we've we brought forward some of those goals
[25:27.880 --> 25:30.040]  But there are other things of course that will be
[25:30.920 --> 25:32.920]  Added to the 3-0
[25:33.480 --> 25:35.480]  Ambitions as time goes on over the coming months
[25:35.480 --> 25:37.480]  One
[25:37.560 --> 25:44.360]  Of the complaints I've seen and and and part of this is just it's impossible to avoid I think with with how early in
[25:44.360 --> 25:47.520]  Its evolution Swift was unveiled to the world
[25:48.480 --> 25:53.560]  but that I've what I've seen from developer friends and and just commentary on the internet is that it's
[25:53.960 --> 25:58.560]  Hard right now to write a large-scale application in Swift
[25:58.560 --> 26:03.640]  Apple Apple has more people working on
[26:04.080 --> 26:08.320]  Cocoa apps than any other company in the world for obvious reasons, right?
[26:08.320 --> 26:13.920]  you know how has the feedback from the internal developers the people, you know that the
[26:14.560 --> 26:19.640]  People who work for you the engineers who work for you with extensive experience shipping user facing apps
[26:20.320 --> 26:25.880]  Shaped the direction of Swift from 1.0 to what's what's on a roadmap for 3.0. Yeah
[26:25.880 --> 26:33.440]  Well, I mean, of course their elements we've all all types here within Apple right just like the there. There are people that are
[26:37.000 --> 26:39.000]  Like in the external community
[26:39.320 --> 26:45.200]  Objective, you know, they start out with the I love objective C. I don't want to change to okay. Hold on
[26:45.200 --> 26:49.200]  Maybe there's something to this Swift thing to let me give it a try to oh my god
[26:49.200 --> 26:52.640]  I love it. And so they've we've we've gone through all the phases
[26:53.920 --> 26:55.200]  internally
[26:55.200 --> 26:59.240]  you know, we've had some really great adoption by teams like
[26:59.760 --> 27:04.040]  that the team that does the dock and window management on OS 10 who
[27:05.200 --> 27:06.480]  converted
[27:06.480 --> 27:13.160]  implemented all their new features for El Capitan in in Swift and started mass converting all of their code and
[27:13.580 --> 27:17.600]  Say that they just couldn't imagine going back and that they're they're more productive with it
[27:17.760 --> 27:21.520]  part part of what our internal teams need to deal with though, is that
[27:22.320 --> 27:24.320]  They're working on
[27:24.320 --> 27:27.840]  Let's say the current version of Swift 2.0
[27:28.400 --> 27:33.640]  while it's not done yet, and so it's it's I mean while it's not even
[27:34.400 --> 27:36.440]  WWDC level done yet, right and so
[27:36.960 --> 27:40.160]  and they're working on the
[27:40.920 --> 27:44.720]  Interfaces in terms of our internal frameworks that haven't been modernized for Swift
[27:45.240 --> 27:50.240]  And so it can be you know, they they get it rough. They got a they got to really love it to
[27:50.240 --> 27:56.360]  To make that leap because they're working on a very very bleeding edge environment when we use it internally
[27:57.400 --> 28:01.040]  Thankfully with with Swift 2.0 now, you know well out the door
[28:01.400 --> 28:05.680]  that's that's stabilized things a good bit and and they're really open to it, but
[28:06.760 --> 28:11.200]  There's there's been just a lot of feedback and a lot of it has helped
[28:12.080 --> 28:14.080]  with the impedance
[28:14.080 --> 28:22.180]  Making sure the impedance between Objective-C and Swift is is absolutely minimized because of course we have and will continue to have
[28:22.820 --> 28:24.820]  And continue to continue writing more
[28:25.100 --> 28:32.260]  Objective-C code and so the ability of Swift and Objective-C a code to work together completely
[28:33.180 --> 28:37.060]  Naturally is is a huge focus and you know a bunch of things like
[28:38.080 --> 28:41.580]  generic collections support for for lightweight generics and Objective-C
[28:41.580 --> 28:45.220]  we're you know, big pain point internally and
[28:46.260 --> 28:51.800]  Something that we fixed in the language and is now great for all of our all of our app developers externally
[28:52.700 --> 28:54.340]  so
[28:54.340 --> 28:55.540]  it's
[28:55.540 --> 29:00.020]  It's been a it's been a not dissimilar road for us internally to to what you see outside
[29:00.340 --> 29:07.340]  But in terms of Swift and and and writing big apps, it's certainly the case that when Swift 1.0 came out, you know
[29:07.340 --> 29:13.620]  Heck didn't we didn't support incremental compilation and in the very first update and so that was that was gonna be a limiting factor for
[29:13.940 --> 29:21.620]  Productivity for for people that had big apps. A lot of that stuff has changed and then in 2.0 having a good error handling model
[29:22.420 --> 29:27.300]  Having availability checks so you could span API versions these sorts of things
[29:27.660 --> 29:32.440]  I think I've really addressed the vast majority of the pain points that
[29:32.440 --> 29:39.720]  that we were experiencing that I think the community was experiencing about writing larger apps and so much about Swift is actually
[29:40.360 --> 29:42.360]  inherently better for building
[29:42.760 --> 29:44.200]  big apps
[29:44.200 --> 29:46.200]  Because it makes it
[29:47.080 --> 29:52.320]  Handles handles modules and namespaces in a way more naturally an Objective-C
[29:52.320 --> 29:56.960]  It makes the API contracts a little more clear the code more maintainable. So
[29:56.960 --> 30:05.320]  So we're very comfortable Objective-C's namespace management was more or less. Let's just all agree to put unique initials
[30:06.560 --> 30:12.200]  Right that it's yeah, it's amazing. That's taken us this far. But yes. Yes, that is that's basically been the answer
[30:13.000 --> 30:17.280]  So yes, so exactly it is, you know, I don't think I don't think
[30:17.880 --> 30:21.460]  Maybe the bar wasn't that high exactly. We we have vaulted over it
[30:21.460 --> 30:26.900]  How do you manage as the you know chief mofo in charge of all this? How do you manage?
[30:26.900 --> 30:31.820]  how do you manage the enthusiasm that you clearly have for Swift and and the
[30:31.900 --> 30:37.780]  What to me seems to like a sincere belief that Swift is the way forward with the necessary?
[30:38.260 --> 30:41.020]  conservativeness that you need, you know so that
[30:41.740 --> 30:47.020]  There still has to be a lot of Objective-C written like how aggressive can you be about putting teams on?
[30:47.320 --> 30:49.320]  Sure, go ahead and do that in Swift
[30:49.320 --> 30:53.320]  You know, it's it's it's really I mean people here are
[30:54.320 --> 30:58.520]  Idealistic yet really pragmatic and I think you see that as a as an Apple
[30:58.960 --> 31:04.000]  Characteristic in many many elements of what we what we do and so
[31:04.800 --> 31:11.640]  Teams know with the nature of what we're trying to get done in their area any given year the nature of their code base
[31:12.560 --> 31:14.560]  whether Swift is
[31:15.360 --> 31:18.360]  The right answer for them or where it's the right answer
[31:18.360 --> 31:25.240]  Even teams where for one reason or the other they can't jump right on Objective-C or rather
[31:25.520 --> 31:27.640]  Objective-C conversion to Swift now
[31:28.880 --> 31:32.160]  They then use Swift heavily for writing all their unit tests
[31:32.960 --> 31:39.840]  Which is great because then at least as they're introducing new API's they're experiencing their own API's in Swift
[31:41.680 --> 31:45.560]  And and living on you know, sort of sort of eating their own dog food in that regard
[31:45.560 --> 31:50.020]  we do have some constraints internally which which we're addressing but because
[31:51.360 --> 31:53.360]  we I mean, it's a it's a
[31:53.640 --> 31:59.320]  maybe maybe there's something in our closet a little bit, but we still support running 32-bit apps on the Mac and
[32:00.040 --> 32:02.040]  the 32-bit runtime
[32:02.520 --> 32:04.520]  doesn't actually support Swift right now and
[32:05.360 --> 32:08.360]  So what that means is if we've implemented a framework
[32:09.040 --> 32:11.520]  That's available to 32-bit code
[32:11.520 --> 32:15.920]  We actually can't write it in Swift and
[32:17.680 --> 32:23.120]  If that code if that framework is used across iOS and OS 10 as many of our frameworks are
[32:23.480 --> 32:26.160]  That introduces a little stumbling block as well. So
[32:26.960 --> 32:32.320]  You know teams recognize what's practical and what's not practical and find ways to use Swift wherever they can
[32:33.120 --> 32:36.000]  There's no no shortage of enthusiasm. I
[32:37.680 --> 32:40.240]  This has been so geeky and
[32:40.240 --> 32:42.240]  So fun. Sorry about that
[32:43.040 --> 32:49.480]  In the best possible way. I really enjoyed I loved I saw you did a whole round of interviews last week
[32:49.480 --> 32:51.480]  And I read them all and it was great
[32:51.480 --> 32:54.320]  And I didn't want to cover the same ground and I don't think we did
[32:54.320 --> 33:00.360]  I think this was this is truly truly eye-opening to me and I really I certainly appreciate your time, but I really appreciate the
[33:01.120 --> 33:03.540]  Openness that that you've had here
[33:03.540 --> 33:08.000]  Is there anything else you want to say before before we wrap up the segment anything else you wanted to talk about with Swift?
[33:08.000 --> 33:10.560]  I just want to say how
[33:11.640 --> 33:16.400]  You know to the world or at least the subset of the world that listens to your podcast
[33:16.400 --> 33:21.640]  Which must be most of them that how how proud I am of the team that's made Swift possible
[33:22.320 --> 33:24.160]  You know, I mean, of course, there's Chris Latner
[33:24.160 --> 33:28.520]  But he's part of an incredible team with with folks like Ted Kremenek and Doug Gregor
[33:29.120 --> 33:34.600]  And even you know people Swift is while we have our incredible compiler team
[33:34.600 --> 33:40.840]  We've also got people who have been writing deep frameworks and apps with an Apple
[33:41.680 --> 33:45.960]  For for in some cases since the beginning of next step
[33:45.960 --> 33:52.740]  I mean people like Ali Ozer who you may know from his talks at WWDC has been so vital in shaping
[33:53.400 --> 33:58.320]  the language and how the language fits our frameworks and fits the needs of our developers and I'm just
[33:58.320 --> 34:04.400]  so thrilled with the work that all of them do and the passion that they put into making Swift a success and I
[34:04.560 --> 34:10.520]  Just want to get that out there for everyone because we're and and they're they're you know hundreds hundreds more behind them
[34:10.840 --> 34:13.200]  It's been an incredible effort by our team
[34:14.800 --> 34:21.080]  Would you agree with this I I think that Apple is in a unique position to if Swift
[34:21.080 --> 34:27.760]  It achieves what you guys have set out to do which is to make it like the default language that people might learn to program
[34:27.760 --> 34:29.760]  on for the next few decades
[34:30.040 --> 34:37.240]  Apple's in a unique position to make that happen because you have these platforms especially iOS, but the Mac the watch
[34:38.240 --> 34:40.900]  Anything else that might be coming in the future TV or TV?
[34:44.320 --> 34:46.320]  That
[34:46.320 --> 34:51.040]  It are so popular and are such a draw that they've made objective C
[34:51.280 --> 34:56.880]  You know like the second or third most popular programming language on some of these you know the lists of yeah
[34:56.880 --> 35:01.940]  What books people buy which I think to someone like you who's been you know was started in the next days
[35:01.940 --> 35:07.640]  You know if you would have found out that in the year 2015 objective C is the second most popular language
[35:07.640 --> 35:09.760]  You'd be like what I wouldn't have believed it
[35:09.760 --> 35:15.880]  Right a language that there's some initial reluctance of people to you know to get on board with now
[35:15.880 --> 35:22.360]  There's this language that is so approachable and and really almost has like at a syntax level
[35:22.600 --> 35:27.600]  You know and when you're talking about like hello world type stuff really almost looks like pure pseudocode
[35:27.960 --> 35:32.880]  Yeah, that Apple is in the unique position where the draw is there with the platforms
[35:33.680 --> 35:37.320]  To really really make this explode in popularity
[35:39.080 --> 35:42.320]  Yeah, I mean I couldn't couldn't say it any better I I think
[35:42.320 --> 35:49.960]  I think we we when we created Swift we while we wanted it of course to be a great language
[35:49.960 --> 35:53.340]  We also from the outset wanted it to be a great language for
[35:54.000 --> 36:01.220]  For our platforms and the fact that it and embody the lessons that that we learned from creating
[36:02.080 --> 36:05.800]  so many deep frameworks and great apps over so many years and
[36:06.540 --> 36:10.160]  What that's meant is on day one Swift was?
[36:10.160 --> 36:14.440]  What it wasn't a restart for the community it wasn't a hey well
[36:14.440 --> 36:16.280]  Let me learn a whole new set of frameworks
[36:16.280 --> 36:18.540]  Let me wait for Apple to create a whole new set of frameworks
[36:18.920 --> 36:23.360]  Swift has been this this automatic transition for people who wanted to
[36:23.680 --> 36:28.200]  Maybe who are new to our platform and want to get started the whole world was open to them on our platform there
[36:28.200 --> 36:31.080]  And I think that's been so huge to driving
[36:31.680 --> 36:36.900]  The energy around it and then others have been drawn in just by the greatness of Swift as it is
[36:36.900 --> 36:40.520]  I mean it's amazing these Swift language conferences where people talking about different
[36:41.120 --> 36:47.440]  Functional programming paradigms and Swift and all these different things you can do with the language just based on what an amazing new language
[36:47.440 --> 36:50.200]  it is so you bring those two communities together and
[36:50.920 --> 36:52.920]  It's it's magic right now
[36:53.800 --> 36:57.680]  Thank you so much Craig. I really appreciate the time
[36:58.400 --> 37:02.640]  Yeah, thank you. John's honor to speak with you, so thank you so much
[37:02.640 --> 37:05.760]  Where's Craig did I miss him?
[37:08.920 --> 37:11.820]  You know what since that ran as the first segment
[37:11.820 --> 37:16.240]  I might as well just jump right into a sponsor read which I was
[37:16.720 --> 37:20.000]  Definitely not going to do in the middle of talking to Craig Federighi
[37:21.320 --> 37:24.080]  He totally should have he would have just sat there patiently I
[37:25.680 --> 37:27.680]  Feel like I could have done anything he was
[37:27.680 --> 37:34.240]  Incredibly gracious. It was absolutely. I mean I expected him to be nice, but he's you know very nice
[37:36.000 --> 37:38.440]  Let me tell you about our good friends at
[37:39.240 --> 37:45.040]  Casper you guys know Casper. They're the company whose URL I frequently get wrong, and I won't today
[37:45.880 --> 37:47.720]  these guys make
[37:47.720 --> 37:51.360]  Obsessively engineered mattresses, and they sell them at incredibly fair prices
[37:52.400 --> 37:56.400]  Just the right sink just the right bounce. You don't have to sit there and go through their website and pick
[37:56.400 --> 38:01.640]  Three different types of mattresses. Do you want Springs? Do you want memory foam? Do you want?
[38:02.320 --> 38:05.040]  Latex foam now these guys are mattress experts
[38:05.040 --> 38:11.000]  They're like the apple of mattresses where they figured it out themselves, and they sell one type of mattress. It's their own custom
[38:11.960 --> 38:15.800]  Blend of latex foam and memory foam that has just the right sink just the right bounce
[38:17.360 --> 38:19.680]  So you don't worry about that all you do is pick what size
[38:20.520 --> 38:22.640]  What size you want you want? Do you want to do?
[38:22.640 --> 38:25.280]  What do you want you want a queen size you want king size you want a twin size?
[38:25.280 --> 38:28.640]  Whatever you need as you do you go to the website you order it
[38:29.000 --> 38:32.800]  comes to your house in a little box put it in a room where you want it you open it up and it makes a
[38:33.880 --> 38:39.000]  Noise, and it just soaks up the air and there it is now you say I don't want to buy a mattress without trying it
[38:39.000 --> 38:41.760]  It's risk-free you get a hundred days
[38:42.200 --> 38:45.760]  To try sleeping on this on your actual bed in your actual house hundred days
[38:45.760 --> 38:49.760]  And if you don't like it, it's painless return you just go to their website
[38:49.760 --> 38:51.840]  Tell them you want you want to send it back
[38:51.840 --> 38:55.440]  They'll take care of they'll send somebody to your house and get this mattress out of your house
[38:56.560 --> 38:59.320]  Couldn't be easier. There's no hard sell if you decide to send it back
[39:00.600 --> 39:02.160]  Could not be easier mattresses
[39:02.160 --> 39:07.060]  They're made in America and the prices are unbelievable 500 bucks for a twin size mattress up to
[39:07.240 --> 39:12.080]  950 for a king size mattress if you've shopped for a premium king size mattress in the last few years
[39:12.360 --> 39:14.560]  You know how great a price point that is
[39:14.560 --> 39:20.400]  I think it's fair to say that that's about half the price that you would pay for a premium mattress at like a
[39:20.400 --> 39:25.440]  Retail mattress store. So really really great could not be easier. You don't have to go to the store
[39:25.440 --> 39:28.920]  You don't have to get this mattress home. You don't have to wait. It's it couldn't be easier
[39:29.520 --> 39:32.000]  Where do you go to find out more and let me get this right?
[39:32.640 --> 39:34.280]  casper.com
[39:34.280 --> 39:35.520]  slash
[39:35.520 --> 39:36.800]  talk show
[39:36.800 --> 39:38.080]  casper.com
[39:38.080 --> 39:43.200]  talk show if you want to get a mattress and talk about great holiday gift ideas boy buying somebody a mattress is
[39:43.400 --> 39:48.960]  About as good as it gets put one under the Christmas tree use that URL and you will save 50 bucks off
[39:48.960 --> 39:55.200]  Any of those prices I just told you about so go get your kids new mattresses for Christmas at casper.com
[39:57.920 --> 40:03.080]  So here's the deal so people are probably wondering how did Craig Federighi end up on the talk show and
[40:04.080 --> 40:08.600]  what happened was Apple got in touch with me when they started doing the
[40:10.080 --> 40:12.800]  I guess it was a couple days actually before
[40:13.480 --> 40:17.320]  Swift the open-source thing was actually announced and when they started reaching out to the press
[40:17.320 --> 40:21.800]  They asked whether I'd be interested in having him on the podcast and I was like, yeah
[40:23.640 --> 40:28.120]  Just said let me check. Let me check my schedule. I don't know. We might moltz might be on that weekend
[40:28.120 --> 40:32.640]  I can't bump him. I was like, hell yeah, and so
[40:34.120 --> 40:40.200]  No real ground rules, you know, it was very similar to when I Phil Schuler was on the live show back at WWDC
[40:40.200 --> 40:43.400]  It wasn't like they they wanted questions in advance or anything like that
[40:43.400 --> 40:47.440]  Their only request was, you know that it'd be limited to you know, somewhere around 20 minutes
[40:47.440 --> 40:51.680]  So I think I think the fact that we went about 30 or 35 minutes was probably pretty good
[40:52.080 --> 40:55.840]  You've learned a 2x multiply and multiplier is acceptable in their time limits
[40:57.120 --> 41:02.560]  Well, I did I was absolutely watching the clock while we talked and it felt like when we were rolling up around 20
[41:02.560 --> 41:07.600]  It really felt like he was having a good time. He was very comfortable and I think that was definitely
[41:07.600 --> 41:09.760]  You know Apple PR's concern would be you know
[41:09.760 --> 41:14.920]  They want to limit his exposure in case it was not comfortable, which I think is reasonable
[41:17.640 --> 41:21.400]  Yeah, I wonder if they would have cut you off like not that you want to run that experiment but
[41:22.400 --> 41:27.120]  I said, you know, we got to wrap this up or yeah more questions probably
[41:28.160 --> 41:32.520]  Because you know Bill Evans from Apple PR was was listening in it was there
[41:33.400 --> 41:37.000]  So I I would suspect that if I went nuts and just kept him hanging
[41:37.000 --> 41:39.840]  He probably would have texted me or something like that
[41:39.840 --> 41:42.400]  There's like a hey, come on would have been friendly
[41:43.400 --> 41:46.720]  Yeah, we're just talking about open-sourcing Swift. I don't know how bad it could get right?
[41:46.720 --> 41:51.120]  You're just talking about programming right a couple of nerds having a conversation. Yeah
[41:51.640 --> 41:56.320]  Well, I'll tell you I would love to hear your thoughts on the interview because and this is really, you know
[41:56.320 --> 41:59.440]  I'm telling you right now you were my is this the right term?
[41:59.440 --> 42:04.240]  You were my spirit animal going into the interview. I thought okay. I've only got 20 or 30 minutes
[42:04.240 --> 42:06.240]  Okay, I've only got 20 or 30 minutes
[42:06.560 --> 42:13.600]  In my mind if I if if I can make Syracuse a half happy with this interview, then I'll consider my job. Well done
[42:14.320 --> 42:16.080]  But that type of interview is tough
[42:16.080 --> 42:21.720]  I think because so you've got Craig making the rounds to the tech press to talk about open-sourcing Swift, you know
[42:22.040 --> 42:24.040]  essentially what his job is
[42:25.720 --> 42:30.800]  Doing that press tour to it's to tell everyone how great it is that Apple's doing this thing, right?
[42:30.800 --> 42:35.680]  Well twofold, I would say twofold first. It's to tell everybody how great Swift is
[42:35.680 --> 42:40.480]  And then second is how great it is that they're making it open source, right?
[42:40.480 --> 42:46.680]  But like this his job on that press tour is not to do what I think a lot of people might want out of an interview
[42:47.760 --> 42:51.680]  whether it be podcast or text which is especially programmers and
[42:51.880 --> 42:57.040]  especially the direction that you took your interview with Craig getting more technical and everything is people want to have
[42:57.040 --> 43:02.400]  Not in a mean way, but in a sort of usenet old-style way an argument about programming
[43:03.200 --> 43:09.640]  with a guy who is in charge of a really big platform that a lot of people program for like that not like I'm like
[43:09.640 --> 43:10.400]  It's not like a mean one
[43:10.400 --> 43:15.560]  But you want to debate whether I don't know what you want to you just want to talk to the guy who's in charge now
[43:15.560 --> 43:17.560]  finally, I get to sort of
[43:17.600 --> 43:25.600]  You know complain about square brackets or tabs versus spaces or my pet peeve in Swift or the App Store or whatever
[43:25.600 --> 43:32.560]  You know I mean like and I think that's more pronounced with Apple people because Apple has in the past tended not to make
[43:32.960 --> 43:36.720]  the important decision-makers especially the important technical people
[43:37.320 --> 43:42.120]  available to the public in any way so there was no other venue for you to
[43:42.880 --> 43:44.760]  You know air your grievances
[43:44.760 --> 43:50.080]  It's like you got to talk to the people who were the most polished in the highest level and if your concern was about
[43:50.080 --> 43:56.000]  Some minor feature of some framework or a DPI and you couldn't corner someone in a hallway
[43:56.280 --> 43:58.280]  WWDC there was no venue for that so I think
[43:58.800 --> 44:02.080]  I mean that's changing now as you could discussed in the interview
[44:02.080 --> 44:08.520]  But a lot of people might go into this thinking that they're gonna hear like they want it to be more adversarial
[44:08.520 --> 44:12.760]  But like it's I think I think it's impossible to be adversarial with Craig because he's the nicest person in the universe
[44:12.840 --> 44:17.400]  And if he ever yells at people in meetings you would never know it from seeing anything
[44:17.400 --> 44:19.400]  he doesn't felt like he seems just like I
[44:19.400 --> 44:21.400]  a super nice guy
[44:21.440 --> 44:25.600]  Enthusiastic and upbeat and positive all the time. So you're not gonna have that with him and B
[44:25.600 --> 44:27.040]  That's not the purpose of the press tour
[44:27.040 --> 44:31.960]  So it's a waste of time for you to do that you use that time much more valuable to engage in
[44:32.960 --> 44:36.480]  Interesting conversation that's still on topic and I think you did that
[44:36.480 --> 44:36.920]  Yeah
[44:36.920 --> 44:41.000]  It's the same way I approached the interview with Schiller where it's there were definitely questions that in theory
[44:41.000 --> 44:45.800]  I would like to ask like if I could get them on the stand under oath and make them answer questions
[44:45.800 --> 44:49.160]  There are very interesting questions that I would like to ask
[44:49.560 --> 44:54.920]  That if I did ask and they weren't under oath that I don't think they would answer and I don't want to waste time on
[44:55.040 --> 45:01.680]  Questions that they're not going to answer. So for example, I'm not going to try to pick Federighi's mind about
[45:02.760 --> 45:08.000]  You know whether they need a new kernel to have like a real-time operating system for the car
[45:09.520 --> 45:12.540]  It's not gonna be a fruitful avenue of conversation exactly
[45:12.540 --> 45:19.420]  and and in addition to the fact that he obviously isn't going to answer that and he can't talk about it and
[45:19.780 --> 45:25.140]  Even if I wanted to get cute and say, you know, theoretically, of course, you know
[45:25.140 --> 45:30.820]  But you know that there's these real-time considerations for something like a car that you don't have with these consumer devices like phones and blah
[45:30.820 --> 45:31.540]  blah blah
[45:31.540 --> 45:32.700]  He's not gonna get into it
[45:32.700 --> 45:38.280]  And the second thing in addition to wasting precious time is I feel like asking questions like that would
[45:38.280 --> 45:42.720]  Immediately raise their shields like wow. He just asked a stupid question that I can't answer now
[45:42.720 --> 45:45.200]  I've got to be careful that I that he's not gonna you know, I
[45:45.760 --> 45:51.240]  Want them to feel like hey, this is going well, and it's they're not necessarily softball questions, but that they're
[45:52.040 --> 45:54.040]  Questions that I sort of thing I was hoping to talk about
[45:54.200 --> 45:54.720]  Yeah
[45:54.720 --> 45:58.680]  And the thing is in this in this particular realms was specifically in the open source effort
[45:58.680 --> 46:02.080]  We've seen through their actions that they are being much more open
[46:02.320 --> 46:08.240]  With Swift and the open source effort than they have ever been before in terms of telling you what they're going to do in the future
[46:08.240 --> 46:10.840]  And having public roadmaps and doing development in the open
[46:11.440 --> 46:13.440]  You kind of brought this up in the interview with like
[46:13.560 --> 46:18.480]  how Swiss development is out in the open and he and Craig said how all of the M was and everything but the
[46:18.520 --> 46:20.440]  contrast that you could have you know
[46:20.440 --> 46:23.180]  maybe this would have put them on the defensive is the contrast is something like
[46:23.440 --> 46:27.520]  The the Darwin open source releases and Darwin has been open source from the beginning
[46:27.520 --> 46:32.120]  But it just hasn't been developed in the same way and maybe it can't be for a variety of reasons because it's just too much
[46:32.680 --> 46:35.160]  Proprietary stuff revealing their plans for you know, whatever
[46:35.160 --> 46:37.420]  Devices and stuff. They're they're gonna make in the future
[46:38.940 --> 46:42.740]  But they there's so much more open and he was more open here saying oh, yeah
[46:42.740 --> 46:44.780]  We're gonna add these features and this is we're gonna you know
[46:44.780 --> 46:47.100]  We're gonna have more things like this by the time
[46:47.100 --> 46:53.420]  WWDC rolls around when has any Apple that they wouldn't even tell you if they're gonna have a new battery charger
[46:53.820 --> 46:56.660]  In time, you know, they could tell you anything about the future
[46:56.660 --> 47:02.420]  Not that he was promising specific things but sort of in the vague sort of this is kind of what we're thinking kind of what
[47:02.420 --> 47:07.580]  We're thinking kind of what we're planning because I think it's understood especially within the realm of this open source thing
[47:07.580 --> 47:11.420]  It's like you can see it happening. Like if it's not available at WWDC won't be a mystery
[47:11.420 --> 47:17.140]  why you'll see every single check-in every single debate on the mailing list and when WWDC comes around it'll either be readier it won't and
[47:17.740 --> 47:23.380]  When everyone can see that no one's gonna be like you promised this thing by WWDC and we still can't do it
[47:23.380 --> 47:26.540]  Why are you you know, it's like we'll just look at the mailing list. Look at the source code
[47:27.180 --> 47:31.860]  It didn't get done or there was debate about how it should be done or whatever
[47:31.860 --> 47:37.620]  It's so having that stuff in the open just makes it so much easier to have those conversations that there there are no gotchas
[47:37.620 --> 47:41.020]  It's like just you can watch it happening. It's not magic, right? It's not like
[47:41.700 --> 47:43.460]  okay, it's
[47:43.460 --> 47:47.940]  Early December as promised before the end of the year. We've made this thing open source
[47:47.940 --> 47:52.780]  Here's the zip file, you know with all the source and there's a you know, an Apache or whatever
[47:52.780 --> 47:55.500]  I've whatever like what are they licensed to be using? I think it's actually 2.0
[47:55.500 --> 48:01.180]  Um, they're using it, you know, it's got an open source license to have at it. And here's where we plan to
[48:01.180 --> 48:08.180]  Here's our roadmap for the first with 3.0 and then they go into radio silence and then early June at WWDC
[48:08.180 --> 48:10.580]  We find out whether that matched or not
[48:10.580 --> 48:14.900]  Like you said for me the point from here to there every single day there are going to be these debates
[48:14.900 --> 48:19.780]  I mean to me that I mentioned it in the interview that the Swift evolution mailing list is
[48:20.380 --> 48:23.740]  Remarkable because you really have to like look at the email addresses to see
[48:23.740 --> 48:30.540]  Who's from Apple and who's not because there's really serious and very thoughtful proposals coming from outside Apple
[48:30.540 --> 48:37.380]  And it's very clear that people inside Apple are giving them their full consideration. It is truly a
[48:37.940 --> 48:39.700]  collaborative
[48:39.700 --> 48:42.060]  Relationship right, you know eight days into it
[48:42.540 --> 48:47.260]  Yeah, definitely. I'm assuming it will calm down a little bit as the volume has been tremendous
[48:47.260 --> 48:51.300]  I had to switch to the digest form of that mailing list because it was just filling my you know
[48:51.300 --> 48:55.100]  Email invite even though I'm filtering into a folder. It was just too many emails in a day
[48:55.100 --> 48:59.740]  So let me just try taking the digest version of but like I'm assuming the traffic will die down a little bit
[48:59.740 --> 49:00.380]  But yeah, you're right
[49:00.380 --> 49:02.380]  I used the old model with the open source
[49:02.420 --> 49:07.300]  Like Darwin was it was the big one where they give you a big dump and then I don't know how many people even
[49:07.420 --> 49:09.420]  contributed or even could contribute
[49:09.420 --> 49:13.900]  And then you wouldn't you wouldn't see anything from them until the next major version
[49:13.900 --> 49:19.440]  Like I think just the other day they finally put out the El Capitan version of the Darwin open source stuff
[49:19.440 --> 49:21.540]  And so if they can't with this big source dump
[49:21.660 --> 49:26.500]  even if they had been accepting like feedback if you didn't see anything from Apple until
[49:26.780 --> 49:33.220]  WWDC it would just be like like a typical right only sort of black hole for information like that have discussions with you
[49:33.220 --> 49:35.180]  And you could say things but you never knew what Apple is gonna do
[49:35.180 --> 49:38.180]  You just have to sit around and wait and wait and wait and then at June
[49:38.180 --> 49:40.180]  There'd be a bunch of slides and people would applaud or not
[49:40.700 --> 49:46.140]  Here it all happens in real time in front of you. I guess the open question is still how often
[49:46.140 --> 49:52.280]  Do the people at Apple push their changes back up to the repository how much development but that's true of any open source thing
[49:52.280 --> 49:58.300]  You can you can have your local clone of a repository and do a bunch of changes to it and not push them back up
[49:58.300 --> 50:00.300]  To the main repository for a while
[50:00.940 --> 50:02.940]  To some degree there has to be
[50:03.340 --> 50:05.340]  development going on in Apple
[50:05.500 --> 50:08.940]  That doesn't immediately get pushed out to the public
[50:08.940 --> 50:09.220]  I mean
[50:09.220 --> 50:14.860]  I don't know if there's a vetting process involved in that or just the internal coordination of deciding in
[50:14.860 --> 50:18.920]  In their particular what they're going to do versus what the community is doing
[50:19.780 --> 50:21.540]  I'm sure they'll navigate it just fine
[50:21.540 --> 50:25.140]  But it's just like any other open source thing if there does come a point
[50:25.500 --> 50:30.660]  Where the community wants to pull Swift heavily in one direction Apple wants to pull it at another you could end up with a fork
[50:30.660 --> 50:34.100]  But we're so far from that now now everyone is kumbaya and everyone's excited to be
[50:34.420 --> 50:40.120]  Working on Swift and Swift is this one thing and Apple is clearly the driver's seat having invented it and having the platform where it's
[50:40.120 --> 50:46.020]  Most useful so I think things will be smooth sailing as smooth as they can be an open source for the foreseeable future
[50:46.620 --> 50:52.740]  yeah, and I think it it must help in a certain degree that
[50:54.260 --> 50:59.940]  Just about every programming language I know of and certainly all the ones people are passionate about have somebody who
[51:01.460 --> 51:06.540]  You know was the dictator in charge who invented it and and infused it with their
[51:06.540 --> 51:10.680]  Personal you know here's what I think this programming language should be like it
[51:10.680 --> 51:16.480]  You know all the great programming languages to me. I think have this opinionated root or
[51:17.440 --> 51:24.320]  origin and Chris Latner is obviously that individual with Swift, and I think it's very clear both
[51:24.840 --> 51:31.880]  Publicly and from what I've heard privately that it was what has happened was always his intention that it would go open source
[51:31.880 --> 51:35.480]  And that it wouldn't you know and it's not like it took this long because there was a debate internally
[51:35.480 --> 51:40.960]  It really was what what Craig said in the interview which was didn't make sense to go open source right out of the bat
[51:40.960 --> 51:43.120]  We had to make you know. It's still too liquid
[51:43.120 --> 51:45.840]  You know wait till it solidifies a little bit, and then at that point
[51:45.840 --> 51:49.520]  You know it was just a met not a matter of if but when I think was his exact words
[51:49.520 --> 51:54.580]  And I think it really helps that Latner was on board with that from the beginning in terms of
[51:54.940 --> 52:01.900]  Wanting to have this sort of it's not like it's not like somebody else at Apple is forcing him and his team to participate in this
[52:01.900 --> 52:06.100]  Well, that's the the unspoken part of that is like alright
[52:06.100 --> 52:08.940]  So it didn't make sense to go because 2.0 was too new
[52:09.500 --> 52:15.100]  Why would it be bad obviously pre 1.0 is like you have a secret and the typical Apple
[52:15.100 --> 52:19.560]  I'm keeping a secret and so I can come to W3C and say we have a new programming language so pre 1.0
[52:19.860 --> 52:21.940]  You can there you know pre announcement
[52:21.940 --> 52:25.260]  You can say that's the reason it's not open source because it was a secret and we didn't even know if we could do
[52:25.260 --> 52:29.340]  It and we had to decide internally and so that makes us once everybody knows Swift is the thing
[52:29.340 --> 52:31.340]  Why is it not open source at that point?
[52:31.340 --> 52:34.460]  And it's like oh, it's too new. We're not ready. We really need to work it out
[52:34.460 --> 52:37.780]  Why why do you need to work it out? Why can't you work it out when it's in the open?
[52:37.780 --> 52:41.420]  Why does it have to be closed source while you're working these things out?
[52:41.420 --> 52:46.740]  And I would say that the Swift right now is still by the standards of most other mature programming language still heavily in flux
[52:46.740 --> 52:47.660]  I mean for crying out loud
[52:47.660 --> 52:52.720]  They're they're ripping out plus plus and minus minus at this point and thinking about what they're gonna do with like
[52:52.900 --> 52:58.000]  You know people are proposing new keywords like this is incredibly liquid. So why why was it closed source?
[52:58.000 --> 53:02.160]  between the announcement and now and
[53:02.520 --> 53:06.120]  The answers that are pretty obvious like they don't think they need to say them because people basically know
[53:06.400 --> 53:09.640]  Supporting an open source project has overhead right like you can work
[53:09.640 --> 53:13.080]  You can go much faster when you don't have to worry about other people's input
[53:13.080 --> 53:19.360]  That sounds bad and it's like oh you're being but like there is a lot of overhead especially for a company like Apple in terms
[53:19.360 --> 53:20.440]  of
[53:20.440 --> 53:23.520]  Intellectual property and making sure this is dividing line between what's open and what's not
[53:23.520 --> 53:31.080]  It's a lot of work to do all the things that are required to be a good maintainer of an open source project and
[53:31.560 --> 53:36.600]  They just you know, it would have made them go slower. Right? So now they're at the point where
[53:37.720 --> 53:39.720]  the trade-off is worth it that
[53:39.760 --> 53:42.200]  They're they're okay with going a little bit slower now
[53:42.200 --> 53:42.520]  Of course
[53:42.520 --> 53:47.560]  The input is a little bit more valuable because in that beginning part so much basic stuff didn't work
[53:47.560 --> 53:52.360]  I mean Craig mentioned that you have an incremental compilation. It was like just you just want it to hold together
[53:52.360 --> 53:58.280]  Right. Thanks. Is this feasible at all? Can we ship something? Can we get it working enough in Xcode?
[53:58.280 --> 54:01.080]  So like the playgrounds don't crash all the time right now, you know
[54:02.360 --> 54:06.360]  that's that's basically I would assume the the answer that wasn't given there is that
[54:07.080 --> 54:11.960]  it's not like they and and or it's the internal debate which is not going to tell you about the details of the internal debate but
[54:12.520 --> 54:14.640]  Well, yeah that you can go much faster
[54:14.640 --> 54:19.840]  Well, you don't have to worry about the outside world's opinions or input and you don't have to support them and you don't have to
[54:19.840 --> 54:20.840]  maintain
[54:20.840 --> 54:26.480]  You know a source repository with clean source code and a mailing list and all the other things that go with that
[54:26.800 --> 54:28.960]  yeah, I think it is sort of a
[54:33.120 --> 54:37.360]  Like a two-step process like first step was Swift 1.0
[54:37.360 --> 54:42.400]  This is good enough to show you guys and let you guys start playing with even though let's face it
[54:42.400 --> 54:43.800]  You can't start working with it yet
[54:43.800 --> 54:46.720]  We'll get it into a shape where it's you know
[54:46.720 --> 54:50.560]  You can start using it and I've been asking around and I do there are you know?
[54:50.560 --> 54:53.480]  It's not just an Apple there, you know real developers at real, you know
[54:54.440 --> 54:57.400]  Apps that you know people out there, you know top apps
[54:58.560 --> 55:03.560]  To borrow a phrase from Raiders the lost art. There are top apps that have new parts of it
[55:03.560 --> 55:06.720]  You know, maybe not entirely written in Swift. That's probably still very rare
[55:06.720 --> 55:11.000]  But new features are being written in Swift in real apps, you know that you're using today
[55:12.000 --> 55:17.600]  but I think stage two is this is where I think Lattner and his team think we had this this
[55:17.600 --> 55:20.600]  Vision for what we would start with and we're not there yet
[55:20.600 --> 55:24.600]  And this is the point where there's this the fundamental aspects of the language
[55:24.600 --> 55:29.600]  We're settled on now and now we're willing to start listening to how we can make it better to suit your needs
[55:31.600 --> 55:32.600]  Yeah
[55:32.600 --> 55:37.600]  Like I said, I think the language is just so young friend in the grand scheme of things
[55:38.600 --> 55:41.600]  You know if you want to do it like human analogy
[55:42.600 --> 55:44.600]  Like and maybe you can sit up now
[55:44.600 --> 55:48.600]  Like it's not you doesn't need to be held in one of those big tube things like it can sit up occasionally
[55:48.600 --> 55:50.600]  it toddles over it falls over a little bit it can set up but
[55:51.600 --> 55:53.600]  this is like
[55:54.600 --> 55:58.600]  The best and the worst part because it's kind of like there's so much potential
[56:00.600 --> 56:01.600]  But
[56:01.600 --> 56:07.600]  Craig talked about Swift 3.0 and how they're really working on getting the ABI nailed down and everything and that's just got to be
[56:07.600 --> 56:14.600]  terrifying because you know the standards of binary compatibility that Apple aspires to like with Objective C
[56:14.600 --> 56:20.600]  I think Marco has brought this up on ATP view times like you could have built an iPhone app for the original iPhone and
[56:20.600 --> 56:23.600]  And in theory if you stayed to you know
[56:23.600 --> 56:29.600]  Still well supported API is that binary was still run like they don't Apple is not in the habit of
[56:30.600 --> 56:36.600]  Breaking backward compatibility for binary libraries and everything that frequently which is surprising for companies
[56:36.600 --> 56:38.600]  That is so gung-ho about
[56:39.600 --> 56:42.600]  Moving on from the past in hardware design and software design. They're really good about that
[56:42.600 --> 56:46.600]  So nailing that stuff down like that like 3.0 is not that far away and it's like
[56:47.600 --> 56:53.600]  You really only get one shot at doing this right because there's not going to be another 64 to 30 32 to 64 bit
[56:53.600 --> 56:56.600]  Transition for them to use to paper over like they did with like, you know
[56:56.600 --> 57:00.600]  The Objective C stuff where they're like well when we're going 32 64, it's gonna break anything anyway
[57:00.600 --> 57:03.600]  So now is our chance to do something a little bit differently
[57:03.600 --> 57:09.600]  There's not going to be a 64 to 128 transition in the foreseeable future. So they really have to get their ABI
[57:10.600 --> 57:14.600]  Something that doesn't have some terrible mistake that ties their hands in the future
[57:14.600 --> 57:20.600]  And that is supportable for literally decades and or maybe enough. It's not a mistake. It's like not
[57:21.600 --> 57:28.600]  Like missing some sort of thing that everybody thinks is okay today, but five six seven years ago from now everybody thinks
[57:28.600 --> 57:32.600]  Oh, man, that's it would be so great if we didn't have that if we weren't stuck with that decision
[57:32.600 --> 57:38.600]  or there's gonna be some language feature that is much more difficult to support with the ABI as it's designed or you know,
[57:38.600 --> 57:43.600]  You're just gonna say oh well doesn't you know the way quantum computers work in 50 years is different than that
[57:43.600 --> 57:47.600]  But even just like you decide there's a particular language feature that they're like we don't have time for it
[57:47.600 --> 57:53.600]  Concurrency is a great example in the Swift 3.0 like Swift evolution mailing list and roadmap or whatever
[57:53.600 --> 57:58.600]  They're like language level concurrency, but it's not not planned for 3.0. We don't have time for it
[57:58.600 --> 58:03.600]  It's too big a feature if we're gonna say that as post 3.0, but they're gonna have the ABI nailed down, right?
[58:03.600 --> 58:08.600]  So I really hope there's nothing about you know, language level concurrency features
[58:08.600 --> 58:11.600]  That would be easier to do with a different API
[58:11.600 --> 58:13.600]  not that it's gonna preclude them doing this and
[58:13.600 --> 58:19.600]  I'm assuming like based on past experience that they're looking for an ABI that we really really saw it
[58:19.600 --> 58:26.600]  But thus far everything until now has been a communication from from Apple about Swift resume. We're gonna break your crap all the time
[58:26.600 --> 58:30.600]  We are not maintaining source compatibility where we're adding keywords
[58:30.600 --> 58:36.600]  We're removing things where we're changing how operators work with and and their solution to this has been like we're gonna use Xcode to
[58:36.600 --> 58:38.600]  Translate your old code to your new code for you
[58:38.600 --> 58:41.600]  But we're not gonna support your old code like just forget it
[58:41.600 --> 58:45.600]  because they're they don't want to be held back by the past is kind of the nightmare of
[58:45.600 --> 58:54.600]  you know come out with language and then let literally thousands of developers start writing real applications with it and shipping them to customers and
[58:54.600 --> 58:59.600]  Then be like, oh my god, we can never change this part of the language because so many people have all this code out there
[58:59.600 --> 59:03.100]  Like we just we set it out to loosen the world now
[59:03.100 --> 59:06.360]  We can never take away plus plus and minus minus it'll break everyone's apps and apples
[59:06.360 --> 59:13.000]  I'm like no we reserve the right to change this how this language looks on the page to make your source code that you think is
[59:13.000 --> 59:13.920]  perfectly good
[59:13.920 --> 59:19.400]  Syntactically invalid so it won't even compile and the way we're gonna manage that is by giving you tools to translate your source code
[59:19.400 --> 59:22.600]  Yeah, that's one of my favorite changes in that
[59:22.600 --> 59:25.560]  I guess it's the it just came out in the Swift
[59:26.160 --> 59:31.600]  Evolution or maybe the new version of Swift that they released as they open sourced it where they got rid of these plus plus and minus
[59:31.600 --> 59:32.960]  minus operators
[59:32.960 --> 59:34.320]  and again
[59:34.320 --> 59:40.980]  Just to take a big step back and I read the interviews that Federici did with like mashable and a few other outlets last week
[59:40.980 --> 59:46.120]  I was half happy and half worried because I was happy because his interviews with like ours
[59:46.120 --> 59:53.840]  Technica and and mashable covered the basics, you know, and it was like a foundation of what Apple's official stance was towards this
[59:53.840 --> 59:59.220]  Open-sourcing a Swift and I thought that means I don't have to waste time talking about those things with them and we can go deeper
[59:59.220 --> 01:00:03.400]  But then I thought what if that's all he wants to talk about is this he doesn't want to get nerdy at all
[01:00:03.400 --> 01:00:07.180]  and I was like because I kind of want some of this stuff to be a little technical but then
[01:00:08.060 --> 01:00:11.980]  The way the interview went absolutely no problem getting them to go technical
[01:00:11.980 --> 01:00:18.180]  I just worry now that maybe it's a little bit over over people's heads for everybody who listens to the show
[01:00:18.180 --> 01:00:20.260]  And so just here's one example
[01:00:20.260 --> 01:00:26.340]  I don't want to over explain but the the plus plus minus minus operators are one that's very easy for even a non programmer to understand
[01:00:26.340 --> 01:00:32.020]  And in every language geez, I know it since see you've been able to take a variable
[01:00:32.020 --> 01:00:38.580]  Let's say the variable is X and if X is an integer and it's currently equal to four if you write in your source code
[01:00:39.100 --> 01:00:40.940]  x++
[01:00:40.940 --> 01:00:43.020]  That turns the variable to five
[01:00:43.020 --> 01:00:49.100]  It just adds one to the to the variable and I've never really given a lot of thought to it
[01:00:49.820 --> 01:00:56.960]  But like it seems like every language just about every C style syntax language since has taken that and kept it
[01:00:57.500 --> 01:01:01.660]  And Swift had it and then in the where we're going
[01:01:01.660 --> 01:01:05.660]  it was like we're gonna get rid of it and here's why and I thought the explanation for why it was
[01:01:05.660 --> 01:01:13.740]  Terrifically cogent, you know, it was like yeah, that's that's sort of like unreadable and you can it'd be a lot easier if you just set
[01:01:13.740 --> 01:01:17.960]  You know X plus equals one so, you know, it's adding one to it
[01:01:18.220 --> 01:01:25.020]  So there's the the nuance of post post decrement and pre decrement where you can have plus plus X versus X plus plus
[01:01:25.020 --> 01:01:30.020]  Which means different things in a lot of different languages including C right Python by the way doesn't have plus plus or minus minus
[01:01:30.020 --> 01:01:36.100]  And this is a great example of a language feature that they're changing based on a proposal
[01:01:36.700 --> 01:01:39.860]  for essentially cultural reasons cultural and
[01:01:40.460 --> 01:01:48.700]  Like human factors reasons not not technical not like performance or interoperability with objective C or the but but or the ability
[01:01:48.700 --> 01:01:51.940]  Should do something that you previously couldn't do. This is purely
[01:01:53.020 --> 01:01:56.460]  It's user interface for programming language, essentially. It's a
[01:01:56.460 --> 01:02:05.180]  what does this construct cause more problems than it solves how much longer is plus equals one versus plus plus pre and
[01:02:05.180 --> 01:02:07.540]  Posts really easy to get rid of that because that is very confusing
[01:02:08.140 --> 01:02:12.240]  But you're like well, yeah plus plus and minus minus are just you know
[01:02:12.940 --> 01:02:15.940]  So common as you noted in so many other languages
[01:02:15.940 --> 01:02:20.420]  Wouldn't we keep that just because it's an idiom that people are familiar with and then the debate if you can look through this
[01:02:20.420 --> 01:02:24.060]  And the man was like well in what context do you find yourself wanting to do that?
[01:02:24.060 --> 01:02:28.540]  Well when I do a for loop and I say, you know, I equal zero I less than whatever I plus plus
[01:02:29.180 --> 01:02:32.260]  And then the Swift answer is what we don't want people doing those kind of loops
[01:02:32.260 --> 01:02:35.420]  We want to have a way to iterate over collections more naturally
[01:02:35.420 --> 01:02:38.660]  So if we say you don't have to do a classic style for loop
[01:02:39.060 --> 01:02:42.020]  When do you think you're gonna use the plus plus?
[01:02:42.600 --> 01:02:46.220]  You know, and so that's how this debate goes and this is the level they're talking about
[01:02:46.220 --> 01:02:51.620]  That's why I say this is a little baby that can barely sit up at this point because they're still considering fundamental things
[01:02:51.620 --> 01:02:57.220]  like how many fingers should this baby have right and you know, is it gonna be a biped right or should I have fur or
[01:02:57.220 --> 01:02:58.540]  not like
[01:02:58.540 --> 01:03:01.560]  That's that's the level they're they're debating at this point
[01:03:01.560 --> 01:03:05.260]  and I think it's wonderful because the worst thing in the world that can happen is for
[01:03:05.660 --> 01:03:13.140]  the very early decisions made by a very small group of people not exposed to the wider world to become cemented and become unchangeable and
[01:03:13.140 --> 01:03:14.020]  to say
[01:03:14.020 --> 01:03:17.900]  This is it and we can't change us because it's too late because too many people are programming it
[01:03:17.900 --> 01:03:21.540]  Unless you get everything perfect on your first try, which you never ever will
[01:03:21.540 --> 01:03:24.620]  All you're doing is like baking in the warts, you know
[01:03:24.740 --> 01:03:27.240]  it's nice for the language to have time to
[01:03:27.580 --> 01:03:34.140]  Grow and change and make mistakes and learn from them and become a different language eventually than it was this year or last year
[01:03:36.220 --> 01:03:39.340]  To take another step back just in the little
[01:03:40.340 --> 01:03:44.320]  Glossary as we go for non programmers the ABI the binary
[01:03:44.320 --> 01:03:51.560]  App what is it? What does ABI even stamp application binary binary in a thick right? That is an effectively. So
[01:03:53.000 --> 01:03:56.120]  Source code is in a text file. You write your Swift in a text file
[01:03:56.120 --> 01:04:01.640]  It goes into the compiler and the compiler turns it into the binary output
[01:04:01.640 --> 01:04:05.920]  So the dot app the the little actual executable inside the dot app bundle
[01:04:05.920 --> 01:04:09.080]  That's the binary or if it's a framework or a library
[01:04:09.080 --> 01:04:15.760]  It's the compiled code that the machine reads natively and what they're promising is that Swift 3.0
[01:04:15.760 --> 01:04:23.840]  Which is scheduled for I think they say late 2016, which I sort of interpret. I read between the lines Mac OS 10 10.12
[01:04:24.840 --> 01:04:26.320]  probably
[01:04:26.320 --> 01:04:27.620]  and
[01:04:27.620 --> 01:04:29.620]  iOS 10
[01:04:31.440 --> 01:04:32.480]  That it's good
[01:04:32.480 --> 01:04:37.640]  You know at that from that point forward that binary interface is going to be compatible with future versions
[01:04:37.640 --> 01:04:43.920]  We know Swift 4 with 5 or 6 going forward and they're like you said that's you know high stakes to commit to that
[01:04:45.600 --> 01:04:51.760]  Yeah, it's most important for someone like Apple who makes a bunch of libraries that they ship with their machines and your binary needs
[01:04:51.760 --> 01:04:56.240]  to know how to call into those libraries and how to how to call the function how to find the functions and how to
[01:04:56.240 --> 01:05:03.640]  Call them how to present the arguments of those function expect where to get the return value from all those little details
[01:05:03.640 --> 01:05:09.880]  That are right now have been in flux and they have to nail them down so that you'll ship your binary
[01:05:09.880 --> 01:05:10.960]  They'll ship their libraries
[01:05:10.960 --> 01:05:16.080]  And then they'll come up with a new version of the OS and if you don't revise your application you want to still work
[01:05:16.080 --> 01:05:18.000]  You don't have to recompile it every time that you know
[01:05:18.000 --> 01:05:23.280]  That's what if they change the ABI would mean that people will have to recompile their stuff and like I said historically speaking Apple
[01:05:23.280 --> 01:05:25.940]  Has not done that on iOS and it's rarely done on OS 10
[01:05:26.400 --> 01:05:32.320]  And 32 64-bit transitions are a great time to require that because you're like well your 32-bit application will keep working
[01:05:32.320 --> 01:05:36.840]  But eventually we're not even gonna support, you know 32-bit max anymore
[01:05:36.840 --> 01:05:41.960]  So we're just gonna be 64 bit from now on and your application will just age out of the ecosystem if you don't update it
[01:05:41.960 --> 01:05:44.400]  And if you do update it, hey guess what? You got to recompile anyway, so no big deal
[01:05:44.600 --> 01:05:47.680]  what was the gist of what Craig was talking about there with the
[01:05:48.600 --> 01:05:51.660]  It was something about what when I was asking where they're using Swift
[01:05:51.760 --> 01:05:57.080]  Internally and one of the things that they were that it's holding them up and can't they can't just switch to Swift is
[01:05:57.080 --> 01:06:02.040]  That they need to they still need to support 32-bit on Mac OS 10
[01:06:03.360 --> 01:06:10.360]  Yeah, I couldn't tell whether that was just a sly allusion to the fact that 32-bit support is going away everywhere
[01:06:10.840 --> 01:06:16.920]  That it hasn't you know any any remaining holdouts the 32-bit support will be disappearing and they've been doing that over the years
[01:06:16.920 --> 01:06:21.360]  Just going 64-bit everywhere. They possibly can it's just where they can stop supporting entirely
[01:06:21.360 --> 01:06:25.160]  Oh, the other option is there's no reason they can't make Swift work with a 32-bit things
[01:06:25.160 --> 01:06:29.880]  Right right now Swift is 64-bit only though. Yeah, I mean as far as I know
[01:06:29.880 --> 01:06:33.920]  Yeah, and like there's no reason they couldn't make it work with 32-bit like that, you know
[01:06:33.920 --> 01:06:37.200]  No, sure, they could but is it worth it? So it's just a question of
[01:06:37.920 --> 01:06:41.800]  Are they just shutting that door? And when is it safe for them to shut that door?
[01:06:41.800 --> 01:06:45.340]  And you know in terms of backward compatibility even like all you know
[01:06:45.340 --> 01:06:47.160]  The iOS device is going 64-bit
[01:06:47.160 --> 01:06:52.560]  You can still run 32-bit apps on but you don't want to have both 32-bit and 64-bit apps running on your device at the
[01:06:52.560 --> 01:06:55.560]  Same time because then you got to load two versions of all libraries into memory and everything
[01:06:55.560 --> 01:07:00.120]  So there are lots of good reasons to just forget about 32. And like I said, just let it age out of the ecosystem
[01:07:00.400 --> 01:07:02.400]  That's what I would imagine Apple would do
[01:07:03.280 --> 01:07:07.320]  But he's talking about the past in terms of what what was holding people back
[01:07:07.320 --> 01:07:09.440]  Here's where it would really help if we had a chat room
[01:07:09.960 --> 01:07:16.000]  but I because a question that has just popped into my head now and I therefore did not do any research before the show is
[01:07:16.680 --> 01:07:18.160]  And I'm guessing this is true
[01:07:18.160 --> 01:07:25.200]  I'm guessing watch OS is 64-bit only and TV OS almost certainly is 64-bit only there's absolutely no reason why
[01:07:25.520 --> 01:07:31.840]  TV OS would have 32-bit support since the first device that TV OS runs on is a 64-bit device
[01:07:32.160 --> 01:07:37.200]  So on TV OS and I'm guessing watch OS it's probably possible to go
[01:07:37.720 --> 01:07:39.840]  Swift, you know you Swift for the
[01:07:40.680 --> 01:07:42.800]  frameworks and libraries in the operating system, I
[01:07:42.800 --> 01:07:48.920]  I don't even know. So you're right. It would be good to have a chair. I don't even know what other that Apple
[01:07:48.920 --> 01:07:53.400]  No to use a 8 and the first 64-bit was a 7. Yeah
[01:07:55.560 --> 01:07:57.400]  Yeah, like I like I said
[01:07:57.400 --> 01:08:02.440]  I would imagine the way forward is to travel not to waste its time on 32-bit
[01:08:02.440 --> 01:08:08.400]  but who knows like it depends on which roadmap like if you graph those things out and say when can we finally drop 32-bit support
[01:08:08.400 --> 01:08:12.720]  Both practically speaking and like politically speaking not annoying our partners or whatever
[01:08:13.640 --> 01:08:18.360]  Who made like 32-bit games for iOS and don't want to like rebuild them for 64. When can we do that?
[01:08:18.360 --> 01:08:18.880]  When is it safe?
[01:08:18.880 --> 01:08:22.880]  And then the other question is when do we want to really start ramping up on Swift?
[01:08:22.880 --> 01:08:25.040]  Now Swift needs to ramp up before 32-bit goes away
[01:08:25.640 --> 01:08:31.040]  maybe you have to put in the work to do 32-bit support, but it totally seems like the Apple move to just be like
[01:08:31.600 --> 01:08:35.880]  Swift is going to hasten the demise of anything supporting 64-bit
[01:08:35.880 --> 01:08:43.640]  Yeah, it just seems to me that anything new from when like at least from when the a7 what was that the 5s shipped
[01:08:43.680 --> 01:08:48.880]  Yeah from that point forward. It just seems like anything that doesn't have legacy support is 64-bit only
[01:08:48.880 --> 01:08:55.320]  So, you know from both from new platform perspective like watching TV to Swift itself
[01:08:55.320 --> 01:08:57.880]  that you know, if it's a new language that came out in
[01:09:00.360 --> 01:09:03.960]  2014 why in the world would it have 32-bit support? It's you know
[01:09:03.960 --> 01:09:05.960]  Anchored to the past
[01:09:06.360 --> 01:09:12.200]  Yeah, and the same thing for new frameworks if they're writing new frameworks using Swift Swift only frameworks Swift native frameworks
[01:09:12.200 --> 01:09:18.560]  Oh, they're rewriting foundation in Swift, you know, like but for new stuff where there is no there is no non Swift version of this
[01:09:18.560 --> 01:09:22.840]  Library, it's been Swift from day one. It's a brand new library. Maybe it's a big new library
[01:09:22.840 --> 01:09:27.440]  That's gonna be a tentpole feature of a future WODC and they're gonna tell people how to use it
[01:09:28.080 --> 01:09:31.740]  If it's Swift only and Swift doesn't do 32 for 32-bit
[01:09:31.740 --> 01:09:35.660]  No, 32-bit app can use this thing unless they're again unless they're gonna
[01:09:36.180 --> 01:09:41.540]  Bend over backwards to do some crazy way for the you know, the libraries to bridge from 32 to 64
[01:09:41.540 --> 01:09:42.620]  But yeah
[01:09:42.620 --> 01:09:48.380]  I just think it's all 64 going forward and and what he was giving you a glimpse in his things that Apple had already gone
[01:09:48.380 --> 01:09:53.660]  Through right like why aren't it? Why isn't everybody using so well Swift is really young Swift doesn't support 32-bit
[01:09:53.660 --> 01:09:57.140]  These are all reasons that teams that inside Apple that may be interested in Swift
[01:09:57.140 --> 01:10:03.320]  Couldn't use it because it would just wasn't practically doesn't wasn't practical at that point, but it becomes more practical every day
[01:10:03.320 --> 01:10:07.500]  I really I thought one of the most astute things he said was
[01:10:08.040 --> 01:10:10.720]  Here, I'm looking at my transcript here. I mean people here are
[01:10:11.440 --> 01:10:17.440]  Idealistic yet really pragmatic and I think you see that as an Apple characteristic in many many elements of what we do
[01:10:17.440 --> 01:10:20.900]  And I really do think that I think that it's almost
[01:10:20.900 --> 01:10:28.100]  It idealistic yet, really pragmatic gets to the heart of what I like best about Apple
[01:10:28.700 --> 01:10:35.620]  You know in the long run and overall and I feel and I feel like that really exemplifies it in terms of sure
[01:10:35.620 --> 01:10:37.780]  We're really excited about Swift and it'd be fun to be writing more
[01:10:37.780 --> 01:10:43.380]  But we've got to write an awful lot of new stuff still in Objective C for these very very pragmatic reasons
[01:10:44.420 --> 01:10:48.580]  Yeah, this is the overarching like you may be excited about Swift, but there's sort of a
[01:10:48.580 --> 01:10:50.580]  company cultural
[01:10:51.460 --> 01:10:57.620]  Imperative to for example not break binary compatibility without a good reason because it's bad for the platform
[01:10:58.820 --> 01:11:04.580]  And if there's any possible way you can avoid it like it's it's it's bad for the ecosystem that makes developers angry
[01:11:05.620 --> 01:11:06.820]  and
[01:11:06.820 --> 01:11:12.420]  You just you only get a certain number of those and you don't want to like cash them in just on a whim right?
[01:11:12.420 --> 01:11:16.820]  So even though a lot of people may be very excited about using this new technology
[01:11:16.820 --> 01:11:20.580]  About using this new technology if there's an overriding concern
[01:11:20.580 --> 01:11:26.940]  you know larger than your little project larger than your little feature or your application or whatever it is you're doing inside Apple and the
[01:11:26.940 --> 01:11:28.420]  dictate is
[01:11:28.420 --> 01:11:32.340]  you can't use it because you need to support 32-bit and you need to support 32-bit because
[01:11:32.460 --> 01:11:39.380]  We're committed to not breaking binary compatibility until a big company-wide decision happens at a level way above your pay grade
[01:11:39.380 --> 01:11:45.820]  And only then will it be okay. So like the idealistic and pragmatic as an organization. Yes, but like within the organization
[01:11:45.820 --> 01:11:47.500]  I imagine it's distributed where
[01:11:47.500 --> 01:11:52.180]  The lower you go down in the org chart the more people are inclined to be idealistic and want to do something crazy and new
[01:11:52.180 --> 01:11:56.540]  And the higher you go in the org chart the more people have to be pragmatic and say there's a bigger picture here and even
[01:11:56.540 --> 01:11:58.540]  Though you may be excited to use it on your little project
[01:11:59.740 --> 01:12:06.660]  We decide at the top when it's time to do these big moves that are gonna impact again literally thousands of developers and thousands
[01:12:06.660 --> 01:12:08.660]  Is it millions of apps? I don't even want to think about it
[01:12:08.980 --> 01:12:14.100]  Might be I don't even know it. It's kind of bizarre to think about a million apps, but it's possible
[01:12:14.100 --> 01:12:18.180]  One of the areas I wanted to get to and when I found out it was nice
[01:12:18.180 --> 01:12:23.860]  One of the things that was nice about this interview was that I knew about it at least a week in advance
[01:12:23.860 --> 01:12:26.580]  It was actually a little bit more than a week in advance by the time, you know
[01:12:26.580 --> 01:12:29.420]  we found a date that worked for both of us and
[01:12:30.300 --> 01:12:34.100]  So I felt like I had plenty of time to prepare which was great
[01:12:34.100 --> 01:12:39.140]  And so one of the ways that I prepared it was I went to people who know a lot more about programming
[01:12:39.140 --> 01:12:44.460]  Than I do and it's specifically a lot more about programming for Apple platforms than I do and
[01:12:45.940 --> 01:12:50.140]  You know tried to get some questions from them and one of the things that I asked about but it's you know
[01:12:50.140 --> 01:12:54.540]  That and I knew this but I was interesting hearing it from developer friends is this whole angle that
[01:12:55.140 --> 01:13:03.100]  Swift is not just objective C with a modern friendly syntax. It is a very different language with very different
[01:13:05.460 --> 01:13:06.980]  Primary
[01:13:06.980 --> 01:13:08.820]  priorities
[01:13:08.820 --> 01:13:14.180]  And there are certainly some things it certainly looks better and it certainly is a much more approachable syntax
[01:13:14.180 --> 01:13:19.940]  and I feel like at a fundamental level that's basically why there's so much excitement around Swift is there's a lot of people who
[01:13:20.860 --> 01:13:22.060]  just
[01:13:22.060 --> 01:13:25.140]  took one look at or take one look at objective C and they're like
[01:13:25.140 --> 01:13:29.580]  I don't get it and then they take a look at Swift and they're like, wow, that looks like the language
[01:13:29.580 --> 01:13:34.060]  I already know whether it's JavaScript or you know C or I
[01:13:34.060 --> 01:13:41.420]  Don't know even even Java to some degree maybe you know, it's a lot more similar to those style languages than it is to objective C
[01:13:42.420 --> 01:13:47.460]  But there are things about objective C and the way that the next now
[01:13:48.020 --> 01:13:49.900]  cocoa and cocoa touch frameworks
[01:13:49.900 --> 01:13:57.340]  you know all these things that have derived from from the next origins the way that these frameworks take advantage of the dynamic aspects of
[01:13:57.340 --> 01:14:00.920]  Objective C that people who are really good at it people who've been writing
[01:14:00.920 --> 01:14:08.440]  for these frameworks for a long time love and Swift is sort of isn't really what they were looking for in a next-generation language and
[01:14:09.000 --> 01:14:11.400]  I thought his answer to that surprised me. I thought
[01:14:13.240 --> 01:14:16.720]  Well, I mean it was it was on message in terms of like
[01:14:17.880 --> 01:14:23.640]  the dynamic things that people wanted to do with objective C will eventually be possible Swift if they're not now and that this is
[01:14:23.640 --> 01:14:27.980]  An ongoing thing and they're working on in yada yada and essentially all the dynamism
[01:14:27.980 --> 01:14:33.360]  Which is a word they like to use all the dynamism that that that Apple thinks is important will be available in Swift
[01:14:33.720 --> 01:14:37.280]  Without the downsides that he also went over extensively that you've got to pay for that all the time
[01:14:37.800 --> 01:14:40.400]  Yeah, I thought that was interesting and I thought it was
[01:14:42.480 --> 01:14:43.280]  I'm not sure
[01:14:43.280 --> 01:14:47.960]  I guess I kind of was worried that he would dodge that question and instead it seemed like he'd dove right into it and
[01:14:48.040 --> 01:14:51.120]  It's obvious so obvious from his answer that they have
[01:14:51.800 --> 01:14:53.800]  discussed this internally extensively
[01:14:54.560 --> 01:14:56.920]  well, this is an interesting time for Swift because
[01:14:56.920 --> 01:15:02.720]  A lot of things that have been true of Swift from the beginning are now starting to come
[01:15:02.880 --> 01:15:04.520]  Come more into the public consciousness
[01:15:04.520 --> 01:15:09.640]  Mostly because more people are using it more people are aware that it even exists as excited as we all were whatever it was
[01:15:09.640 --> 01:15:11.640]  two years ago to see Swift at
[01:15:11.600 --> 01:15:13.160]  WWDC
[01:15:13.160 --> 01:15:15.320]  It's not really a thing for people
[01:15:16.160 --> 01:15:21.880]  Broadly speaking until you know a certain point like can actually use this to make iOS and Mac apps
[01:15:21.880 --> 01:15:25.000]  Okay, then it becomes one level of thing and then the open source is the next level is like hey
[01:15:25.000 --> 01:15:31.360]  this is maybe of interest to the entire world of programmers, right and so now a lot of people are looking at Swift and
[01:15:32.280 --> 01:15:37.280]  They're going to I think start realizing things that have been true about Swift from the very beginning
[01:15:37.280 --> 01:15:40.440]  you mentioned the syntax thing, which is kind of a sideshow because
[01:15:41.360 --> 01:15:46.560]  The syntax is you know, even though it's the thing that people notice when you look at it and there is a certain
[01:15:47.000 --> 01:15:49.000]  I don't know like a
[01:15:49.400 --> 01:15:54.560]  Like a flavor like you can tell does this feel like a modern thing or does this fear old and weird?
[01:15:54.560 --> 01:15:57.080]  Is does it look like that? You mentioned like doesn't look like JavaScript
[01:15:57.080 --> 01:16:01.040]  Does it look like whatever language the kids are learning these days, right? But that is mostly
[01:16:01.640 --> 01:16:07.320]  Not important. I mean there's some aspect where you have to sort of keep up with the Joneses and not look like you're really old
[01:16:07.680 --> 01:16:12.440]  but then the other aspect of it in terms of the language itself is how many things do I have to worry about and
[01:16:12.680 --> 01:16:14.040]  Objective-c
[01:16:14.040 --> 01:16:18.480]  Asks developers to worry about things used to before arc ask them to worry about
[01:16:18.480 --> 01:16:25.320]  memory management where they had to call retain and release and to a modern young programmer that just seems barbaric because like I said
[01:16:25.320 --> 01:16:27.320]  It'd be coming from you know
[01:16:27.880 --> 01:16:29.120]  I
[01:16:29.120 --> 01:16:30.920]  Guess JavaScript is a great example
[01:16:30.920 --> 01:16:33.040]  It's a lot of people know web stuff and JavaScript is everywhere
[01:16:33.040 --> 01:16:36.440]  But even things like C sharp or Java on the server
[01:16:36.440 --> 01:16:41.200]  It just seems barbaric to have to deal with that or to have direct access to memory with pointers and then arc made that a
[01:16:41.200 --> 01:16:46.000]  Little bit better, but still like what are all these asterisks all over the place? It doesn't really make any sense
[01:16:46.000 --> 01:16:50.840]  I don't know, you know, if you don't know see I think you know a surprising number of developers now
[01:16:51.560 --> 01:16:53.200]  Find that they're that you know
[01:16:53.200 --> 01:16:54.600]  If you're a gooey
[01:16:54.600 --> 01:17:00.120]  Application developer the reasons for you to know C to figure out how to make a sheet come up when someone pushes the button
[01:17:00.360 --> 01:17:04.520]  Like there's not a lot of those and it just seems like why do I have to worry about all this crap? So
[01:17:05.080 --> 01:17:07.080]  from the developers perspective
[01:17:07.760 --> 01:17:13.040]  Swift is exciting because it's like I want to make an iOS app because iOS apps are cool and I like iPhones and all this
[01:17:13.040 --> 01:17:18.040]  other stuff but it's kind of annoying that I got to worry about all this stuff and Swift says now you don't have to
[01:17:18.040 --> 01:17:21.080]  Worry about that stuff anymore and the syntax looks nicer, too
[01:17:21.080 --> 01:17:26.720]  And so that is the the public face of Swift and the excitement over finally a more modern
[01:17:27.280 --> 01:17:29.800]  language both in terms of appearance and aesthetics
[01:17:29.800 --> 01:17:34.840]  but also in terms of how many things do I have to be concerned with when writing a program that
[01:17:35.200 --> 01:17:40.880]  Seemed to me to be beneath the concern of me as like a programmer of a GUI app
[01:17:40.880 --> 01:17:46.720]  Yeah, and I think a lot of that is historical in terms of when languages C is, you know
[01:17:46.720 --> 01:17:52.720]  The primary example because so much has as you know, if you draw the family tree of programming languages
[01:17:52.720 --> 01:17:58.240]  There's an awful lot of languages that that derived from C and in that era, you know
[01:17:58.240 --> 01:18:02.640]  I guess what late 60s or early 70s when C was invented. Mm-hmm
[01:18:03.480 --> 01:18:04.520]  I
[01:18:04.520 --> 01:18:08.480]  Pretty sure the first edition of the K&R was like 1971
[01:18:08.480 --> 01:18:15.000]  So late 60s early 70s the computers were so incredibly slow
[01:18:15.000 --> 01:18:20.560]  I mean just just mind-bogglingly slow by our standards today, you know, it's you know
[01:18:20.560 --> 01:18:26.480]  Like that the whole you know that the entire Apollo mission was done with less computing power than your Apple watch has I mean
[01:18:26.480 --> 01:18:27.360]  It's just ridiculous
[01:18:27.360 --> 01:18:33.740]  And so you needed to squeeze every single cycle out of the CPU that you could and that meant being as a programmer
[01:18:33.740 --> 01:18:39.040]  Writing at is incredibly low level where you're you know, you know managing all the memory by hand
[01:18:39.940 --> 01:18:44.740]  Because if it works then it's incredibly efficient and then if it doesn't work, you just have to fix it
[01:18:44.740 --> 01:18:46.420]  You have to fix the bugs
[01:18:46.420 --> 01:18:50.140]  but like the retain release stuff is a perfect example of that where it's
[01:18:51.660 --> 01:18:56.460]  You know and I know when I first started trying to go away from it and it was funny because it's an interesting
[01:18:56.940 --> 01:19:01.420]  Example of Apple, you know going down an alley and then it deciding against it
[01:19:01.420 --> 01:19:06.380]  Which was at some point in the last decade they introduced garbage collection to cocoa
[01:19:08.300 --> 01:19:14.820]  Pretty sure, it was like in the early years of Bertrand. It was definitely after Avi Tevainian had left
[01:19:16.060 --> 01:19:17.740]  and
[01:19:17.740 --> 01:19:19.260]  I know there was a lot of
[01:19:19.260 --> 01:19:26.100]  Reluctance from people who got it and people who didn't have who at least didn't think they had problems dealing with the manual retain release
[01:19:26.560 --> 01:19:28.140]  memory management
[01:19:28.140 --> 01:19:32.660]  Didn't like garbage collection at all. And it turns out Apple didn't like it either and they eventually got rid of it
[01:19:32.860 --> 01:19:36.220]  You know all the people who thought I'd retain release is fine
[01:19:36.220 --> 01:19:41.100]  I don't need this garbage collection. Like one of the big reasons to even consider garbage collection is just like I said
[01:19:42.500 --> 01:19:43.580]  You know
[01:19:43.580 --> 01:19:45.620]  Objectivity started to look old and crappy
[01:19:45.620 --> 01:19:48.940]  Why do I have to worry so much about memory when programming for this platform?
[01:19:48.940 --> 01:19:52.380]  It makes the platform feel feel older and more primitive and less capable
[01:19:52.380 --> 01:19:54.060]  I can program for
[01:19:54.060 --> 01:19:59.060]  Android or for Windows or for whatever and I don't have to worry about this and like really I just want to make my
[01:19:59.060 --> 01:20:03.900]  App, right? I want to decide I want to write the code that's gonna make my app do the things my app does
[01:20:03.900 --> 01:20:06.580]  I don't care about memory like can't you just take care of that for me?
[01:20:06.580 --> 01:20:11.060]  And so the only reason they would go down the garbage collection path is like well
[01:20:11.060 --> 01:20:13.780]  Here's one way we can make people not have to worry about retain release
[01:20:13.780 --> 01:20:15.740]  Then it was like well you put in the retains and releases
[01:20:15.740 --> 01:20:20.140]  But they won't do anything or whatever and garbage collection for a variety of reasons
[01:20:20.140 --> 01:20:27.140]  Was it difficult to go with objective scenes in particular because it is a super set of C and because it's very difficult for a
[01:20:27.140 --> 01:20:29.140]  Garbage collector to know enough information
[01:20:29.620 --> 01:20:35.060]  About the C ish parts of your program which may be right in the objective C or maybe in data that's coming out of C
[01:20:35.060 --> 01:20:40.660]  Libraries to know enough to do the right thing with that stuff. And so it was kind of not
[01:20:41.260 --> 01:20:46.460]  Technically infeasible but like never a completely closed solution where you could be like I feel like a hundred percent of the time
[01:20:46.460 --> 01:20:48.460]  We will do the right thing here
[01:20:48.460 --> 01:20:50.340]  And
[01:20:50.340 --> 01:20:54.180]  You know and and eventually like they they launched it it was out there you could use it
[01:20:54.180 --> 01:20:57.020]  They dogfooded it on some teams that eventually pulled it back, right?
[01:20:57.020 --> 01:21:00.780]  And this is what I was getting at before with like things that have been true about Swift in the beginning
[01:21:00.780 --> 01:21:02.940]  They're just now gonna gonna be coming into the public eye
[01:21:02.940 --> 01:21:09.260]  The other aspect of Swift setting aside both the syntax and the modernization in terms of look at this language that does
[01:21:09.500 --> 01:21:13.980]  more modern things that lets the developers not worry about the things they're not worried about it and
[01:21:13.980 --> 01:21:18.860]  Express themselves in a more compact elegant form just to just solving the problem
[01:21:18.860 --> 01:21:22.740]  They want to solve you mentioned it look more like pseudocode. That's because you're not like in pseudocode
[01:21:22.740 --> 01:21:27.020]  You're not concerned with the little details. Just like here's the algorithm. Here's here roughly the steps
[01:21:27.020 --> 01:21:32.220]  I don't want to be concerned about the details, right? It does all that but the other thing that's big about Swift
[01:21:32.220 --> 01:21:36.540]  This is an interesting contrast to what you just mentioned about like C being made in the day when computers were slow
[01:21:37.580 --> 01:21:42.640]  And it was discussed by Craig as well when he's talking about the the just-in-time compilers the JIT and everything
[01:21:42.640 --> 01:21:44.040]  it
[01:21:44.040 --> 01:21:51.240]  Is essentially a bet against the virtual machines with with garbage with psycho counting garbage collectors, right?
[01:21:51.240 --> 01:21:57.560]  It is a bet against the things that Java does and C sharp and you know Android which is Dalvik the virtual machine
[01:21:58.000 --> 01:22:05.000]  Or all the Java the JavaScript engines that run all our web browsers JavaScript is in a tough spot because it's like they're stuck
[01:22:05.520 --> 01:22:10.080]  Finding a way to make JavaScript fast because it's everywhere in web browsers and no one really controls that platform
[01:22:10.080 --> 01:22:14.160]  and and so that's why we've had to put all this brain power to making JavaScript fast, but
[01:22:15.360 --> 01:22:18.520]  garbage collectors was going more in that direction, but
[01:22:19.040 --> 01:22:25.000]  as you you mentioned in the description of Swift is supposed to span from like an operating system up to like a scripting system and
[01:22:25.120 --> 01:22:30.000]  You once you get down to low level you can't have a garbage collector doing things
[01:22:31.000 --> 01:22:35.840]  Unpredictable things at unpredictable times and even if it's predictable you can't have the garbage collector like
[01:22:35.840 --> 01:22:40.520]  I take these pauses to walk your trees of things to find out what needs to be collected even you know
[01:22:40.600 --> 01:22:47.120]  There's a lot of great technology in the Java world of making garbage collectors that don't induce pauses and or are more predictable
[01:22:48.520 --> 01:22:55.680]  But nothing is as predictable as something that is entirely deterministic like arc something that is determined at compile time where they'll put in
[01:22:55.720 --> 01:22:58.340]  They essentially put in the retains and releases for you
[01:22:58.920 --> 01:23:00.240]  and
[01:23:00.240 --> 01:23:05.800]  there's debate as to whether you know theoretically can garbage collection approach the reliability and
[01:23:06.320 --> 01:23:08.680]  Performance characteristics needed for the kernel of an operating system
[01:23:08.680 --> 01:23:13.380]  I think Microsoft just had various projects to try to make a sort of memory managed operating system or whatever
[01:23:13.400 --> 01:23:16.160]  but Swift is a bet heavily in the other direction and
[01:23:16.760 --> 01:23:20.160]  This bet was made when our came out for Objective C not so much
[01:23:20.160 --> 01:23:25.740]  It was Swift, but it's doubling down with Swift is that to make a language that fulfills the goal set out for Swift
[01:23:25.740 --> 01:23:32.340]  We have to not have this virtual machine and garbage collection that does all the stuff
[01:23:32.340 --> 01:23:34.340]  We have to we have to basically
[01:23:34.500 --> 01:23:41.340]  Nail things down more figure things out at compile time make everything about it deterministic only then will it become
[01:23:42.060 --> 01:23:44.660]  possible to match both the performance and
[01:23:45.460 --> 01:23:52.000]  the sort of the predictability of C code so you can write your operating system kernel your audio subsystem or I
[01:23:52.000 --> 01:23:57.740]  Don't know your real-time operating system for your car. We'll see about that. But uh, but you can write that type of code without wondering
[01:23:58.440 --> 01:24:00.160]  When's you know?
[01:24:00.160 --> 01:24:06.080]  when the garbage collector is going to pause you for a second to walk some tree or when something's gonna get collected or how much
[01:24:06.080 --> 01:24:10.520]  Memory is going to be available at any given time based on when the collector ran based on much code ran before you called
[01:24:10.520 --> 01:24:11.560]  Into this code. All right
[01:24:11.560 --> 01:24:17.560]  Even when you're running on a modern computer that is very fast and maybe that pause isn't even a full second
[01:24:17.560 --> 01:24:20.880]  maybe it's just you know, 200 milliseconds, but a
[01:24:20.880 --> 01:24:27.200]  a fraction of a second in certain contexts that that pause is is
[01:24:28.120 --> 01:24:30.400]  Just kills the user experience. I mean and that's
[01:24:31.080 --> 01:24:33.560]  not to badmouth Android but it's I mean
[01:24:33.560 --> 01:24:37.360]  I've heard from a lot of people that dealing with a garbage collected system is one of the reasons why
[01:24:37.920 --> 01:24:43.760]  Android spent years trying to get to what iOS users thought was a smooth user interface right from the get-go
[01:24:44.080 --> 01:24:49.800]  Because the garbage collector would run while you're scrolling a list or something like that and you'd get these little stutters or pauses and they
[01:24:49.800 --> 01:24:55.240]  Were fractions of a second not like a whole second long pause, but just a little fraction of a second
[01:24:56.200 --> 01:25:01.400]  And in a real-time situation if it's some kind of camera based thing running on a car or something like that
[01:25:01.400 --> 01:25:05.160]  You really don't want to have an unpredictable even fifth of a second
[01:25:05.680 --> 01:25:08.120]  Pause and they have pause free collectors
[01:25:08.120 --> 01:25:10.120]  But the whole point is if you give up pausing
[01:25:10.360 --> 01:25:10.860]  essentially
[01:25:10.860 --> 01:25:16.360]  what you're either doing is having it in the degenerate case having something like reference counting happening in a small case like the you know,
[01:25:16.360 --> 01:25:23.120]  Generational collectors and and the long-lived versus short-lived objects like you can you can avoid pausing but if you avoid pausing you basically build up
[01:25:23.120 --> 01:25:27.480]  Garbage and it this is also mentioned by Craig the idea that they can run
[01:25:27.480 --> 01:25:31.860]  I don't know if it's like a kind of an excuse of how why they puts a little RAM in their iOS devices
[01:25:31.860 --> 01:25:33.520]  But they can fit there
[01:25:33.520 --> 01:25:34.900]  They can fit their stack
[01:25:34.900 --> 01:25:39.640]  They could fit their operating system in their framework and their libraries in a smaller memory footprint
[01:25:39.640 --> 01:25:41.640]  What did they say that probably that you know?
[01:25:41.640 --> 01:25:48.440]  What reading from the his thing here like Mary for us with different memory for footprints than some of our competitors who languages don't have this
[01:25:48.600 --> 01:25:53.600]  Characteristic basically saying is like Android they have to ship more RAM in their devices because they build up too much garbage
[01:25:53.600 --> 01:25:55.600]  And that's basically the choice you have either
[01:25:55.900 --> 01:25:59.280]  Something has to decide which memory is available for for use
[01:25:59.280 --> 01:26:04.160]  you know what which memory are we done with and we can use again for something else which memory is still in use and
[01:26:04.460 --> 01:26:10.400]  Arc does that by you know an arc which underlies, you know objective C and Swift does that by as it runs?
[01:26:10.400 --> 01:26:13.540]  It says I'm using this now. It's available now. I'm using this now. It's available now
[01:26:13.540 --> 01:26:20.600]  I'm you like in the code path along with the executing code and garbage collection is I just plow bravely forward and something else the
[01:26:20.600 --> 01:26:26.600]  Garbage collector occasionally figures out what is available for everybody else and what isn't hopefully you can do that without disturbing the other guy
[01:26:26.600 --> 01:26:27.760]  Who's plowing bravely forward?
[01:26:27.760 --> 01:26:31.000]  But sometimes you have to stop him from going and if you want to have a pause free one
[01:26:31.400 --> 01:26:34.600]  That doesn't stop the ongoing code to figure out what's available
[01:26:34.880 --> 01:26:40.080]  It has to necessarily leave be you know leave some stuff on the floor and say I'm not sure if this is in use yet
[01:26:40.080 --> 01:26:43.360]  I can't find out without stopping that the guy that's running over there
[01:26:43.360 --> 01:26:46.200]  so I'm just gonna leave it off the side and what it boils down to is
[01:26:47.000 --> 01:26:51.460]  You never know based on you know you've got these two things the collector and the program
[01:26:51.880 --> 01:26:54.920]  You never know at any given point when I'm at this point in the code
[01:26:54.920 --> 01:26:59.520]  How much memory is gonna be available in in this process like well if the collector ran here?
[01:26:59.520 --> 01:27:00.560]  And then maybe it'll be here
[01:27:00.560 --> 01:27:04.720]  But if the collector is behind because it's running on a different core than maybe this much will be available whatever and you just end
[01:27:04.720 --> 01:27:08.680]  Up with a little bit of extra garbage and the overhead of the virtual machine itself and all that stuff
[01:27:08.680 --> 01:27:13.440]  This is even before you get into like executing bytecode like Java does versus native and all that other stuff
[01:27:13.840 --> 01:27:20.660]  Swift and arc and objective-c are a bet heavily against the virtual machines like Java virtual machine the C sharp virtual machine and
[01:27:20.760 --> 01:27:25.960]  Certainly anything like the JIT craziness that we've had to do for a JavaScript to make that fast. Yeah garbage collection
[01:27:27.200 --> 01:27:31.360]  The analogy works and so I can see why that stuck as the terminology
[01:27:31.800 --> 01:27:36.380]  But you know like any any analogy it breaks down at a certain level and in the real world
[01:27:36.380 --> 01:27:42.260]  The garbage that you keep like let's like here in Philadelphia. We get garbage collected once a week
[01:27:44.740 --> 01:27:47.560]  The garbage you know the fact that that by Tuesday
[01:27:47.560 --> 01:27:49.820]  We've got six days of garbage in the house
[01:27:50.180 --> 01:27:54.620]  Isn't a problem because we don't generate that much garbage, and it just sits tied up in bags in our garage
[01:27:56.060 --> 01:28:01.300]  Whereas on a computing device uncollected garbage is taking memory and
[01:28:01.300 --> 01:28:07.740]  And memory is a precious resource. It's almost like you're like in a studio apartment. You know and you have uncollected garbage
[01:28:08.940 --> 01:28:10.940]  yeah, and the thing is
[01:28:10.940 --> 01:28:15.860]  Again good garbage collectors take advantage of this to try to be smart about like what if I'm not in a tight loop and inside
[01:28:15.860 --> 01:28:21.200]  This loop I do something with some amount of memory, but on the next iteration of the roof. I'm totally done with it
[01:28:21.200 --> 01:28:22.540]  I don't need a new set of memory
[01:28:22.540 --> 01:28:25.900]  I can just keep reusing that same region of memory over and over again in this tight loop
[01:28:25.900 --> 01:28:31.140]  I don't need to allocate and get rid of it like I just need to know say I'm using it okay now
[01:28:31.140 --> 01:28:34.660]  I'm done. I'm using it. I'm done. I'm using it, and I'm done rather like say
[01:28:34.660 --> 01:28:38.540]  You're just creating a new object in loop every time a very naive old-style garbage collector
[01:28:38.540 --> 01:28:41.260]  I like oh you're making a new object. I you need some memory for that object
[01:28:41.260 --> 01:28:43.040]  Let me get that memory for that object here you go
[01:28:43.040 --> 01:28:46.860]  I gave you the memory you make it and you go to the next iteration of loop and the garbage collector hasn't run yet
[01:28:46.860 --> 01:28:50.700]  And it's like oh you're making a new object you need some memory for that object and a programmer
[01:28:50.860 --> 01:28:55.820]  Manually managing memory would never like allocate the memories. I've got the memory from the old objects. I'm done with it
[01:28:55.820 --> 01:29:01.100]  I'm not using it anymore. Just take this right and so a good programmer might not well
[01:29:01.100 --> 01:29:03.740]  We've all run into code that was written like that though
[01:29:03.740 --> 01:29:08.380]  But this is the problems that they really primitive garbage collectors back in the day and they garbage became smarter
[01:29:08.380 --> 01:29:11.260]  It's like oh well and for a smarter garbage collector
[01:29:11.260 --> 01:29:15.340]  We can divide the world up into objects that are short-lived and objects that hang around for a long time
[01:29:15.340 --> 01:29:19.860]  And let's make these different pools about these short-lived objects and the ones that hang around and let's try to you know
[01:29:20.180 --> 01:29:23.780]  What you're trying to do is get to the point where if you gave this to?
[01:29:23.780 --> 01:29:27.920]  But you know if you gave this to an assembly language programming you showed the assembly language
[01:29:27.980 --> 01:29:31.060]  They wouldn't look at it and go this is the stupidest code I've ever seen in my life
[01:29:31.060 --> 01:29:33.060]  I guess it's incredibly wasteful of resources
[01:29:33.420 --> 01:29:36.380]  You know you want them to look at and go oh, oh, yeah
[01:29:36.380 --> 01:29:39.300]  No, that's that's pretty much as efficiently as you could have written it like I'm you're not
[01:29:40.060 --> 01:29:43.340]  Allocating tons of memory and then leaving it
[01:29:43.620 --> 01:29:47.820]  Allocated and not reusing it because you don't know that you can look at it and say well here
[01:29:47.820 --> 01:29:50.980]  I am I'm looking to the assembly code. I can tell this memory is never accessed again
[01:29:50.980 --> 01:29:54.460]  Why are you keeping it around while the garbage collector doesn't know that yet or whatever?
[01:29:54.460 --> 01:29:59.740]  so this is this is a kind of a philosophical debate can garbage collection ever be as
[01:30:00.020 --> 01:30:04.380]  efficient and as predictable as manual memory management and
[01:30:04.900 --> 01:30:06.340]  arc and
[01:30:06.340 --> 01:30:09.640]  But underlies you know Swift and objective-c with arc
[01:30:10.060 --> 01:30:15.940]  It's trying to say we're going to try to automate the part where we say retain this do stuff with it release it retain this
[01:30:15.940 --> 01:30:19.100]  Do stuff with it release it so that the developer doesn't have to write it
[01:30:19.100 --> 01:30:22.260]  But so that the compiler writes this so that if we were to look at the assembly code
[01:30:22.500 --> 01:30:26.580]  We can see a predictable pattern because there is some overhead to doing all of those
[01:30:26.860 --> 01:30:31.980]  You know bumping up the retain counts and releasing like that's in your running code
[01:30:31.980 --> 01:30:36.220]  It's the code of the garbage code doesn't need to do it doesn't need to increment retain counts and decrement retain counts
[01:30:36.220 --> 01:30:39.060]  It can just run because it knows the garbage collector is going to take care of that
[01:30:39.420 --> 01:30:45.700]  And so the bet with arc and Swift is it is more efficient and predictable to do that work in line
[01:30:45.700 --> 01:30:51.500]  because then we know exactly when that work will be done and we can do we can be smarter about it like we can in
[01:30:51.500 --> 01:30:55.660]  The in the binary that we generate look at it and say are we being smarter?
[01:30:55.660 --> 01:30:59.980]  We being stupid here versus if you're running the garbage collector. You're like well now. There's two things in play
[01:30:59.980 --> 01:31:04.900]  There's the program, and then there's the garbage collector and the program looks okay in terms of what it's doing semantically
[01:31:05.060 --> 01:31:07.060]  But how will the garbage collector?
[01:31:07.580 --> 01:31:13.140]  Interact with us how would deal with the memory and know when to make it available for reuse or whatever
[01:31:13.140 --> 01:31:17.540]  I don't know if I'll be able to find it. I did I remember reading on
[01:31:19.140 --> 01:31:20.420]  What's that website Quora
[01:31:20.420 --> 01:31:23.420]  I remember reading a Quora page where somebody asked why do
[01:31:23.700 --> 01:31:29.560]  Android devices tend to ship with so much more RAM than iOS devices and like the top voted answer was
[01:31:30.020 --> 01:31:35.180]  I don't know who wrote it, but it was more or less. You know that because Android is garbage collected
[01:31:35.180 --> 01:31:38.620]  It's effectively Java. It's it's Java running in Google's
[01:31:39.420 --> 01:31:41.420]  handmade
[01:31:41.420 --> 01:31:43.420]  ripoff of
[01:31:43.500 --> 01:31:45.500]  Java
[01:31:48.460 --> 01:31:52.300]  I'm there's no way you can convince everybody this and and I do think there is a
[01:31:52.620 --> 01:31:57.580]  Factor in this where Apple just wants to use less RAM because it's cheaper and they save money
[01:31:57.580 --> 01:31:59.620]  And this is one of the ways that they get to
[01:32:00.780 --> 01:32:06.420]  You know 38 39 percent profit margins, but there really is a factor there that
[01:32:06.420 --> 01:32:11.580]  And from an effective standpoint like a Android device that ships with three gigs of RAM
[01:32:11.780 --> 01:32:18.340]  Has about as much effective RAM for you as the user using device as an iOS device with one gigabyte of RAM
[01:32:18.580 --> 01:32:19.820]  Yeah, and this is like I said
[01:32:19.820 --> 01:32:24.780]  This is before we even consider the idea of like bytecode although Apple's going that direction with its bitcode thing, but not quite
[01:32:24.780 --> 01:32:31.340]  but anyway, the idea in the Java virtual machine or any kind of virtual machine that you that but you produce is
[01:32:31.340 --> 01:32:39.260]  binary code for the virtual machine and the virtual machine is this hypothetical thing that is not your actual CPU and then
[01:32:39.660 --> 01:32:42.940]  The virtual machine itself will will execute that code
[01:32:43.460 --> 01:32:48.620]  natively on the CPU like so that the whole idea with job was like oh you can make this one Java bytecode application and
[01:32:48.620 --> 01:32:55.020]  Send it to an x86 device and a power PC device and an alpha device and this same quote-unquote binary because it's bytecode
[01:32:55.020 --> 01:33:00.820]  We're running all of them because they all have Java virtual machines and those Java vulture vulture machines will execute natively on the individual
[01:33:00.820 --> 01:33:05.220]  Platforms, but you just have one binary. That was the right one to run anywhere type of thing
[01:33:06.220 --> 01:33:11.860]  For I'm not sure what the Dalvik design is, but I think they have I think they still have bytecode
[01:33:12.220 --> 01:33:17.540]  But either way like the idea of a virtual machine is you have a you don't have a real target architecture
[01:33:17.540 --> 01:33:22.060]  You have a virtual machine and that's what you're you're coded to and then you have to eventually get to native code
[01:33:22.060 --> 01:33:27.100]  So it's just more stuff between you and seeing how this is gonna actually execute on your actual hardware
[01:33:27.100 --> 01:33:33.300]  Yeah, and I do think I think that's a keen observation that this whole segment of the show that that Swift is a bet
[01:33:33.580 --> 01:33:35.580]  That there is something
[01:33:35.620 --> 01:33:37.620]  Better there's a better way to
[01:33:37.900 --> 01:33:41.900]  better way to get all the advantages of those garbage collected virtual machines and
[01:33:42.620 --> 01:33:48.060]  Avoid all of the overhead. Yeah, and that the meta the meta thing in that bet like again
[01:33:48.060 --> 01:33:49.260]  It's theoretically in computer science
[01:33:49.260 --> 01:33:53.820]  You can have all these debates about is it theoretically possible to have a pause free garbage collector that has better performance because like I said
[01:33:53.820 --> 01:33:58.700]  There are advantages to the garbage collectors. It doesn't have to have that inline code that messes with the you know
[01:33:58.700 --> 01:34:02.840]  Memory management in in the actual execution of the program. It can just go forward as fast as it can
[01:34:03.300 --> 01:34:07.580]  And if the garbage collector could do its job and keep up with it and how to serve it, that would be great
[01:34:07.580 --> 01:34:11.420]  but the other part of this is like the idea that
[01:34:14.700 --> 01:34:21.380]  Computing power not just like CPU power whatever but just if you were to graph anything having to do with computing power in terms of
[01:34:21.380 --> 01:34:26.740]  How fast can we get to memory? How much memory do we have? What is the single threaded integer performance of a CPU?
[01:34:26.740 --> 01:34:32.180]  I think I saw a chart about like single threaded integer performance of Intel CPUs over the past 10 years or whatever
[01:34:32.620 --> 01:34:37.820]  and the curve is not a hockey stick going up anymore like in the in our youth in the heyday of
[01:34:38.620 --> 01:34:42.820]  CPU architectures every year there'd be a new chip and it would be like twice as fast and you know
[01:34:42.820 --> 01:34:45.420]  Your code would just get magically fast. You didn't have to recompile it
[01:34:45.420 --> 01:34:46.780]  You didn't have to use any new technology
[01:34:46.780 --> 01:34:51.580]  like that the clock speed would double and the you know, the the number of
[01:34:51.980 --> 01:34:55.420]  Execution units would double and just everything was was roses every year. I
[01:34:56.260 --> 01:34:58.820]  Remember and this is as late as the 90s
[01:34:58.820 --> 01:35:04.220]  I had an internship at a Windows software development place and I was writing, you know
[01:35:04.860 --> 01:35:08.100]  Dawson Windows code and everybody had a 486 and
[01:35:08.700 --> 01:35:13.660]  The Pentiums were just coming out. So I don't know what year this would have been probably around 95
[01:35:13.660 --> 01:35:18.740]  Maybe 94 somewhere around there and the one guy got one first
[01:35:18.740 --> 01:35:24.620]  One of the engineers got one first and it was so ridiculously faster than everybody else and it gave us good kit
[01:35:24.620 --> 01:35:29.540]  I mean, you know usually programmers get good good devices because they really you know
[01:35:29.540 --> 01:35:31.700]  You even if you're like a penny-pinching manager
[01:35:31.700 --> 01:35:37.580]  If it takes a long time for the code to compile getting your engineers machines that compile code faster is worth it
[01:35:37.660 --> 01:35:40.820]  This guy's machine was so much faster that we would people would wait
[01:35:40.820 --> 01:35:47.140]  Until he was like away from his desk and then use his computer to compile stuff because it was took less time than waiting for
[01:35:47.140 --> 01:35:51.180]  It to compile at your own desk. Yeah, I remember just like seeing doom running on like
[01:35:52.260 --> 01:35:56.340]  First time I saw doom run on the Pentium. This is before the edge of video cards. This is all in the CPU
[01:35:56.460 --> 01:36:00.260]  It was just magic how much faster it was you just and it was the same program
[01:36:00.260 --> 01:36:04.020]  Like it was the same program and just for free your everything you did got faster, right?
[01:36:04.020 --> 01:36:06.580]  So when we were in that part of the hockey stick curve
[01:36:06.580 --> 01:36:11.020]  like the graph I saw it look like it had at that part of the hockey stiff curve where it's like going up up up and
[01:36:11.020 --> 01:36:15.820]  Then it starts to level off and it becomes kind of like a mound, you know, we're going the slope is decreasing over time
[01:36:16.620 --> 01:36:17.820]  and
[01:36:17.820 --> 01:36:19.780]  If we were still on that hockey stick
[01:36:19.780 --> 01:36:26.060]  I think it's inevitable that VMS and any sort of higher abstraction thing would have won because it's like yeah
[01:36:26.060 --> 01:36:28.060]  it's a little bit slower and
[01:36:28.060 --> 01:36:34.000]  Yeah, you can get behind and we may be using more memory than they're supposed to but just everything is on this big hockey stick
[01:36:34.000 --> 01:36:37.500]  And it doesn't matter your concerns are pointless. They will be dwarfed by by the
[01:36:38.660 --> 01:36:42.780]  Inextricability of progress and progress has slowed for two reasons one
[01:36:43.540 --> 01:36:46.300]  The the move to mobile has pushed everybody back down
[01:36:47.020 --> 01:36:51.420]  That that chart a little bit and then we kind of think we're back in the hockey stick area where it's like
[01:36:51.420 --> 01:36:53.580]  Oh apples like doubling their CPU speeds every day
[01:36:53.580 --> 01:36:56.580]  but all they did was they just got shoved back down down the hockey stick because
[01:36:57.280 --> 01:37:01.860]  we're these things for these tiny little CPUs with small batteries and
[01:37:01.860 --> 01:37:05.200]  Thermal envelopes that don't allow for you know fans or anything like that
[01:37:05.300 --> 01:37:10.300]  So we're kind of back in and the the you know, the olden days, but that means we're also back in performance
[01:37:10.300 --> 01:37:13.200]  So we like on the iPhone CPUs. They used to be like dishwasher
[01:37:13.700 --> 01:37:20.220]  Operating dishwasher CPUs like they were terrible and they've been slowly catching up to now like with the iPad Pro
[01:37:20.220 --> 01:37:23.340]  It's like this is a modern MacBook CPU, but not
[01:37:23.900 --> 01:37:28.380]  Surpassing the desktop. No, it's right. No, so there there's still there
[01:37:28.380 --> 01:37:35.340]  we're still everything is slower and that's been a huge advantage for Apple having a native platform like back in the day where everything was
[01:37:35.340 --> 01:37:35.940]  objective C
[01:37:35.940 --> 01:37:41.900]  Which is a C based language to be able to to just get the iPhone one out the door and working like it's why the Blackberry
[01:37:41.900 --> 01:37:44.260]  People thought it was a fake demo because it seemed impossible
[01:37:45.060 --> 01:37:50.940]  Well, and then we see things like the watch where we're pushed back to wow. This is really slow again
[01:37:51.300 --> 01:37:54.940]  Yeah, and then the other aspect of this is Moore's law Moore's law
[01:37:54.940 --> 01:38:03.100]  Can't continue forever. The term it was like a the density of transistors on a CPU doubling every 18 months
[01:38:03.100 --> 01:38:06.580]  well, eventually you get down to like quarks and gluons like you can't you know,
[01:38:07.660 --> 01:38:11.260]  Having the size of things the math starts to get really funky really fast
[01:38:11.260 --> 01:38:15.000]  And as far as we are aware, you can't keep subdividing matter forever
[01:38:15.000 --> 01:38:18.540]  Eventually you get down to fundamental particles and way before you get down to fundamental particles
[01:38:18.740 --> 01:38:22.900]  everything becomes screwy in terms of the laws of physics and quantum mechanics and it's so
[01:38:22.900 --> 01:38:28.980]  so lithography sizes like we continue to march forward, but there there is an end in sight where
[01:38:29.460 --> 01:38:34.740]  you're gonna have to come up with a new technology like quantum computing or you know, like just
[01:38:35.140 --> 01:38:41.540]  that it's not as if this hockey stick can't go on forever and so the bet with Swift is the error of time that we're
[01:38:41.540 --> 01:38:43.540]  in now where progress on
[01:38:44.180 --> 01:38:48.920]  computing power and performance has for for both like practical reasons
[01:38:48.920 --> 01:38:54.500]  you know in terms of how much harder is it for Intel to make their top-end CPUs faster every year and how long does it
[01:38:54.500 --> 01:38:58.420]  take to get to the next process node for making you know feature sizes smaller and CPUs and
[01:38:58.580 --> 01:39:04.340]  because of the move to mobile and wearable and who knows what else that this is a good time to say I
[01:39:04.900 --> 01:39:13.300]  Don't think the hardware is gonna make it so that those virtual machines are a better suited to Apple's needs then
[01:39:13.300 --> 01:39:19.500]  the solution that represented by Swift and arc with Objective C and so let's say
[01:39:19.500 --> 01:39:22.420]  You know Swift is the language from the next 20 years in the next 20 years
[01:39:22.420 --> 01:39:25.940]  We feel like this is the best technical solution until quantum computers or whatever
[01:39:26.020 --> 01:39:29.960]  This is what we're going with and Apple is essentially begging the company on that
[01:39:30.660 --> 01:39:35.060]  and it's been a good bet so far because like I said, I think it gave them a huge advantage during the
[01:39:36.820 --> 01:39:39.300]  iPhone era essentially the iOS device error
[01:39:39.300 --> 01:39:44.780]  Where it was very difficult for the competitors to catch up with them until the CPUs did start climbing up that hockey stick and said
[01:39:44.780 --> 01:39:49.140]  Now now we can support a Java virtual machine and have a responsive GUI
[01:39:49.700 --> 01:39:51.700]  You know just put a little more RAM in there
[01:39:52.300 --> 01:39:58.180]  It occurs to me and I don't want to spend a lot of time speculating about a car on this episode at least
[01:39:58.180 --> 01:40:04.300]  But one of the things that makes me laugh about the car idea is that it's like the one team at Apple
[01:40:04.300 --> 01:40:08.700]  That's writing software that that the computing part of the device
[01:40:10.180 --> 01:40:12.740]  It doesn't have to really worry about battery life
[01:40:12.740 --> 01:40:17.060]  I mean the car itself obviously is going to have to worry about battery life tremendously
[01:40:17.060 --> 01:40:20.820]  But the amount of the battery that comes towards propelling a you know
[01:40:21.780 --> 01:40:24.420]  multi-ton device is you know
[01:40:25.260 --> 01:40:29.020]  Everything and the little computer that lights up the dashboard and maybe you know
[01:40:29.220 --> 01:40:32.540]  Does whatever else with the sensors and stuff is kind of insignificant
[01:40:32.540 --> 01:40:36.980]  But it's really the exception to where things are going the watch to me is the better
[01:40:37.660 --> 01:40:44.380]  You know example of where things are going where the computing device is getting smaller and smaller
[01:40:44.380 --> 01:40:46.820]  I mean and you know, I don't know what the idea would be
[01:40:46.820 --> 01:40:51.940]  but surely they're gonna be making devices that make the watch look big, you know in the years to come and so
[01:40:52.460 --> 01:40:57.660]  They're never gonna get out of the need. I don't think in the foreseeable future to to have
[01:40:59.180 --> 01:41:01.180]  Really efficient code that runs on
[01:41:01.180 --> 01:41:04.460]  Really what everybody would consider to be a painfully slow
[01:41:05.260 --> 01:41:12.780]  processor because we keep the desire to keep making things smaller and smaller and have little fingernail sized things that that do clever stuff is
[01:41:13.420 --> 01:41:14.860]  inevitable
[01:41:14.860 --> 01:41:18.700]  Yeah, and really you have to view it kind of as like as epochs in history
[01:41:18.700 --> 01:41:23.020]  Like there was there was the part where we were growing up which was awesome where computers would get faster more powerful
[01:41:23.020 --> 01:41:26.940]  Just like everything about them would get better just year after year and it was amazing, right?
[01:41:26.940 --> 01:41:33.100]  And if you get starry-eyed and extrapolate from that you'd be like by the time we're adults computers will be infinitely fast and have more
[01:41:33.260 --> 01:41:38.300]  Memory you the size of a planet, right? But no, that's not how it works. We start reaching the limits of you know
[01:41:39.420 --> 01:41:43.580]  silicon wafer lithography and all the other and instruction level parallelism and all the other sort of
[01:41:44.140 --> 01:41:50.860]  Very difficult problems that make it harder to make you know, or even just like heat dissipation with the the megahertz wars like
[01:41:51.500 --> 01:41:54.460]  You know, what are we using now three four gigahertz CPUs?
[01:41:54.460 --> 01:41:57.500]  They had three four six gigahertz CPUs a long time ago, too
[01:41:57.500 --> 01:42:02.860]  Why are we not using seven hundred gigahertz CPUs? Like we're bringing to the limits of the current way we do computation
[01:42:03.580 --> 01:42:05.020]  and so
[01:42:05.020 --> 01:42:10.060]  We're kind of in it's not a dead period like we're making progress and we're doing interesting things and we're going the other direction
[01:42:10.060 --> 01:42:14.220]  Saying well, we're not making a lot of progress on the top end, but we can shrink these suckers down really small now
[01:42:14.220 --> 01:42:14.940]  Isn't that pretty awesome?
[01:42:14.940 --> 01:42:16.940]  You can have a smartphone or a smartwatch
[01:42:16.940 --> 01:42:21.900]  But there will have that inevitably come a time where we come out of this slower period and go up into another hockey stick again
[01:42:21.900 --> 01:42:26.060]  Whether it's quantum computing or whatever whether we're all dead or not. Like there will be further progress
[01:42:26.060 --> 01:42:30.700]  it's not the end of progress, but if you're Apple and you're trying to figure out how to
[01:42:31.260 --> 01:42:35.340]  Make the development platform for right now and for the next 20 years
[01:42:35.340 --> 01:42:39.500]  You have to sort of bet like what is the best fit for this and it's you know
[01:42:39.500 --> 01:42:45.660]  Apple have the benefit of everyone else going first and going with virtual machines whether it be Java or C sharp or the
[01:42:45.980 --> 01:42:50.540]  Common language runtime at Microsoft and seeing how JavaScript is worked out in the browser
[01:42:50.540 --> 01:42:55.740]  And they've essentially said because of both mobile and the slowdown in the top-end performance increase
[01:42:55.740 --> 01:43:00.780]  We believe this is the best bet for the next 20 years or so because they saw everyone else go before them
[01:43:01.340 --> 01:43:03.340]  And so that that's where we are with this
[01:43:03.340 --> 01:43:07.820]  I don't think you know Swift is not if so if it's the language for the next hundred years it could be
[01:43:09.020 --> 01:43:14.540]  But again the beauty of these details not being in Swift itself is there's nothing in the language itself that dictates that it couldn't be
[01:43:14.540 --> 01:43:18.140]  Run on top of a virtual machine. It's just that's not the correct solution for Apple right now
[01:43:18.140 --> 01:43:21.420]  And that's not what they're doing. Yeah. All right
[01:43:21.420 --> 01:43:25.420]  Let me tell you about our next friend of the show and it's our good friends at wealthfront
[01:43:25.900 --> 01:43:32.300]  These guys have been sponsoring to show the last few episodes. They are here's what they give you a low cost automated investment service
[01:43:32.460 --> 01:43:35.420]  It makes it super easy to invest your money the right way
[01:43:36.300 --> 01:43:43.580]  You just put money into wealthfront account and then they manage the portfolio you you ask they ask you a couple questions about like how?
[01:43:44.540 --> 01:43:46.620]  risk averse you are how aggressive you want to be
[01:43:46.620 --> 01:43:50.620]  Because you can obviously investing money, you know that goes into the stock market. It could go down
[01:43:50.620 --> 01:43:52.620]  It's not you know, it's not a bank account
[01:43:53.340 --> 01:43:58.540]  So they ask you a couple questions to see how comfortable you are with risk and then they just take it from there and that's it
[01:44:00.220 --> 01:44:04.140]  They literally say whether you're just starting out you can I think you can open account which is 500 bucks
[01:44:05.260 --> 01:44:10.220]  If you want to put millions of dollars in there, you can do it too. That seems crazy to me, but
[01:44:11.100 --> 01:44:13.660]  You know really it scales all the way from you know
[01:44:13.660 --> 01:44:17.740]  You being five hundred dollars put in a market to millions of dollars. You can do it
[01:44:18.140 --> 01:44:20.620]  Why would you use them instead of a traditional money manager?
[01:44:20.860 --> 01:44:25.660]  Basically, what wealth front is is an automated service that replaces a human money manager
[01:44:26.300 --> 01:44:30.780]  The big reason to do it is that number one. They're just putting money into index funds
[01:44:30.780 --> 01:44:36.700]  Anyway, which is really a smart long-term strategy if you read anything about the ways that people can actually
[01:44:38.140 --> 01:44:42.060]  You know invest for success in the long term putting your money into index funds is the way to go
[01:44:42.060 --> 01:44:46.700]  That's pretty much what wealth front does, but they balance it between different index funds based on you know
[01:44:47.260 --> 01:44:50.940]  monitoring and systems all the time, you know monitoring the market all the time and
[01:44:51.500 --> 01:44:55.580]  Moving money around between different index funds to keep your risk at the right level
[01:44:56.460 --> 01:45:03.020]  And the big thing is is that wealth front charges way lower fees than traditional money managers
[01:45:03.580 --> 01:45:08.940]  1.0 1% is about the average but some of the some of the money managers out there charge up to 3%
[01:45:08.940 --> 01:45:14.220]  And that's of what you have under management. So if you have, you know, ten thousand dollars under management
[01:45:14.220 --> 01:45:19.500]  They they take a fee of three percent of your money not like your profits, but your money that's in there
[01:45:20.860 --> 01:45:22.300]  Wealthfront's
[01:45:22.300 --> 01:45:25.180]  Fee is just zero point two five percent
[01:45:25.900 --> 01:45:28.140]  And they only start charging that
[01:45:28.940 --> 01:45:29.900]  above
[01:45:29.900 --> 01:45:30.940]  ten thousand dollars
[01:45:30.940 --> 01:45:32.300]  so if you
[01:45:32.300 --> 01:45:36.140]  Only, you know, once you get ten thousand dollars in your account, that's when they start charging. They're
[01:45:36.140 --> 01:45:38.380]  0.25
[01:45:38.380 --> 01:45:42.460]  Fee and if you use the code that I have here for you
[01:45:42.460 --> 01:45:49.020]  They actually bump that up to fifteen thousand and so if you have fifteen thousand and then one put one more dollar in there
[01:45:49.020 --> 01:45:53.740]  They charge the fee on that one dollar that's over fifteen thousand. Keep going from there
[01:45:55.260 --> 01:45:58.080]  Go to here's where you go to find out more wealthfront.com
[01:45:59.100 --> 01:46:04.780]  The talk show and again, uh, you can start with just 500 bucks and they even sit in the back of the room
[01:46:04.780 --> 01:46:09.660]  500 bucks and they even say right here that that's really how most of the people who sign up for worldfront do it
[01:46:09.900 --> 01:46:11.900]  Put a little money in there see how it works
[01:46:12.140 --> 01:46:16.220]  And then when you see how it works and you like the results, that's when you put your quote-unquote real money in
[01:46:17.420 --> 01:46:19.180]  So go to wealthfront.com
[01:46:19.180 --> 01:46:22.380]  slash the talk show you'll actually save money because uh
[01:46:22.460 --> 01:46:26.860]  You get that you get bumped up to fifteen thousand dollars before they even start charging you a nickel
[01:46:27.980 --> 01:46:32.620]  So go check them out and here's the part where I have to try to stay out of prison for compliance purposes
[01:46:32.620 --> 01:46:37.740]  I have to tell you that wealthfront incorporated is an sec registered investment advisor
[01:46:38.460 --> 01:46:42.000]  Brokerage services are offered through wealthfront brokerage corporation
[01:46:42.940 --> 01:46:51.020]  Member finra and sipc. This is not a solicitation to buy or sell securities investing in securities involves risks
[01:46:51.180 --> 01:46:58.620]  And there is the possibility of losing money past performance is no guarantee of future results. Please visit wealthfront.com to read
[01:46:59.180 --> 01:47:01.180]  their full disclosure
[01:47:01.180 --> 01:47:03.900]  So far so good. Nobody from the sec has gotten on me about this
[01:47:05.180 --> 01:47:07.180]  It's only a matter of time till they find you
[01:47:10.060 --> 01:47:13.180]  Anything else on swift and and the federighi interview
[01:47:14.380 --> 01:47:19.500]  I hope they do more of those things. Um, and I I think we're are we working our way down the ladder?
[01:47:19.500 --> 01:47:23.900]  I guess we kind of are like schiller, uh coming to talk show and now
[01:47:24.620 --> 01:47:29.420]  Federighi and like we keep going down to like chris chris latner is on like open source
[01:47:29.420 --> 01:47:35.500]  Podcast talking about programming languages with nerds then eventually you get like individual developers on like the ui kit team
[01:47:36.140 --> 01:47:41.740]  Doing interviews. Well, maybe they won't go that far but I don't know I like the idea because as you go down the chain people
[01:47:42.460 --> 01:47:48.540]  You would think would be both in the position and enthusiastic about talking about more small technical details, right?
[01:47:49.100 --> 01:47:53.820]  The old apple the idea was there's only we speak with one voice from the top
[01:47:53.820 --> 01:47:58.860]  Uh in and that one voice doesn't say too much and now now we're kind of moving down the ladder
[01:47:58.860 --> 01:48:05.420]  Well, we speak with multiple voices from the top tiers and so they can talk about a little bit different things like, you know
[01:48:05.420 --> 01:48:08.060]  Phil Schiller is not going to talk to you about uh, you know
[01:48:08.860 --> 01:48:15.660]  Runtime casting things into protocols, right but craig freddie re you will so as you keep going down the the the conversations get
[01:48:16.540 --> 01:48:22.460]  More interesting to narrower audiences as opposed to always just being like the big picture. What is apple doing type of stuff?
[01:48:22.460 --> 01:48:28.620]  So I enjoy that the thing i've detected it what I would define the new apple the difference between old apple and new apple
[01:48:29.740 --> 01:48:35.180]  Is that there remain committed to secrecy on future products for the exact same reasons
[01:48:35.180 --> 01:48:39.580]  They always have been that they don't want competitors to know and that from a marketing perspective
[01:48:39.580 --> 01:48:42.140]  They feel that being able to unveil these things as a surprise
[01:48:42.940 --> 01:48:48.380]  Is an advantage and that gets them a lot of publicity around their events and announcements that they wouldn't have if they were
[01:48:48.540 --> 01:48:51.740]  Blabbing about everything in advance and they're not going to be able to do that
[01:48:51.740 --> 01:48:54.860]  And I think also just the good old-fashioned
[01:48:55.420 --> 01:49:02.060]  uh under promise over overdeliver that if you keep talking about stuff in the future all the time inevitably some of these things are gonna
[01:49:02.700 --> 01:49:06.540]  Ship late and then you've disappointed people in terms and you know
[01:49:07.100 --> 01:49:12.140]  But for stuff that's already shipped and talking about decisions they've already made and the stuff that's out there
[01:49:12.620 --> 01:49:17.580]  I think that's where the difference is and I feel like old apple was if we're misunderstood screw them
[01:49:17.580 --> 01:49:21.740]  I don't we don't care, you know, you either get it or you don't and I feel like new apple
[01:49:23.740 --> 01:49:29.900]  At an executive level really is it's it's the openness is coming from the frustration I think of
[01:49:30.380 --> 01:49:34.460]  Being misunderstood and feeling like if we could just explain ourselves
[01:49:34.700 --> 01:49:37.580]  We'd be less misunderstood and I wish that we could do that
[01:49:38.140 --> 01:49:42.940]  If only like we all of our commentary on our blogs and podcasts and everything only had a username
[01:49:42.940 --> 01:49:44.940]  But they had no way to contact us like the app store
[01:49:44.940 --> 01:49:50.540]  Would that be frustrating apple like if people were misunderstanding you but there was just no way you could find who this john grueber guy
[01:49:50.540 --> 01:49:52.540]  Was to talk to him about it
[01:49:52.780 --> 01:49:55.580]  I mean this that's a good contrast in terms of the organizations like
[01:49:56.620 --> 01:50:01.900]  They'll talk a lot about the road map for swift and swift 3 and engage with the community about what would be best about
[01:50:01.900 --> 01:50:05.980]  This programming language that now is going to be much bigger than apple itself and as a community project
[01:50:06.300 --> 01:50:09.500]  But no one will talk to you about the app store. Even if you have an ad, you know, it's just
[01:50:09.500 --> 01:50:14.620]  Such a such a contrast in terms of if I could just talk to a person who would be reasonable with me
[01:50:14.940 --> 01:50:19.820]  Like surely we could work this out. You hear all the the crazy stories about like an app that's in review
[01:50:19.820 --> 01:50:24.780]  Whoever or they think you're violating someone's copyright when it's like no, you don't understand it's the opposite
[01:50:24.780 --> 01:50:30.220]  They're violating mine and just things that you feel like could be worked out between two reasonable people who just talk to each other on the phone
[01:50:30.460 --> 01:50:34.940]  That nevertheless take months to come to an unsatisfying conclusion that what was there was a
[01:50:34.940 --> 01:50:39.740]  An app store. Oh, I know it was when uh, what was the app that that quit the app store?
[01:50:41.020 --> 01:50:44.780]  Which one sketch well, no the one that was recent so sketch
[01:50:45.660 --> 01:50:51.580]  Announced that they were leaving the app store and I again, I don't know. I don't want to call it the straw that broke the camel's back
[01:50:51.580 --> 01:50:54.300]  I don't know that it's going to mean that anything is going to happen
[01:50:54.300 --> 01:50:58.700]  But to me it was just emblematic of the problems and especially in the mac app store
[01:50:58.700 --> 01:51:04.220]  Because sketch was to my mind the prototypical modern
[01:51:04.540 --> 01:51:09.500]  Mac productivity app it's it's beloved. It's so popular
[01:51:09.500 --> 01:51:13.980]  I mean an apple obviously knows it's popular they ship with like the the watch os
[01:51:14.700 --> 01:51:21.660]  Sdk's they ship uh photoshop templates for watch ui design and sketch templates for watch ui design
[01:51:21.660 --> 01:51:25.340]  So and I think those are the only two, you know, obviously anybody who uses the watch
[01:51:25.340 --> 01:51:30.700]  So and I think those are the only two, you know, obviously anybody who uses a different graphics program could open up the psds
[01:51:30.940 --> 01:51:32.300]  And convert them or something like that
[01:51:32.300 --> 01:51:38.300]  But the two that apple ships, you know that you can just download from apple.com are for sketch and photoshop
[01:51:38.380 --> 01:51:42.940]  So to put it on the same pedestal as photoshop is you know, it's pretty good
[01:51:43.660 --> 01:51:44.540]  um
[01:51:44.540 --> 01:51:50.540]  And they've won apple design awards and they've been heavily promoted in the app store and for them to leave the app store to me
[01:51:50.540 --> 01:51:57.180]  It's just wow if they if they're not happy in the app store, who is this? That's when that's when apple's narrative doesn't fit anymore
[01:51:57.260 --> 01:52:01.500]  Because if you're an apple and you want to have a narrative to make yourself feel better about app store complaints
[01:52:01.500 --> 01:52:02.700]  You'd be like well
[01:52:02.700 --> 01:52:05.740]  These are just kind of like the same way you talk about the complaints about you know
[01:52:05.740 --> 01:52:09.660]  I don't need arc retain release is fine. Like well, these are just the old people like we love them
[01:52:09.740 --> 01:52:12.060]  They're loyal to our platform. They've been there a long time
[01:52:12.620 --> 01:52:18.140]  Your adobes your microsofts or whatever, but really the future of the platform is about new blood
[01:52:18.140 --> 01:52:23.580]  It's about new developers developers. We haven't heard of like say someone makes a new graphics application. That's not adobe
[01:52:23.980 --> 01:52:30.060]  Uh, that's from a smaller team that grows up on our platform that we were the first and only platform that they targeted
[01:52:30.380 --> 01:52:35.740]  That it is native to us that you know, like that's what apple wants like. Oh these this
[01:52:36.460 --> 01:52:40.700]  Fresh young faces like new talent essentially that because that's the future of the platform
[01:52:40.700 --> 01:52:45.500]  The future of the platform is not old crusty people who've been shipping on apple platforms for 30 years, right?
[01:52:45.500 --> 01:52:50.640]  It's new people. And so if a new company you've never heard of comes along and makes this great graphics application
[01:52:51.420 --> 01:52:56.860]  that uh as you know taking the world by storm and apple saying putting them up alongside photoshop and they say
[01:52:57.340 --> 01:53:00.060]  Uh, you know, you know, we're out we can't take this app store stuff anymore
[01:53:00.140 --> 01:53:02.540]  Then you can't just say well really the app store is great for everybody
[01:53:02.540 --> 01:53:06.300]  It's just you old crusty people who are used to the old ways, you know, it breaks the narrative
[01:53:06.540 --> 01:53:06.700]  Yeah
[01:53:06.700 --> 01:53:10.860]  One of the ways that sketch again is like to me a poster child of what apple wants
[01:53:10.860 --> 01:53:16.620]  third-party apps to be is like exactly what you said it's mac only and it's not mac only because they you know,
[01:53:16.620 --> 01:53:21.420]  it's because they've how does a small team build an app that in some ways can
[01:53:22.460 --> 01:53:29.340]  Compete toto to Photoshop. It's because they're leveraging all of this great graphics stuff built into mac os 10
[01:53:29.900 --> 01:53:32.780]  Um, same thing with pixelmator same thing with acorn
[01:53:33.500 --> 01:53:38.220]  From our pal gus, you know that these apps written these graphics apps written by really small
[01:53:38.220 --> 01:53:42.700]  Teams, I mean gus is the only developer at flying meat. I mean, it's a one-person team there
[01:53:43.420 --> 01:53:50.620]  He he can make an app that that credibly stands as a professional image editor because he's leveraging
[01:53:50.860 --> 01:53:55.900]  it wouldn't even make any sense to go cross-platform because it's it's all built on the system stuff and
[01:53:56.540 --> 01:53:58.620]  That's what apple wants for multiple reasons one
[01:53:59.100 --> 01:54:01.820]  that's why they give you these apis and they
[01:54:01.980 --> 01:54:06.940]  are happy to see them used and then they know that when they add new features to the operating system like
[01:54:06.940 --> 01:54:10.940]  What's the thing on the new retina 5k max where there's more colors on the monitor the
[01:54:11.500 --> 01:54:14.700]  P3 color color gamut or whatever it's called, right?
[01:54:14.860 --> 01:54:17.980]  So then these apps and I think sketch one of these apps
[01:54:17.980 --> 01:54:20.540]  I know I just saw in the release notes on the app store one of them just
[01:54:20.940 --> 01:54:22.940]  Released an update that has support for it already
[01:54:23.500 --> 01:54:29.920]  Whereas in the old days when you're you know, like and not to badmouth adobe but like with adobe stuff where they're cross-platform
[01:54:30.220 --> 01:54:33.900]  They couldn't adopt like a new great new mac technology like this
[01:54:33.900 --> 01:54:37.900]  Deep color on the 5k i max because they have this graphics engine
[01:54:38.140 --> 01:54:43.660]  That is a level of abstraction and it's based on what's available on mac and windows
[01:54:44.540 --> 01:54:49.180]  and if windows doesn't have it, maybe there's you know, it's going to take them longer to be able to adopt it because then
[01:54:49.660 --> 01:54:54.780]  You've got these files that have you know, deep color that don't show up on windows or something like that
[01:54:57.820 --> 01:55:01.180]  It's just a perfect example of doing it the right way and then here they are
[01:55:01.180 --> 01:55:05.660]  Getting out. Anyway, the one thing that stuck out to me on this and you like your example of wouldn't it be great
[01:55:05.660 --> 01:55:11.340]  If you could just talk to somebody and work this out was in the hubbub over sketch leaving the app store
[01:55:11.340 --> 01:55:13.340]  I was reading michael sigh
[01:55:13.660 --> 01:55:19.980]  Had a great blog post like a roundup blog post with like, you know, eight nine ten different reactions from around the web
[01:55:20.460 --> 01:55:26.460]  And he just noted at the end of the noted without any further comment that he has an update to a mac app
[01:55:26.460 --> 01:55:32.460]  That's been pending review. It's just a bug fix update to one of his apps that was pending review for 59 days
[01:55:33.340 --> 01:55:36.140]  I mean, what what does that what kind of sense does that make?
[01:55:36.780 --> 01:55:41.500]  Here's a bug fix for my users and 59 days later. It's still waiting to go into review
[01:55:42.220 --> 01:55:46.060]  Yeah, and even that you could say it's like prioritization or whatever and you might feel bad about it
[01:55:46.060 --> 01:55:52.000]  But the ones that just really drive me nuts is where like it's a misunderstanding like it's a romantic comedy level misunderstanding
[01:55:52.700 --> 01:55:53.900]  and
[01:55:53.900 --> 01:55:58.940]  and and it's just like listen to me, you know, like it's like in romantic comedies
[01:55:58.940 --> 01:56:03.660]  You're always about like thinking just if these two people just got together and explain this one thing like the whole rest of the movie
[01:56:03.660 --> 01:56:05.500]  Would be pointless right and this is like this in the app store
[01:56:05.500 --> 01:56:09.900]  but there's no one for you to talk to like you you send your little message in a bottle and then you wait and then you
[01:56:09.900 --> 01:56:13.660]  Wait, and then you wait and then you wait and this inscrutable reply comes back. It's like no you didn't understand me
[01:56:14.140 --> 01:56:18.220]  Did you even read what I wrote? Like it's is this an automated system? Is there a human there?
[01:56:18.220 --> 01:56:22.540]  Can I talk to somebody somebody who is both empowered and able to talk to somebody?
[01:56:22.540 --> 01:56:26.700]  Is both empowered and able to understand like there's like there's a language barrier like they don't, you know
[01:56:27.100 --> 01:56:30.780]  I I think the one about copyright was that like where some a bunch of scammers were putting up
[01:56:30.780 --> 01:56:37.020]  Applications that appeared to come from a different developer and then apple would flag the legitimate developer to say they were violating the copyright
[01:56:37.020 --> 01:56:42.700]  It was like what whatever was the stuff like that is very frustrating like and that essentially what that comes down to is like like
[01:56:42.700 --> 01:56:50.380]  in a romantic comedy just merely a lack of communication and how can apple be doing so well and improving so much in its communication like
[01:56:50.380 --> 01:56:54.860]  Keeping the advantages like you said of like keeping your product secret and not and not showing everything
[01:56:54.860 --> 01:56:58.060]  You're even thinking of making because then people are disappointed but also
[01:56:58.940 --> 01:57:04.620]  Being open to feedback and having a community where human beings talk to other human beings doesn't mean they're always going to agree
[01:57:04.620 --> 01:57:07.740]  It doesn't mean that people outside apple are telling apple what to do
[01:57:07.740 --> 01:57:13.740]  But just to make sure everyone's all on the same page and obviously it's much more advantageous for a programming language
[01:57:13.740 --> 01:57:19.420]  Which is less of a competitive advantage for apple than like its individual features or whatever with the app store
[01:57:19.420 --> 01:57:23.580]  Like it's just it's it's so clearly a different philosophy
[01:57:24.220 --> 01:57:30.700]  Dictating the the public face of that part of the organization than the other and I know it's all one big place and the apple
[01:57:30.700 --> 01:57:32.700]  tries to speak with one voice, but
[01:57:32.700 --> 01:57:34.700]  I you know, it just it's becoming
[01:57:36.060 --> 01:57:42.380]  Increasingly clear where the lines are in terms of like the new apple that you were describing and
[01:57:43.340 --> 01:57:48.700]  The old apple it's it's still inside there and and and you know, who knows like who's to say that?
[01:57:48.700 --> 01:57:52.780]  Who's to say that that is or isn't appropriate for the individual things? It's just a difference in like
[01:57:53.500 --> 01:57:58.060]  What department am I talking to? What is the subject that that we're that we're even talking about?
[01:57:58.940 --> 01:58:00.940]  And how then does apple talk about it?
[01:58:04.940 --> 01:58:07.100]  59 days in review what the hell?
[01:58:11.020 --> 01:58:13.020]  Um
[01:58:13.020 --> 01:58:17.820]  Uh, I guess I could take another break here and do you want to talk anything else about swift?
[01:58:18.620 --> 01:58:21.340]  I guess the other thing I I one other thing I thought about was swift
[01:58:21.340 --> 01:58:26.220]  I know apples they've said this for a while, but you know federighi's had this in his talking points all week long
[01:58:26.540 --> 01:58:30.220]  which is that they really really think that swift could be the like
[01:58:30.860 --> 01:58:32.540]  the default go-to
[01:58:32.540 --> 01:58:37.740]  programming language not just for their platforms and writing apps for their platforms, but just like
[01:58:38.380 --> 01:58:41.180]  You know high school kids who are learning to program middle school kids
[01:58:41.180 --> 01:58:44.220]  I mean, I don't know why wait till high school, but kids learning to program
[01:58:44.860 --> 01:58:47.580]  Computer science courses in college, you know
[01:58:48.460 --> 01:58:48.940]  Why not?
[01:58:48.940 --> 01:58:54.460]  You know that they see swift as the language that could take that role which to me is it I I believe it
[01:58:54.540 --> 01:58:58.700]  I really think that they they they mean it but that's an such an incredibly
[01:59:00.280 --> 01:59:05.420]  Ambitious goal for a programming language. Yeah, I think it sounds more reasonable when you think about well
[01:59:05.660 --> 01:59:07.660]  What are those people learning with now?
[01:59:07.660 --> 01:59:14.000]  Because I can tell you it's not c like I think most of the time it's java or javascript
[01:59:14.540 --> 01:59:18.540]  Which I guess is javascript probably isn't terrible because it's a pretty simple language
[01:59:18.780 --> 01:59:22.380]  Do you think comp size with javascript or do you think I think it's java like java?
[01:59:22.860 --> 01:59:25.900]  Java, I think is the most common teaching language at this point. Um
[01:59:26.460 --> 01:59:31.260]  Some schools like you know, I think mit still is something with scheme and lisp and all that business. Uh
[01:59:32.140 --> 01:59:35.420]  But the days of them teaching c is your first programming language
[01:59:35.420 --> 01:59:41.820]  I think are long gone and c++ same type like what is a better teaching language what it gets to like if not swift
[01:59:41.820 --> 01:59:44.140]  Then what and if java is the answer?
[01:59:44.860 --> 01:59:46.860]  I think swift has fewer
[01:59:47.740 --> 01:59:52.140]  Well, it's difficult when they say that like swift is gonna be the language then which swift do you want them to teach?
[01:59:52.220 --> 01:59:57.020]  They want to teach swift one. Oh, no, no swift two. Oh, no, like again, it's barely sitting up at this point
[01:59:57.020 --> 01:59:59.900]  So this is obviously a long-term plan, but once swift settles down
[02:00:00.540 --> 02:00:02.540]  Being a more modern language
[02:00:02.620 --> 02:00:03.660]  um
[02:00:03.660 --> 02:00:06.700]  It's either going to be swift or something like python or javascript
[02:00:06.780 --> 02:00:12.220]  It's an even higher level language because learning languages don't need to care about performance and stuff like that. So you can get away with
[02:00:12.780 --> 02:00:14.140]  using
[02:00:14.140 --> 02:00:15.500]  Not i'm going to say a toy language
[02:00:15.500 --> 02:00:19.260]  but a much much higher level language that you just want them to deal with the concepts and
[02:00:19.500 --> 02:00:21.740]  I think the only thing that will hold swift back is
[02:00:22.380 --> 02:00:24.300]  swift is a
[02:00:24.300 --> 02:00:28.620]  Complicated language swift has a lot of features right and a lot of the features in swift
[02:00:29.100 --> 02:00:31.600]  I think make more sense in the context of understanding
[02:00:31.600 --> 02:00:37.600]  Simpler languages first swift is not a simple language. There is a there is a lot to it. It's very powerful. There's a lot of
[02:00:38.320 --> 02:00:41.920]  Concepts and things in there not details that you don't care about like memory management and crap
[02:00:41.920 --> 02:00:44.400]  Well, there's a little tiny bit of that if you really want to get into it
[02:00:44.400 --> 02:00:48.400]  But all right, what do they have like an unsafe pointer type? Yeah, like they've got the
[02:00:48.960 --> 02:00:51.840]  Go ahead screw yourself abilities in there
[02:00:51.840 --> 02:00:56.880]  But that's but you wouldn't teach that but even just the concepts of the way it handles, uh, you know
[02:00:56.880 --> 02:01:03.280]  All the different prototypes and class extensions and inheritance and when do I use a class and when do I use a struct and value?
[02:01:03.280 --> 02:01:08.320]  types versus reference types and there's there's a lot of things in there that aren't in much simpler languages like
[02:01:08.880 --> 02:01:11.040]  Back in the old days tickle tcl
[02:01:11.760 --> 02:01:15.520]  You know or like logo with a little turtle turtle or even something like python
[02:01:15.520 --> 02:01:21.040]  I mean, I guess I guess every language has its grotty corners, but swift is a already a pretty full featured language
[02:01:21.040 --> 02:01:24.320]  And it's going to get even fuller featured with time. So
[02:01:24.320 --> 02:01:27.920]  That may hold it back from being a teaching language because in some respects a teaching language
[02:01:27.920 --> 02:01:29.360]  You don't even need it to be a real language
[02:01:29.360 --> 02:01:32.560]  I mean, I guess you needed to execute for your exercises and stuff, but you're not teaching them
[02:01:32.800 --> 02:01:36.400]  Here's the programming language you're going to use when you enter the industry like it's not a vocational school
[02:01:36.640 --> 02:01:41.600]  You're teaching them concepts, which is why mit can teach lisp and scheme and everything and ml or whatever and it's like
[02:01:41.840 --> 02:01:47.040]  I don't care if you can use this. We're just trying to teach you conceptually how this works and why python again?
[02:01:47.040 --> 02:01:51.760]  Python another language that many people have said looks like pseudocode, especially since there's no curly braces and the indentation is mandatory
[02:01:51.760 --> 02:01:55.520]  You can go to your algorithms book and see the algorithms for red black trees and you can write it in python
[02:01:55.520 --> 02:01:58.480]  And it looks a lot like it did in your algorithms book that didn't have you know
[02:01:58.480 --> 02:02:01.440]  The algorithms book just has english words doesn't it's not a programming book at all
[02:02:02.000 --> 02:02:08.320]  So I think the road to swift being a teaching language may be difficult, but if I had to pick
[02:02:09.200 --> 02:02:11.520]  Do you want to teach this course in java or in swift?
[02:02:11.520 --> 02:02:17.840]  I think swift would be better if only because java's got even more weirdness in terms of like primitives versus you know
[02:02:17.840 --> 02:02:25.360]  Auto boxing and object types and all sorts of weird crap like that. So i've never written java. So i'm speaking from a position of
[02:02:26.320 --> 02:02:31.680]  Admitted some level of ignorance, but i've you know, everything i've ever seen of java is
[02:02:32.800 --> 02:02:35.520]  It's just it's so verbose. Oh
[02:02:36.480 --> 02:02:39.300]  It it really I I find it very off-putting
[02:02:39.520 --> 02:02:43.280]  yeah, and there's a lot of like there's a lot of weirdness in java that has to do with like
[02:02:43.280 --> 02:02:47.680]  And there's a lot of like there's a lot of weirdness in java that has to do with like, yeah
[02:02:47.760 --> 02:02:51.760]  I think it was a funny part of speaking of things that would sound weird in the future a funny part of
[02:02:52.240 --> 02:02:54.240]  reason to you when you were saying um
[02:02:55.360 --> 02:03:01.600]  Or server-side languages like java. Java was not made as a server-side. Java was a language for set-top boxes, right?
[02:03:01.680 --> 02:03:07.520]  Well, and in fact, it's what everybody programs on to write android apps, right? Oh, you know, well, it's well, that's yeah
[02:03:07.520 --> 02:03:14.000]  Yeah, but like its origins were for set-top boxes and then eventually its its second life was oh
[02:03:14.000 --> 02:03:15.920]  These are going to be applets. They're going to run in your browser
[02:03:15.920 --> 02:03:17.360]  Like it was the opposite of server-side
[02:03:17.360 --> 02:03:22.000]  it was going to be code that we send from a server to your client and runs in people's web browsers and then
[02:03:22.240 --> 02:03:23.680]  It had its third life as you know
[02:03:23.680 --> 02:03:26.320]  what we're just going to have this as a memory managed language on the server because
[02:03:26.800 --> 02:03:31.700]  It's faster than all those scripting languages and it doesn't require a manual memory management like c++
[02:03:31.700 --> 02:03:38.100]  It always struck me and I know that it came from sun and that sun was a you know, typical laid-back
[02:03:39.060 --> 02:03:41.140]  Valley, you know corporation god
[02:03:41.140 --> 02:03:45.220]  Isn't it funny that you have to talk about sun in the past tense and it even feels like the past tense now kids
[02:03:45.300 --> 02:03:47.300]  Don't even know what sun is. Um
[02:03:48.740 --> 02:03:52.420]  You know, I know that's where it started but the syntax of it looked so corporate to me
[02:03:52.420 --> 02:03:58.020]  It looked like the type of programming language that was written by like ibm programmers who still wore like a shirt and tie to work
[02:03:58.500 --> 02:04:00.500]  and and like the type of people who like
[02:04:00.500 --> 02:04:07.300]  They your email is configured and you can't even change it so that you have like a 12-line legal disclaimer in your signature
[02:04:07.700 --> 02:04:13.380]  You know that you know, if you've gotten this email by mistake, you're legally obligated to delete it and notify us immediately
[02:04:13.540 --> 02:04:17.620]  You know, it just looks like that type of programming language. We're just to have a simple class
[02:04:17.620 --> 02:04:20.740]  You've got like 12 lines of bullshit boilerplate for everything
[02:04:21.540 --> 02:04:26.020]  Yeah, I never like trying to do hello world and having to make like a class that I mean
[02:04:26.020 --> 02:04:32.100]  There's a certain symmetry to it like that it is kind of like if you compare it to c++ or something like that
[02:04:32.500 --> 02:04:38.180]  It was trying to make a more rationalized world and it I think as one of the first languages to really break out and be
[02:04:38.260 --> 02:04:39.620]  successful in doing that
[02:04:39.620 --> 02:04:41.460]  I I definitely feel like it has a
[02:04:41.700 --> 02:04:45.940]  I have respect for it as making a substantial leap over what came before it but I have respect for it
[02:04:45.940 --> 02:04:51.140]  But it's I didn't like it. I I when I went to drexel in the 90s and majored in computer science
[02:04:51.140 --> 02:04:56.100]  We learned pascal at first like the the first year courses were pascal
[02:04:56.740 --> 02:04:58.740]  And people used to complain
[02:04:58.980 --> 02:05:05.780]  Some people not largely but people there were complaints like on the mailing list like students complained into the faculty that you know
[02:05:06.180 --> 02:05:11.860]  Why are we learning pascal? No, there's no jobs in pascal. Everybody wants to see programmers and you know, and the professors
[02:05:11.860 --> 02:05:16.980]  You know if they would respond or I guess it wasn't mailing list. It was new, you know, the news groups we had for the
[02:05:16.980 --> 02:05:20.500]  Computer science department and they would just be like we're not running a vocational school here
[02:05:20.500 --> 02:05:26.740]  If you learn how to program you'll be able to program in any language, which is true. I mean, it's you know, it's
[02:05:27.460 --> 02:05:31.700]  It's not like, you know, you learn how to program and see and then you don't add a program another line
[02:05:31.700 --> 02:05:33.460]  You just have to learn the syntax
[02:05:33.460 --> 02:05:40.420]  But like when I took object-oriented programming it was c++ and I thought wow object-oriented programming sucks
[02:05:42.260 --> 02:05:44.260]  That's what I took away from object-oriented programming
[02:05:44.260 --> 02:05:50.740]  That's what I took away from object-oriented programming in college. I was like, wow, this is this is bullshit
[02:05:51.780 --> 02:05:53.620]  yeah, I mean and it's
[02:05:53.620 --> 02:05:55.940]  like that's the thing about teaching languages is
[02:05:56.900 --> 02:05:58.900]  You're trying to teach concepts
[02:05:59.380 --> 02:06:01.380]  And they may be concepts that are pretty new
[02:06:02.260 --> 02:06:07.540]  But you have to have an embodiment of those concepts teach them because you do want people to write code that executes and every embodiment
[02:06:07.620 --> 02:06:09.220]  Comes with its own BS
[02:06:09.220 --> 02:06:14.980]  Like whatever that BS may be whether it be may there may be oh it started out as a series of macros on top of C
[02:06:15.460 --> 02:06:18.820]  and so it's got some, you know, C grottiness in there or
[02:06:19.540 --> 02:06:21.060]  This language is obsessed with performance
[02:06:21.060 --> 02:06:25.720]  So there's a lot of crap that you don't quite understand that complicates things but it's needed for performance
[02:06:26.820 --> 02:06:31.780]  Or java-like this is the this was originally made for set-top boxes and later was used for web applets
[02:06:31.860 --> 02:06:35.460]  And there's this whole bytecode thing that's going on and they tried to make a new
[02:06:35.460 --> 02:06:39.940]  Portable framework that works everywhere. So you why the hell this file? I would look all crazy
[02:06:39.940 --> 02:06:43.140]  Well, it has to work everywhere and can't rely on any pretty, you know
[02:06:43.140 --> 02:06:48.660]  it's like there's a virtual machine and it's not using the native libraries in the platform and
[02:06:48.900 --> 02:06:53.780]  Everything is all verbose and you know and that that baggage is not part of what they're trying to teach you
[02:06:54.020 --> 02:06:56.660]  but you have to end up learning it as part of the course and
[02:06:56.820 --> 02:06:59.220]  If things go awry the course can end up being
[02:06:59.380 --> 02:07:03.860]  Being more about that baggage or get distracted and think that baggage is part of the essential concept
[02:07:03.860 --> 02:07:09.140]  Like you said thinking that c++ is object-oriented programming two very separate different things
[02:07:09.220 --> 02:07:12.820]  And if that's it and it was mine too. It's the first object-oriented language. I learned with c++
[02:07:14.740 --> 02:07:18.100]  It really warps your world view and you can't help if you're teaching that course
[02:07:18.580 --> 02:07:20.660]  To be influenced by the language you're choosing
[02:07:20.660 --> 02:07:27.380]  so i'm glad that that people upgraded from c and c++ to java because it was a significant step up in terms of the bs that
[02:07:27.380 --> 02:07:28.580]  You have to
[02:07:28.580 --> 02:07:31.780]  Learn and deal with but java has its own bs and swift has its own bs too
[02:07:31.780 --> 02:07:34.820]  Especially now that it's changing every year that if you teach the course one year
[02:07:35.060 --> 02:07:41.380]  Your your previous assignments won't even compile the next year. Like maybe it's not time to uh, jump on the swift bandwagon yet, but
[02:07:41.940 --> 02:07:43.060]  Um, but over time yeah
[02:07:43.060 --> 02:07:48.980]  You need you need to upgrade the the language you're using to teach and hopefully they get better over time and have less bs
[02:07:49.220 --> 02:07:52.180]  Here's the thing. I I guess I I think I had it in my notes
[02:07:52.660 --> 02:07:55.540]  for the the interview with craig federighi and I
[02:07:56.020 --> 02:07:59.140]  Don't think I got to it and I think it was because it was it just seemed like
[02:07:59.140 --> 02:08:01.860]  a dead end to try to get it out of him, but that
[02:08:02.580 --> 02:08:04.580]  um
[02:08:05.620 --> 02:08:06.660]  I don't know how I would have asked it
[02:08:06.660 --> 02:08:12.260]  but the basic idea being that a lot of times a programming language is it starts at to fuel the
[02:08:12.660 --> 02:08:17.300]  Creator of the language's personal itch pearl is a perfect example of that say what you want about pearl me
[02:08:17.300 --> 02:08:19.300]  And you you know, I know you still write pearl
[02:08:20.100 --> 02:08:21.700]  as your job, right
[02:08:21.700 --> 02:08:23.700]  Still do um, and you know
[02:08:24.260 --> 02:08:27.300]  Everything i've ever done of any consequence programming wise is written in pearl
[02:08:27.300 --> 02:08:31.780]  Uh, the my reference markdown, uh implementation is pearl. Uh
[02:08:33.540 --> 02:08:38.180]  I I wouldn't you know, I still I like it and I think for me for me personally
[02:08:38.180 --> 02:08:40.740]  Because I most of what I want to do is string manipulation
[02:08:40.820 --> 02:08:45.780]  That's why pearl is great and but the fact that it's so great at string manipulation was the fact that larry walt was
[02:08:46.180 --> 02:08:49.540]  Wanted to do things like that and if you read back to when he created it
[02:08:49.540 --> 02:08:52.420]  It was you know, he was writing these little glue scripts for
[02:08:53.140 --> 02:08:56.100]  What was it like the nsa or something like that? It was some kind of government
[02:08:56.100 --> 02:09:00.660]  I think it was nasa. I think you're off by one letter in that acronym
[02:09:01.140 --> 02:09:01.780]  uh
[02:09:01.780 --> 02:09:02.820]  But he was like ft, you know
[02:09:02.820 --> 02:09:08.980]  Had these automated things that need to run and ftp the results up to a certain server and that it was automating them with scripts
[02:09:08.980 --> 02:09:10.340]  And he was like, wow, this is terrible
[02:09:10.340 --> 02:09:14.420]  This would be a lot easier if I just made my own little scripting language that made this easier to do and then it grew
[02:09:14.500 --> 02:09:19.860]  from there and all sorts of other languages have origins like that and I just wonder whether
[02:09:19.860 --> 02:09:24.100]  Is it a problem that swift is being steered by someone who's a systems?
[02:09:24.980 --> 02:09:29.140]  Designer who writes, you know, the lovm and clang and writes these compilers
[02:09:29.940 --> 02:09:35.380]  Is is it is there a problem having a language written by the compiler guy because you're making things you're trying to make things easier
[02:09:35.380 --> 02:09:38.500]  for the compiler and optimize things from the compiler as opposed to
[02:09:38.980 --> 02:09:44.900]  Making a language that makes it more possible to be expressive as a gooey app designer
[02:09:44.900 --> 02:09:50.660]  Well that foundational bet on uh, you know arc essentially versus a virtual machine is
[02:09:51.220 --> 02:09:54.980]  At the core I feel like of the design of swift because it's baked in
[02:09:55.220 --> 02:10:02.020]  Entirely and that is definitely from a compiler writer's perspective and I greg touched on this as well if you are writing a compiler
[02:10:03.380 --> 02:10:10.340]  Dealing with language that makes it so you can't add certain obvious optimizations because according to the semantics of the language
[02:10:10.340 --> 02:10:15.060]  You can't be sure that this thing, you know, I can't be sure what method is going to get called here
[02:10:15.060 --> 02:10:18.740]  I'm not i'm not going to know until runtime a compile time. I have no idea
[02:10:18.740 --> 02:10:24.180]  So like craig said the compiler has hands tied behind its back both hands sometimes and it's just like well
[02:10:24.180 --> 02:10:26.100]  Nothing I can do about it. I just gotta
[02:10:26.100 --> 02:10:28.260]  Put in this code to execute this at runtime
[02:10:28.260 --> 02:10:32.900]  We'll look up the method and we'll execute it and you can try to do some optimizations and the whole fact that there's a runtime
[02:10:32.900 --> 02:10:36.980]  That all your code gets turned into calls to the c library for objective c message send and we can
[02:10:36.980 --> 02:10:40.260]  Optimize the hell out of that with assembly code or whatever but the bottom line is we can't
[02:10:40.660 --> 02:10:44.660]  We can't inline it because we don't even know what the hell method is going to be like there's that there is
[02:10:45.540 --> 02:10:50.420]  Dynamism in the language that the compiler can't handle like so if you're a compiler guy you're like boy
[02:10:50.420 --> 02:10:54.820]  This is really frustrating like I know I can make this go faster. I know I can make this safer
[02:10:54.820 --> 02:10:59.060]  I know I can make it so I can I can guarantee that this is always going to be initialized
[02:10:59.060 --> 02:11:02.500]  There's nothing a programmer can do to end up with this half initialized object
[02:11:02.500 --> 02:11:05.700]  That's going to cause a seg fault because they didn't realize through this chain of code that this is going to be
[02:11:05.700 --> 02:11:09.940]  because they didn't realize through this chain of code that they're halfway through the initializers and they call a method and tries to read some
[02:11:09.940 --> 02:11:14.440]  Object attribute that has garbage data in it because it wasn't initialized that I can fix that in the language
[02:11:14.820 --> 02:11:19.560]  And I can say this language guarantees that by the time this object is constructed all this stuff has been initialized
[02:11:20.020 --> 02:11:22.680]  Uh, it's guaranteed by the language is guaranteed by the compiler
[02:11:22.980 --> 02:11:27.380]  That bug is gone from everybody's code or calling a method on a thing that doesn't exist that bug is gone
[02:11:27.700 --> 02:11:29.540]  I can guarantee that right?
[02:11:29.540 --> 02:11:32.580]  And so it's not just that he's like I just want to make it good for the compiler
[02:11:32.580 --> 02:11:37.620]  The compiler guy also sees all the places where uh, you know where bugs happen where programs fall down
[02:11:37.860 --> 02:11:42.340]  And he can solve that I think what you're getting at is like, okay, but if you mostly write compilers, you don't write gooey apps
[02:11:42.900 --> 02:11:45.380]  Maybe you're making a language that makes it more difficult to write
[02:11:45.940 --> 02:11:49.860]  UI kit or app kit or some like one of these great gooey libraries that helps
[02:11:50.580 --> 02:11:54.500]  Application developers make the applications that they make for the mac and for ios
[02:11:54.980 --> 02:11:56.980]  um, and I think I mean
[02:11:58.180 --> 02:12:01.140]  There's two things giving people that impression one is
[02:12:01.140 --> 02:12:07.220]  There is a match between the language and the libraries in terms of again culturally as well as technically
[02:12:08.020 --> 02:12:09.780]  And early in swift's life
[02:12:09.780 --> 02:12:13.060]  One of the main requirements of swift is you have to be able to call into objective c and all that
[02:12:13.140 --> 02:12:17.300]  You have to be able to interact you have to be able to write an application partially in swift and partially objective c
[02:12:17.300 --> 02:12:23.540]  It's a non-starter and it can't it can't be it may not be optimal, but it can't be terrible to drop into an object
[02:12:23.540 --> 02:12:28.420]  You know to call into an object of c library and like craig said you can't wait around to be like well
[02:12:28.420 --> 02:12:32.900]  We've got a new language and then a whole new set of libraries and a whole new set like you can't just start from scratch
[02:12:32.900 --> 02:12:39.300]  There's too much value and investment in what in in all the existing frameworks and libraries and then you'd still be in this case
[02:12:39.300 --> 02:12:43.060]  We have dual libraries like a whole separate stack for swift and you know
[02:12:43.060 --> 02:12:45.700]  It's not so you have to do have to have that interaction with it
[02:12:45.860 --> 02:12:49.460]  And that interaction is going to be a little bit weird like all the crazy annotations
[02:12:49.460 --> 02:12:55.060]  They have an objective c libraries to get better interfaces with swift and you have to think really hard about like carbon and cocoa
[02:12:55.060 --> 02:12:59.700]  Yeah, well, I mean they eventually settled that right but but you know during the transition
[02:12:59.700 --> 02:13:01.780]  You know, you got to do what you got to do in a transition, right?
[02:13:01.780 --> 02:13:03.940]  I think that transition makes swift look bad because
[02:13:04.500 --> 02:13:09.940]  If it was a top to bottom swift stack, it would be clear. Hey, how do I use swift to make a gooey app right now?
[02:13:09.940 --> 02:13:17.620]  It's hey, how do I use swift to use objective c libraries to make a gooey app and there's this drive by people writing code?
[02:13:17.620 --> 02:13:21.540]  Like I just want to be pure swift, but you can't really be pure swift at this point
[02:13:21.540 --> 02:13:26.260]  You can't really be pure swift at this point. Like they feel like it's a defeat to say well i'm using swift
[02:13:26.260 --> 02:13:31.700]  But i'm basing everything on ns object because I just want those type of semantics like it feels it feels dirty
[02:13:31.700 --> 02:13:32.900]  It doesn't feel pure smith
[02:13:32.900 --> 02:13:36.980]  and it's not going to be first with top to bottom for a long time just because of the reality of
[02:13:37.460 --> 02:13:41.700]  The situation they're in and the second thing I think that is helping that you have to take into mind. Is that
[02:13:42.180 --> 02:13:44.180]  Yes swift is a language
[02:13:44.180 --> 02:13:46.180]  written by a compiler guy
[02:13:46.180 --> 02:13:51.700]  That does a lot of things that make make it easier to write a compiler and then make it
[02:13:52.020 --> 02:13:54.180]  Easier to make code that's guaranteed to be safe
[02:13:54.660 --> 02:14:00.440]  But that guy had to pitch his language to an organization filled with people who make gooey applications
[02:14:00.660 --> 02:14:03.460]  He had to convince like ali oser that you know
[02:14:03.860 --> 02:14:06.660]  This new language that I came up to it with in my basement or whatever
[02:14:07.060 --> 02:14:12.500]  I think should be the language for the next 20 years of apple and it's an awesome way to write ios and mac apps
[02:14:12.500 --> 02:14:17.300]  He had to make that case. It's not like he he's not the dictator of apple, right?
[02:14:17.380 --> 02:14:20.100]  He didn't say I came up with swift and we're going to use it
[02:14:20.580 --> 02:14:23.140]  And I feel like the people he had to make that case to
[02:14:23.700 --> 02:14:26.820]  Know what the heck they're doing and it had to have been a good case. So I don't know
[02:14:26.900 --> 02:14:28.900]  Yeah, have no problem standing up for their
[02:14:29.300 --> 02:14:36.260]  You know for their own thoughts and and yeah, he's not their boss. All right, so I I've you know, I it's
[02:14:36.740 --> 02:14:38.420]  It's very uncomfortable in the in the phase
[02:14:38.420 --> 02:14:43.220]  We are now where it's so clear that there are barriers to making this work and swift isn't done yet
[02:14:43.220 --> 02:14:49.060]  And all these other things that are true, but i'm not really ready to bang the gavel on anything having to do with like well
[02:14:49.860 --> 02:14:53.300]  Swift is not as well suited for making gooey apps as objective c was yeah
[02:14:53.380 --> 02:14:57.380]  You could say that the current version of swift is not as well suited as objective c
[02:14:58.420 --> 02:15:02.500]  for using objective c libraries to write gooey apps, but I feel like uh
[02:15:02.500 --> 02:15:09.940]  as the culture and capabilities and actual code as in swift top to bottom like let's start with foundation and all the other libraries, uh,
[02:15:10.420 --> 02:15:14.500]  Start getting built up. I feel like those same teams that made like, you know when they made uikit
[02:15:14.500 --> 02:15:17.940]  They kind of like repented for the sins of appkit and did it better
[02:15:18.420 --> 02:15:22.500]  There's one more chance to do that right now all those same the great minds behind
[02:15:22.740 --> 02:15:25.700]  uikit and appkit some of those same minds are going to be
[02:15:26.260 --> 02:15:32.100]  The great minds behind the swift native frameworks for writing gooey applications in the future and I think that'll be a good thing
[02:15:32.100 --> 02:15:38.740]  Yeah, I agree. Um, and I think that the other thing too about being the compiler guy is that it
[02:15:39.460 --> 02:15:45.620]  it put latner and his team and the people he works with in a position where they're really intimately familiar with the
[02:15:46.420 --> 02:15:47.060]  the
[02:15:47.060 --> 02:15:50.920]  the things that cause problems in shipping applications
[02:15:51.780 --> 02:15:56.820]  And maybe some of those problems are things that a true expert and objective c would never do
[02:15:57.540 --> 02:16:01.300]  And therefore they feel a little frustrated like that the language not that it's being catered
[02:16:01.300 --> 02:16:06.340]  To dummies but that by by making certain things that were possible no longer possible
[02:16:06.980 --> 02:16:12.900]  You prevent a whole class of possible bugs, but at the same time you also prevent certain
[02:16:13.460 --> 02:16:15.460]  clever but dangerous techniques
[02:16:16.100 --> 02:16:22.980]  that people had taken advantage of significantly and that apple is making the decision that that trade-off is worth it because they
[02:16:23.220 --> 02:16:28.500]  They're in a position where they literally know from like crash reports and and code that's actually been shipping that
[02:16:28.500 --> 02:16:32.580]  Being able to not do this anymore is actually going to cut off
[02:16:32.740 --> 02:16:36.580]  You know this sort of problem won't even be possible anymore or just making it harder
[02:16:36.580 --> 02:16:39.540]  like I mean the idea of a half-initialized object like
[02:16:40.820 --> 02:16:46.740]  You know making that impossible in the language you can do that fine the idea of calling a method that doesn't exist on an object
[02:16:46.740 --> 02:16:49.700]  Like at runtime you thought you had an object of this type
[02:16:49.700 --> 02:16:54.020]  But really you casted it to the wrong thing like in swift you can forcibly
[02:16:54.020 --> 02:16:58.660]  Cast things to the wrong thing and try to send them the you know, the the wrong method call
[02:16:58.660 --> 02:17:03.460]  But I like the whole idea of like looking up a class name by a string like all these capabilities this dynamism that Craig talked
[02:17:03.460 --> 02:17:04.900]  About that they're adding
[02:17:04.900 --> 02:17:07.620]  They're adding it so it'll be possible to do these things
[02:17:07.940 --> 02:17:12.980]  But it's not like the right or preferred way to do things and it certainly isn't the default and if you do it
[02:17:13.460 --> 02:17:18.420]  It's going to stand out in your code because you're gonna have to make like it doesn't stand out in objective-c code when you're iterating
[02:17:18.420 --> 02:17:21.700]  Over this heterogeneous collection and just sending every object the message blindly, right?
[02:17:21.700 --> 02:17:24.900]  And if they're nil like it'll just be a no-op and if they're the wrong class
[02:17:24.900 --> 02:17:29.380]  It'll blow up at runtime because it'll be like object blah doesn't respond to the message blah
[02:17:29.380 --> 02:17:32.020]  You'll find that out at runtime, right? But if you look at the loop
[02:17:32.020 --> 02:17:35.780]  It's like oh, this is just looping over the contents of an NS array and sending a message to every single item
[02:17:35.780 --> 02:17:42.100]  Looks good to me, right? If you try to do something that potentially dangerous in Swift, I think it would look scarier
[02:17:42.100 --> 02:17:48.740]  I think it would look like I am going to now call a method that the compiler cannot absolutely 100% guarantee is going to work
[02:17:48.740 --> 02:17:52.820]  And because that's not the default and because it will require more code and look scarier
[02:17:52.820 --> 02:17:57.220]  It is sort of culturally saying that in the Swift world. We don't we don't do stuff like that
[02:17:57.220 --> 02:18:01.380]  We don't be like, oh the program will take care of it. I'm sure every object in this collection will respond to this message
[02:18:01.380 --> 02:18:05.380]  I'm sure it will be fine or let us do response to selector and then they'll call it or whatever
[02:18:06.020 --> 02:18:10.020]  In Swift the default wants to be if you just see straightforward Swift code
[02:18:10.020 --> 02:18:15.700]  It's gonna work and not fall victim to this whole whole classes of errors that that could potentially be
[02:18:15.700 --> 02:18:19.140]  Happened in an objective C because too much was determined at runtime
[02:18:21.140 --> 02:18:26.340]  Let me take a moment here and thank our next sponsor it's our good friends long time friends of the show Squarespace
[02:18:26.340 --> 02:18:30.820]  You guys know Squarespace. It's a build that you're all-in-one build your own
[02:18:31.380 --> 02:18:33.380]  web site platform
[02:18:34.020 --> 02:18:39.220]  What type of websites can you make with Squarespace? Well better question be what types can't you you just go there?
[02:18:39.220 --> 02:18:42.580]  You just go there and sign up and immediately you can just get right started
[02:18:42.580 --> 02:18:46.260]  And say what what they'll say. What are you trying to what are you trying to build? You want to build a store?
[02:18:46.900 --> 02:18:52.900]  And you go to store and then they'll show you a bunch of templates for example stores that you start with and then you say
[02:18:52.900 --> 02:18:56.180]  Yes, this is exactly the sort of template this this is what the type of store
[02:18:56.180 --> 02:19:01.300]  I want to make then you open that up and you just start editing what you see that replace the images with your image
[02:19:01.540 --> 02:19:03.540]  Replace the text with your text
[02:19:03.780 --> 02:19:05.220]  You want to build a blog though?
[02:19:05.220 --> 02:19:07.620]  If that's what you're looking to build or host a podcast
[02:19:07.620 --> 02:19:12.100]  You just write down when you sign up. It's just like I want to create a blog. I'm going to host a podcast
[02:19:12.100 --> 02:19:15.540]  Here's some templates. I like this template use this one
[02:19:15.540 --> 02:19:19.620]  But I want to change this to this and this to this and you start changing things right there
[02:19:20.260 --> 02:19:22.260]  in the browser total WYSIWYG
[02:19:23.780 --> 02:19:25.780]  Really could not be
[02:19:25.940 --> 02:19:27.940]  More obvious. It's so visual
[02:19:28.420 --> 02:19:32.020]  They have all sorts of hooks there if you want to insert your own code
[02:19:32.020 --> 02:19:35.060]  You want to get in there at the code level and change it at that level you can do that
[02:19:35.060 --> 02:19:39.540]  Too, but fundamentally it is it's a gooey. It's a graphical user
[02:19:40.180 --> 02:19:46.900]  Interface way to design websites and they have templates for so many different types of sites. It's it's ridiculous
[02:19:49.780 --> 02:19:51.060]  It doesn't just spit at the end
[02:19:51.060 --> 02:19:56.500]  It doesn't just spit out a bunch of html files that you then put in a folder and upload to a web host or whatever
[02:19:56.820 --> 02:20:01.060]  They're the hosting platform too. It's all in one you you build it you make it
[02:20:01.060 --> 02:20:05.540]  You can even get your own domain name on it and you can get the domain name for free if you pay for a year in
[02:20:05.540 --> 02:20:06.900]  advance
[02:20:06.900 --> 02:20:08.660]  Just could not be easier
[02:20:08.660 --> 02:20:09.460]  online
[02:20:09.460 --> 02:20:14.660]  Commerce the sales stuff they handle all the tricky stuff all the encryption and the credit cards and stuff like that
[02:20:15.300 --> 02:20:20.020]  Really really impressive plans start at a ridiculous eight bucks a month
[02:20:20.580 --> 02:20:24.820]  And like I said, you get a free domain name registration for your site if you sign up for a year in advance
[02:20:26.180 --> 02:20:28.660]  And the demo is a little bit different
[02:20:28.660 --> 02:20:31.380]  And the demo is no credit card required
[02:20:31.380 --> 02:20:38.500]  You just go there and and just start like typing and playing you just go to squarespace.com and and just start and it you know
[02:20:39.460 --> 02:20:42.660]  It you're actually there making a website could not be easier
[02:20:43.380 --> 02:20:50.180]  Use the offer code Gruber my last name grub er and you will get 10% off your first purchase with Squarespace
[02:20:50.180 --> 02:20:53.220]  If you're listening to this show because John is on it you can use their code
[02:20:53.220 --> 02:20:56.980]  It's ATP and you'll get the same 10% off so Squarespace build it beautiful
[02:20:56.980 --> 02:21:02.580]  If you need to build a website, just go check out Squarespace spend an hour there. You'll probably end up saving yourself days of work
[02:21:04.580 --> 02:21:08.020]  That's very nice of you to give our code. Oh, it's we're all in it together
[02:21:08.020 --> 02:21:10.980]  It's so short and easy to remember. I hope that's our actual code. No, I know it is
[02:21:10.980 --> 02:21:15.300]  I was listening to your show today and I took note of it. There you go. You do it doing homework
[02:21:16.500 --> 02:21:19.140]  I wanted to see what you guys said about the smart battery case
[02:21:20.260 --> 02:21:24.020]  I feel like I had my last couple of shows like I had Joanna Stern on
[02:21:24.020 --> 02:21:29.060]  last week and we've just been like a couple of days away like we could have
[02:21:29.460 --> 02:21:34.660]  You know a couple of days later and we could have Joanna and I could have gone long on the the battery case
[02:21:36.660 --> 02:21:41.700]  I kind of had a feeling that that's what they were gonna make because I didn't know I did they didn't tell me but
[02:21:42.660 --> 02:21:46.980]  After the show when we were still in the air Joanna said hey, did you know as Apple been in touch with you about anything?
[02:21:46.980 --> 02:21:52.020]  I was like no not yet and she was they are with me and all they wanted to know was what color iPhone
[02:21:52.020 --> 02:21:54.500]  was what color iPhone I have
[02:21:55.940 --> 02:21:58.820]  And that they're gonna send me something, you know to review at the end of the week
[02:21:59.540 --> 02:22:01.380]  uh
[02:22:01.380 --> 02:22:06.180]  And I I remember that somebody at Apple when I went and got my iPad pro
[02:22:06.660 --> 02:22:10.500]  Review unit it was at a briefing in New York and I was asked
[02:22:11.700 --> 02:22:17.460]  Which size iPhone do I use the iPhone 6s or the 6s plus and I said 6s and they were like good
[02:22:17.860 --> 02:22:20.260]  We might have something for you later, you know a couple of weeks
[02:22:20.260 --> 02:22:23.460]  And I filed that away at that point
[02:22:23.460 --> 02:22:26.500]  I have what in the world would they make that would apply to the 6s?
[02:22:26.900 --> 02:22:30.820]  And not apply to the 6s plus and the only thing I could think of is a battery pack
[02:22:31.060 --> 02:22:33.060]  That's the only either a battery pack
[02:22:33.380 --> 02:22:36.820]  Or or I guess it would have to be a case because if it was a battery pack it would apply to
[02:22:37.060 --> 02:22:39.860]  Anything with the lightning port so I figured it had to be a battery case
[02:22:41.300 --> 02:22:44.660]  Well, it could have been any kind of case, but I suppose, you know, yeah
[02:22:44.740 --> 02:22:46.420]  But why would they make it to me?
[02:22:46.420 --> 02:22:51.300]  A battery case was specifically the sort of thing that they would make only for the 6s and not the success
[02:22:51.780 --> 02:22:55.220]  Not the plus for the obvious reason that the plus already gets plenty of battery
[02:22:55.300 --> 02:22:58.020]  They need to make that the same battery case for the plus
[02:22:58.420 --> 02:23:02.340]  Just like just a huge lump on the back of it that thing lasts two days
[02:23:03.940 --> 02:23:06.580]  It would be you could actually sit there and do like arm curls with it
[02:23:06.660 --> 02:23:12.100]  I think it would actually like build your biceps. So how is your one of the things I saw is a our
[02:23:12.100 --> 02:23:16.900]  Uh friend cable sasser his case was like cracking along the top, but maybe he just got the defective one
[02:23:16.980 --> 02:23:19.060]  I'm assuming yours is fine. What color did he get?
[02:23:19.140 --> 02:23:22.500]  He got the black one or the charcoal whatever so they sent me the white one
[02:23:22.740 --> 02:23:27.700]  Uh, and that's the only one I have experience with so mine didn't crack and what I did
[02:23:28.420 --> 02:23:33.060]  Is I got I got mine tuesday morning. So it was the day that they announced it like
[02:23:33.540 --> 02:23:36.100]  You know, they had already sent one to me by fedex
[02:23:36.100 --> 02:23:38.980]  So it was like, you know fedex guy showed up at like 10 a.m. And I had it
[02:23:38.980 --> 02:23:44.820]  Um, and I pretty much left it on my phone until I got my review out
[02:23:45.380 --> 02:23:50.420]  Which it was obviously it was a couple of days late. I I let you read it before you guys did atp
[02:23:50.420 --> 02:23:51.860]  I was like it'll be up by the time
[02:23:51.860 --> 02:23:53.860]  there's a time your show is on the air and
[02:23:54.100 --> 02:23:55.780]  You're truly the douglas adams
[02:23:55.780 --> 02:24:00.020]  So, uh, well, I can't say douglas adams tech running because he wrote from mac where all their mac user back in the day, too
[02:24:00.100 --> 02:24:04.260]  But yeah, those deadlines are great as they wish best your own self-imposed self-declared deadlines
[02:24:04.260 --> 02:24:07.060]  No, it was pressuring you to to say that you're like, oh no problem
[02:24:07.060 --> 02:24:10.420]  Yeah, I had a wednesday night school thing. It was what it's
[02:24:11.140 --> 02:24:12.500]  some kind of
[02:24:12.500 --> 02:24:14.340]  you know showing a the
[02:24:14.340 --> 02:24:19.060]  I don't know some kind of projects the kids made at 5 30 at jonas to school and I thought oh, that's great
[02:24:19.060 --> 02:24:23.540]  I'll just make sure i'm finished by then and i'll have a little self-imposed deadline and I didn't get it up till friday
[02:24:23.700 --> 02:24:24.420]  Yeah
[02:24:24.420 --> 02:24:29.300]  The idea was that the deadline that you were sure you were going to make it because you had to because you had a school
[02:24:29.300 --> 02:24:30.740]  thing right
[02:24:30.740 --> 02:24:36.100]  And it turns out when you're self-employed you don't have to do anything. You know what it was the the more I thought about it
[02:24:36.100 --> 02:24:42.340]  You know as often happens that writing to me writing is thinking and the more I wrote about it the more I realized
[02:24:42.660 --> 02:24:46.980]  That it was it there were interesting things to pursue and think about and talk about it
[02:24:48.020 --> 02:24:52.020]  You know, sometimes you start writing. I didn't think it was going to be nearly as long as it was and I didn't think
[02:24:52.260 --> 02:24:55.300]  That's like the longest thing you've written in a long time. It was about a battery case
[02:24:56.100 --> 02:24:59.860]  Well, that's why it's so but to me there's so many little interesting things about it
[02:25:00.260 --> 02:25:04.820]  But one of the things I did to motivate myself to finish I didn't really like having it on my iphone
[02:25:04.820 --> 02:25:07.460]  But I kept it on my iphone until I got the review out
[02:25:08.180 --> 02:25:13.700]  So I actually did use it non-stop pretty much other than like to play with you know
[02:25:13.700 --> 02:25:18.500]  The insertion and removal and and some you know certain things you want to do testing it
[02:25:19.700 --> 02:25:22.980]  I would but for the most part I had my phone in it from tuesday till friday
[02:25:22.980 --> 02:25:27.300]  So I didn't see any kind of cracking or anything like that. Yeah, maybe taking it in and out causes the cracking
[02:25:27.300 --> 02:25:30.420]  I don't know could I mean you would think it was some sort of widespread defect
[02:25:30.420 --> 02:25:34.820]  We would have heard about it by now, but it happens when you get the first ones of anything like who knows?
[02:25:34.820 --> 02:25:41.220]  Well, yeah, I think I think it's I think the first ones of anything. It's it's likely that it was probably just maybe some kind of
[02:25:42.180 --> 02:25:47.300]  You know, maybe there was a batch that got a bad batch of the whatever the substance the silicone
[02:25:47.300 --> 02:25:49.300]  What do they call it? Whatever the substance is on the outside?
[02:25:49.300 --> 02:25:53.060]  Yeah, or maybe there was a coating that was supposed to be put on that wasn't put on right anyway
[02:25:53.060 --> 02:25:57.300]  I wouldn't I wouldn't if you're thinking of getting one I wouldn't let this stop you because if there's something like that happens
[02:25:57.300 --> 02:26:00.500]  It doesn't bring it back to the apple still they could be a new one. They'll work it out
[02:26:00.900 --> 02:26:04.820]  I will say this i'm from atp you guys were saying and I know somebody else
[02:26:05.620 --> 02:26:07.220]  I think it was joanna actually in a review
[02:26:07.220 --> 02:26:10.740]  She I think she got a white one and said don't buy the white one because it's already stained
[02:26:11.300 --> 02:26:15.300]  And you guys said don't buy the white one. I have the white one and I used it non-stop for
[02:26:15.780 --> 02:26:22.020]  Four days and uh, it still looks mid-condition didn't pick up pick up any stains. So I don't you're very clean, right?
[02:26:22.420 --> 02:26:26.740]  I guess tissue boxes on your feet and you lick yourself clean like a cat and so there's no
[02:26:26.740 --> 02:26:31.780]  Residue what I heard actually after that show is the opposite of people who got the the black one and said it picks up pocket
[02:26:31.780 --> 02:26:32.180]  lint
[02:26:32.180 --> 02:26:35.860]  Like if you have lint and stuff in your pocket and you put the thing in you take it out to cover with white stuff
[02:26:35.860 --> 02:26:41.060]  So it's like white and black cars like choose your poison. Both of them are going to have something in the environment
[02:26:41.060 --> 02:26:46.020]  That's going to stand out more on them. I couldn't tell it is obviously very very
[02:26:46.740 --> 02:26:55.060]  Similar to their non-battery silicone cases in terms of the substance that it's made out of but it's maybe not quite the same
[02:26:55.060 --> 02:26:57.620]  It actually felt a little grippier to me
[02:26:58.100 --> 02:27:02.180]  The the battery case to me felt grippier than the non-battery case
[02:27:02.660 --> 02:27:05.620]  But on the other hand the one that I had handy which was one that apple
[02:27:05.940 --> 02:27:11.140]  Gave me with my review unit a couple months ago for the iphone 6s was um blue
[02:27:11.860 --> 02:27:15.860]  And this was only white and black and maybe there's some I know with the watch straps
[02:27:15.860 --> 02:27:19.700]  There's definitely a little difference in how they feel, you know the sport
[02:27:19.700 --> 02:27:27.300]  Bands, there's the different colors have different levels of like flexibility different weights too. Yeah different weights even
[02:27:29.380 --> 02:27:34.580]  And I may know that might therefore be true with these two maybe the white is somehow grippier maybe the white
[02:27:34.980 --> 02:27:38.260]  Non-battery case is grippier too. I thought it was a little a little too grippy
[02:27:38.260 --> 02:27:43.540]  I thought you know and in terms of it actually being thicker therefore was a little harder to get in and out of jean pockets
[02:27:44.180 --> 02:27:48.820]  Thickness aside the the grippiness made it a little you know a little bit too much friction
[02:27:48.820 --> 02:27:55.140]  In my opinion. Yeah, that's always the the balance because I one of the complaints about uh other third-party battery cases is they make it
[02:27:55.140 --> 02:28:00.340]  Slippery or because a lot of them are hard plastic or hard shiny plastic and then so you end up dropping it also because it's
[02:28:00.340 --> 02:28:02.500]  A bigger more awkward shape sometimes
[02:28:03.460 --> 02:28:06.100]  But if you make it too grippy, it's hard to slide in and out of a pants pocket
[02:28:06.100 --> 02:28:10.500]  So you just want to find that medium and yeah, I totally believe that the black and white ones could feel different and
[02:28:11.540 --> 02:28:13.780]  They look in the pictures. I've never actually touched one of these things
[02:28:13.780 --> 02:28:16.260]  But they look in the pictures like it could also be potentially that
[02:28:16.260 --> 02:28:18.580]  Whatever material they're making it out of is thicker
[02:28:19.300 --> 02:28:22.820]  You know in the parts that don't have battery in them. It's just thicker so it could be squishier
[02:28:22.820 --> 02:28:27.860]  It is a little thicker. It's definitely like so if you stack it side by side with the the
[02:28:28.740 --> 02:28:29.220]  You know
[02:28:29.220 --> 02:28:31.540]  so it's resting on like the volume buttons or the
[02:28:31.940 --> 02:28:36.900]  Power on off switch stack it on the side and compare it side by side with the silicone case
[02:28:36.900 --> 02:28:38.180]  It's definitely a little thicker
[02:28:38.180 --> 02:28:41.300]  It stands up a little bit more the sides are thicker on this than
[02:28:41.780 --> 02:28:45.140]  On the silicone case and if you think about it makes sense because it's actually a lot more real
[02:28:45.140 --> 02:28:47.140]  Because it's actually a lot more rigid
[02:28:47.380 --> 02:28:49.380]  It's you know, you can kind of put the phone
[02:28:49.540 --> 02:28:52.500]  I think there's a recommended way like the with the silicone cases
[02:28:52.580 --> 02:28:56.020]  They recommend to put it in like a certain angle first, but it doesn't really matter
[02:28:56.100 --> 02:28:58.740]  you can just put any side in first and then just sort of
[02:29:00.180 --> 02:29:03.140]  Squish the the other side over the edge of the iphone
[02:29:03.620 --> 02:29:08.180]  With this you have to slide it in like it's in in between the two sides as like a rail
[02:29:08.820 --> 02:29:11.380]  It slides in like that and the sides are definitely thicker
[02:29:11.940 --> 02:29:13.460]  um
[02:29:13.460 --> 02:29:17.380]  I don't know what I think it's because it's meant to be more rugged. I think it is sort of a
[02:29:17.860 --> 02:29:19.940]  You know, they're only advertising it as a battery case
[02:29:19.940 --> 02:29:23.300]  But I think it's also apple's answer to what if you want a more
[02:29:24.020 --> 02:29:26.020]  protective case for drops and stuff like that
[02:29:26.900 --> 02:29:28.740]  Yeah, I mean once you're gonna have that giant thing on there
[02:29:28.740 --> 02:29:29.060]  anyway
[02:29:29.060 --> 02:29:32.820]  there's no sense trying to skimp around the edges to try to make it look spelt because it's not gonna
[02:29:33.460 --> 02:29:37.620]  Right. I I thought on the atp. I thought you were the only one it was really reasonable
[02:29:37.700 --> 02:29:40.340]  I marco and casey made me a little angry, but they're
[02:29:40.340 --> 02:29:44.900]  They'll take on it. I thought marco was way too dismissive about it as a what did he call again?
[02:29:44.980 --> 02:29:46.980]  He said it looks like an engineering prototype
[02:29:47.060 --> 02:29:48.020]  Yeah
[02:29:48.020 --> 02:29:52.100]  Like I do and this is the thing that gets me is I thought I did a pretty good job of my article and then
[02:29:52.180 --> 02:29:54.420]  On twitter, you know, there's a handful of people. Oh, of course
[02:29:54.500 --> 02:29:57.620]  john groober likes it's like I I didn't I wasn't like it wasn't really a
[02:29:57.780 --> 02:30:00.740]  Overly positive review and I ended it with saying that I don't want to use it
[02:30:01.860 --> 02:30:07.780]  And I called it weird and funny looking and ungainly. It's if it wasn't like I was
[02:30:07.780 --> 02:30:10.900]  Entirely complimentary. It was like I just want to understand why they made it
[02:30:11.460 --> 02:30:16.920]  Yeah, or or just like especially in things like this where it's like a visceral reaction based on appearances
[02:30:17.620 --> 02:30:23.140]  There's usually and I would use lots of car analogies on atp coming from the car world like
[02:30:23.700 --> 02:30:30.500]  Stuff like that can be polarized on like the physical shape of an object whose purpose is mostly not dictated by its shape
[02:30:30.500 --> 02:30:32.500]  people have strong opinions about
[02:30:32.500 --> 02:30:39.060]  You know a portion of them versus corvette versus a mustang like these are very different looking things and in the grand scheme of things
[02:30:39.060 --> 02:30:44.260]  They're engines and wheels and aerodynamics aside. There are lots of features of cars that look the way they look
[02:30:45.140 --> 02:30:46.180]  for
[02:30:46.180 --> 02:30:49.380]  for just aesthetic design reasons so anything like that where
[02:30:50.180 --> 02:30:54.260]  You look at a picture of something as so many people did on the internet look at a picture of this thing
[02:30:54.580 --> 02:31:00.100]  And had just had this negative gut reaction to it and these articles come flying or like what's happening to apple design or whatever
[02:31:00.100 --> 02:31:02.100]  You really want to understand like
[02:31:02.980 --> 02:31:09.060]  What what is a reasonable rationale for this and you could come to the conclusion that there is no rationale that this is just like
[02:31:09.220 --> 02:31:11.940]  it's the simplest thing they could possibly do and
[02:31:13.540 --> 02:31:20.820]  You know they were just lazy or didn't have time or like or whatever but with apple knowing everything we know about apple like
[02:31:21.220 --> 02:31:25.460]  That just doesn't seem plausible because no one was demanding that they release a battery case
[02:31:25.460 --> 02:31:31.140]  And it's like and who really cares in the grand scheme of things, right? Um, but this is what they came out with
[02:31:31.140 --> 02:31:35.700]  So you want to think about it like and so that's why I was going into the philosophy like is is there an explanation?
[02:31:35.700 --> 02:31:38.260]  Because this is an area where apple won't talk to the press for the most part
[02:31:38.260 --> 02:31:43.220]  It's like oh let's have uh someone from apple's design studio not johnny i because he's busy but someone lower level
[02:31:43.540 --> 02:31:48.900]  Make the rounds to the tech press. No, not really that's not going to happen right and nor should they because like aesthetics
[02:31:48.900 --> 02:31:52.340]  It's like look this is the product we have and we'll see what the reaction to it is
[02:31:52.340 --> 02:31:56.180]  But we think it's it makes sense in some way and how could they think this makes sense?
[02:31:56.180 --> 02:32:02.260]  So I was going back through what have they said in the past publicly about past designs that could conceivably apply
[02:32:02.580 --> 02:32:05.940]  To this design whether they're true or not. Who knows we're just speculating but the bottom line is
[02:32:07.140 --> 02:32:12.260]  If you think it's ugly you think it's ugly. Um, don't buy it buy one that you think is not ugly
[02:32:12.820 --> 02:32:19.380]  Right, I mean and the other thing and I feel like maybe in my article I didn't cover this enough. It's afterwards
[02:32:19.380 --> 02:32:22.660]  It if you're wondering why it doesn't look just like a mophie
[02:32:23.540 --> 02:32:28.820]  Whatever juice pack air whatever their thinnest one is which is of course the one that apple if apple is going to go that direction
[02:32:28.820 --> 02:32:32.660]  They'd make the thin it they're not going to make one of these, you know, the cases that have three thousand
[02:32:34.340 --> 02:32:41.220]  What's the unit milliamp hours milliamp hours, um, it's so much easier to write mah
[02:32:44.100 --> 02:32:46.820]  Why doesn't it look like those which is a
[02:32:46.820 --> 02:32:50.900]  Why doesn't it look like those which is really like sort of the standard for all of them?
[02:32:50.900 --> 02:32:54.340]  Well, of course, they're not going to make one like that because if they thought that was the right way to do it
[02:32:54.340 --> 02:32:56.020]  They don't have to do anything. They're already there
[02:32:56.020 --> 02:33:00.340]  There's the apple store, you know are filled with these battery cases that look like that
[02:33:00.340 --> 02:33:03.860]  The only reason for them to make one is is if they had an idea that was different
[02:33:04.260 --> 02:33:09.060]  Well, and also like I think this is a factor like they know a lot of people buy battery cases
[02:33:09.300 --> 02:33:14.740]  Why why shouldn't they have one and not because like they just they need to get that money or whatever
[02:33:14.740 --> 02:33:16.740]  but it's it's like as a
[02:33:17.540 --> 02:33:21.620]  It's the same thing with diversifying the phone line. Why don't they make a big phone? Why shouldn't they make a smaller phone?
[02:33:21.620 --> 02:33:22.900]  Why don't they make something in colors?
[02:33:22.900 --> 02:33:28.100]  It's like if it's something that people want and they're buying it. Anyway, why shouldn't apple make a really good one, right?
[02:33:28.100 --> 02:33:30.580]  It's you know, why rely on third parties to fill that role?
[02:33:30.580 --> 02:33:35.700]  And so battery cases have apparently passed into the realm of things that are important enough and then why they purchase enough that apple
[02:33:35.700 --> 02:33:37.700]  Feels like it should have a first party solution
[02:33:38.180 --> 02:33:39.620]  and so they do like I mean
[02:33:39.620 --> 02:33:44.260]  I still have questions about the case in terms of how they came up with this compromise because it's like if you're going to
[02:33:44.260 --> 02:33:48.580]  Be this bulky like you said the same thing. Like why not extend the battery up to the top and bottom?
[02:33:49.060 --> 02:33:51.060]  Why not go edge to edge with it?
[02:33:51.220 --> 02:33:52.420]  um
[02:33:52.420 --> 02:33:58.200]  Like why why not match the capacity of similar thickness battery cases and then you know apple has his explanations
[02:33:58.900 --> 02:34:04.020]  which may or may not be rationalizations, but in the end of a lot of it really does come down to design because
[02:34:04.580 --> 02:34:09.060]  you have to pick a size and shape and that dictates how much battery life you have and
[02:34:09.060 --> 02:34:15.220]  Let's say someone was really wedded to this design and they thought it aesthetically. It was beautiful and perfect and pure and what they wanted
[02:34:15.940 --> 02:34:19.940]  Then the aesthetic design could dictate the size of the battery as opposed to the other way around
[02:34:20.020 --> 02:34:23.060]  It's it's hard to know without actually talking to the people behind the design
[02:34:23.700 --> 02:34:26.820]  Um, all we can do out here is speculate and really on atp
[02:34:27.220 --> 02:34:31.620]  I wasn't going to dismiss anyone else's theories about like that. There was time crunch or that
[02:34:32.100 --> 02:34:36.020]  Uh, you know that like they didn't put in the effort. They normally was for all I know
[02:34:36.020 --> 02:34:41.300]  Maybe this was rushed and I don't know what's going on inside apple, right? But is there a plausible explanation?
[02:34:42.100 --> 02:34:47.380]  That uh that they say this was actually designed with the same care as every other apple thing is designed with or we're led to
[02:34:47.460 --> 02:34:52.420]  Believe every other apple thing is designed with is that even plausible and I can come up with causal explanations for it
[02:34:52.500 --> 02:34:55.060]  So in the absence of any other information
[02:34:55.140 --> 02:34:57.380]  You just have to kind of like say which one of those do you think is more likely?
[02:34:57.780 --> 02:35:00.340]  I think it's so that the hump is so striking
[02:35:00.340 --> 02:35:06.180]  striking and that I I think it it really had to be the result I think it would be I think the
[02:35:06.660 --> 02:35:13.140]  I really doubt that it was the first idea they came up with it's so unusual and it is at first glance
[02:35:13.220 --> 02:35:16.100]  I think almost it's almost impossible to say that it's not
[02:35:17.060 --> 02:35:18.180]  a little
[02:35:18.180 --> 02:35:20.180]  repulsive at first
[02:35:20.260 --> 02:35:22.740]  it just looks swollen in a way, you know, like
[02:35:23.460 --> 02:35:24.900]  uh
[02:35:24.900 --> 02:35:27.700]  you know, like when you get stung by a bee and and
[02:35:27.700 --> 02:35:32.900]  you know, like you get stung on your thumb and your thumb swells up to the the base of your thumb swells up to the
[02:35:32.980 --> 02:35:38.980]  Size of a golf ball like it looks painful when you see somebody with an injury that's swollen. It's like, oh you you you you
[02:35:39.540 --> 02:35:44.340]  Feel it it that's what it looks. It looks swollen, which is not a good look at least at first
[02:35:44.340 --> 02:35:47.460]  But I found myself after a few days. I kind of got used to it
[02:35:47.860 --> 02:35:53.380]  It's just I stopped thinking of it as posing as being supposed to look like a regular case and that it just looks like it
[02:35:53.380 --> 02:35:55.220]  Has a battery on the back
[02:35:55.220 --> 02:35:59.860]  Yeah, and like I would another possibility again having not actually ever touched one of these
[02:35:59.940 --> 02:36:03.060]  I can't say although maybe you can tell me what you think about this like
[02:36:03.620 --> 02:36:04.500]  uh
[02:36:04.500 --> 02:36:10.660]  a lot of oxo good grips, uh, like kitchen things look kind of weird looking and ugly too
[02:36:11.220 --> 02:36:13.880]  Uh, but they're good to hold and so if you prioritize
[02:36:14.740 --> 02:36:18.180]  How good is this thing to hold i'm not saying this is what they did because I think the back of it is not shaped
[02:36:18.180 --> 02:36:23.380]  Like any part of the human hand human hand doesn't have like rounded rectangle divots in it or anything, but maybe
[02:36:23.380 --> 02:36:25.380]  Some aspect like you said
[02:36:25.460 --> 02:36:30.900]  Holding your pinky under the lump instead of under the bottom of the thing like that could be a factor in it
[02:36:30.900 --> 02:36:32.580]  Like it doesn't mean that they're right everyone
[02:36:32.580 --> 02:36:38.900]  So you're just trying to delve like what motivated this why because as you said it's so it's so striking that it it seems clear
[02:36:39.620 --> 02:36:40.580]  that
[02:36:40.580 --> 02:36:42.180]  Uh, this was an intentional thing
[02:36:42.180 --> 02:36:46.660]  You don't accidentally make this battery case if you if you wanted to do something lazy would just look like every other battery case
[02:36:46.660 --> 02:36:52.020]  And I think apple would make something look more like they make hell they make silicone cases look pretty much like every other silicone case
[02:36:52.020 --> 02:36:54.260]  It's just why does apple have one because they want to make a nice one
[02:36:54.500 --> 02:36:58.100]  And why shouldn't you buy the apple one if you're in the apple store, like it makes perfect sense
[02:36:58.660 --> 02:37:00.660]  it it
[02:37:00.660 --> 02:37:05.220]  In addition to putting your pinky underneath the putting your index finger on top of it is pretty good too
[02:37:05.300 --> 02:37:08.020]  And it does sort of in a weird way
[02:37:08.580 --> 02:37:12.500]  It makes it feel as though you're holding a smaller device like you know that it's thicker
[02:37:12.900 --> 02:37:19.220]  but it's like you have these like from going back to like the old iphone days with the first few generations when they were physically smaller and
[02:37:19.220 --> 02:37:24.360]  It was a lot easier to kind of get your index fingers on top while you still had some kind of reasonable
[02:37:24.740 --> 02:37:28.340]  You know and it felt like you could hold it more securely because your fingers wrapped around it
[02:37:28.340 --> 02:37:30.340]  Your fingers can wrap around the hump in a way
[02:37:30.900 --> 02:37:34.100]  um that gives you a secure hold if I were going to
[02:37:34.820 --> 02:37:40.500]  And I knew in advance and I could pack it if I knew that I were going to be using my iphone camera to record
[02:37:40.740 --> 02:37:44.260]  Uh, I don't know like while i'm riding on a roller coaster or something like that
[02:37:44.260 --> 02:37:49.460]  I would put it in this case like battery even if the battery was completely depleted and I wasn't going to get
[02:37:49.620 --> 02:37:56.420]  One percent of charge from it. I would put my iphone in that case to hold it while i'm going down a roller coaster because
[02:37:56.660 --> 02:37:57.780]  I feel like
[02:37:57.780 --> 02:38:00.100]  I can get like a way more secure grip on that
[02:38:00.420 --> 02:38:05.780]  Because of the material that it's made of and because of the hump the hump actually gives you like a good place to put fingers
[02:38:06.660 --> 02:38:11.620]  How many trips to disney do you have to take before you realize is incredibly dangerous to take movies with your iphone on a roller?
[02:38:11.620 --> 02:38:16.020]  Let's say a million signs like do not try to take movies. I wouldn't I wouldn't do it
[02:38:16.020 --> 02:38:19.140]  and it's not even because I wouldn't do it just because I
[02:38:20.260 --> 02:38:22.260]  It would just ruin it would
[02:38:22.740 --> 02:38:29.940]  Like imagining me dropping my iphone on a roller coaster at disney would just the thought of it puts puts me in such a bad
[02:38:30.020 --> 02:38:31.380]  It's not that it's getting hit
[02:38:31.380 --> 02:38:33.860]  Hit in the face at 90 miles an hour for someone else's phone
[02:38:34.260 --> 02:38:37.700]  Because like if you do it at the top of the loop or whatever like it's six flags there
[02:38:37.780 --> 02:38:40.340]  So like I guess disney they I don't know how they manage it at disney
[02:38:40.340 --> 02:38:44.100]  But it's six flags. They had you going through like metal detectors like nothing in your pockets
[02:38:44.180 --> 02:38:50.420]  Like literally like it was like going through the tsa like, you know, no no, you know, no car keys
[02:38:50.900 --> 02:38:56.020]  No phones of any kind just like nothing because and it's six flags the roller coasters go way faster, too
[02:38:56.420 --> 02:38:58.660]  Yeah, I was saying like the roller coaster is going
[02:38:59.140 --> 02:39:05.620]  60 70 80 miles an hour and your phone is essentially stationary because it's like falling from above and you your face meets that
[02:39:05.620 --> 02:39:10.420]  Essentially stationary phone that's not a good experience for anybody kill somebody one of those things
[02:39:10.420 --> 02:39:14.820]  So kids no, no, uh taking movies and rollercoasters. I'm not saying it as though I would do it
[02:39:14.820 --> 02:39:17.320]  I'm, just saying that if I were in a a precarious
[02:39:18.340 --> 02:39:22.020]  Situation and needed to have a grip on my phone that you should do it something else that people can relate to
[02:39:22.020 --> 02:39:23.460]  How about going yachting?
[02:39:23.460 --> 02:39:26.500]  If you're you're going yachting if you're doing duran duran now, it's too old
[02:39:26.500 --> 02:39:29.860]  They don't get that if you're you're in the video for rio and you're on the front of the yacht
[02:39:29.860 --> 02:39:35.460]  And you want to take a movie of it because it's really cool looking bring in bring the iphone battery case
[02:39:36.260 --> 02:39:39.060]  I thought you had a good point on the atp about it looking like a
[02:39:39.380 --> 02:39:44.740]  Sci-fi like if you just paved a hallway with them like use them as the tiles like the subway
[02:39:44.740 --> 02:39:47.860]  You know like the way that the subway a hallway in the subway station has tiles
[02:39:48.340 --> 02:39:50.340]  Tile it with these it would look like a great
[02:39:51.380 --> 02:39:56.340]  You know like you're in a set of like a one of ridley scott's, you know, classic sci-fi
[02:39:56.340 --> 02:40:00.020]  Yeah, or like 60 70 sci-fi, you know, you know do like, uh, you know
[02:40:00.100 --> 02:40:03.780]  I mean even 2001 era but an alien or just you know
[02:40:04.020 --> 02:40:06.340]  Anything like buck rogers like they I guess that's the way they did
[02:40:06.420 --> 02:40:10.340]  You know the future was going to be like white and clean and smooth shapes everywhere
[02:40:11.060 --> 02:40:17.540]  Yeah, and but like, you know some kind of inexplicable, uh, ridges and textures though, you know
[02:40:18.340 --> 02:40:19.380]  Yeah
[02:40:19.380 --> 02:40:22.180]  Like on a stormtrooper like the stormtroopers got the little thermos on his back, you know
[02:40:22.260 --> 02:40:23.140]  What the hell's that for?
[02:40:23.140 --> 02:40:27.780]  i'm sure someone with a technical readout book knows but like you just it was always smooth and white but there was these lumps and
[02:40:27.860 --> 02:40:29.860]  They seemed purposeful and it looked like futurey
[02:40:29.860 --> 02:40:34.100]  I actually and it might just be because i've got star wars on on the mind this week
[02:40:34.180 --> 02:40:36.420]  But I actually thought as soon as I saw it
[02:40:36.420 --> 02:40:43.060]  I thought boy, this is a real stormtrooper looking thing because it even has a little bit of black around the uh,
[02:40:43.700 --> 02:40:45.700]  the cutout for the camera
[02:40:45.940 --> 02:40:49.380]  Um in a way that it's not white but sort of like an off-white and yeah
[02:40:49.380 --> 02:40:53.240]  The ridges the extra ridges some of them seem which seem maybe a little inexplicable
[02:40:54.020 --> 02:40:56.980]  Uh it there's a certain stormtrooperiness to it
[02:40:57.300 --> 02:40:58.340]  It was a wait for the uh
[02:40:58.340 --> 02:41:02.180]  The next version to look like the surface of the star destroyer with a little greeblies or whatever
[02:41:02.180 --> 02:41:07.380]  They are all over like little pipes and everything all over i'm thinking of other ways. This case could have existed like
[02:41:08.020 --> 02:41:11.620]  Um, you never see the back of a nexus seven like the old nexus sevens
[02:41:11.860 --> 02:41:16.500]  I don't think so, which is like it was like rubber and it had like cross hatching. Oh, yeah
[02:41:16.500 --> 02:41:20.260]  Yeah, I know what you mean a little divots coming this could have like little lumps on it
[02:41:20.340 --> 02:41:23.380]  Like uh, well think of a golf ball world has little uh, you know
[02:41:24.020 --> 02:41:27.460]  Uh concave things or it could be the opposite
[02:41:27.540 --> 02:41:30.660]  It could have convex things like a bunch of like bumps on it
[02:41:30.900 --> 02:41:33.380]  I mean, they could have been textured in so many different ways again
[02:41:33.460 --> 02:41:39.060]  Just completely aesthetically speaking because it's not or maybe there would be some functional grip there. But this one is
[02:41:39.620 --> 02:41:43.780]  There's one lump, but the surface treatment is essentially smooth. These all seem like
[02:41:43.780 --> 02:41:51.540]  Intentional aesthetic choices that that weren't necessarily foregone conclusions that there is some kind of philosophy behind this design
[02:41:53.700 --> 02:41:56.660]  Uh, yeah, I texture is going to come back at some point
[02:41:56.660 --> 02:42:01.140]  It's I feel like we're in a era when texture has sort of fallen out of favor
[02:42:01.860 --> 02:42:05.060]  Perhaps largely driven by apple, but it'll it'll come back eventually
[02:42:05.060 --> 02:42:06.740]  Do you remember the uh, what was it?
[02:42:06.740 --> 02:42:10.100]  I figure which case it was the ones with the holes cut out on it the colored ones with the holes cut out
[02:42:10.740 --> 02:42:12.340]  from apple
[02:42:12.340 --> 02:42:18.340]  Colored what cases? Oh, yeah. Yeah. Yeah the ones for the uh, the the five c
[02:42:19.300 --> 02:42:24.420]  Right and yeah, so it would show the words through it and we were complaining about how it didn't like center on the words correctly
[02:42:24.420 --> 02:42:27.060]  But that was essentially textured because you had these holes in the case
[02:42:27.060 --> 02:42:29.380]  They would feel like you'd feel them with your fingers. Yeah
[02:42:30.660 --> 02:42:32.660]  um
[02:42:33.380 --> 02:42:35.380]  I was gonna yeah, it would be good for another show
[02:42:35.460 --> 02:42:38.260]  I was gonna say because you know everything they make that was made out of this
[02:42:38.260 --> 02:42:43.860]  I don't even know if they call it bead blasted anymore, but it's this aluminum that has the same feel the phones have
[02:42:43.860 --> 02:42:49.540]  This is aluminum. The macbooks have this feel the even my iMac has the same is made out of the same stuff
[02:42:49.540 --> 02:42:52.340]  But eventually they're going to switch to a new material from aluminum
[02:42:53.460 --> 02:42:58.500]  Yeah, we talked about that in atp a few times, especially with uh respective phones the aluminum and glass thing
[02:42:59.060 --> 02:43:01.800]  Is going to seem as barbaric as crt
[02:43:02.340 --> 02:43:03.380]  uh
[02:43:03.380 --> 02:43:09.220]  Video displays due to us now like you mean it was this big heavy glass thing with like lead on it and electron gun
[02:43:09.460 --> 02:43:12.660]  Like how thick was the glass and like that just seems barbaric, right?
[02:43:13.300 --> 02:43:18.580]  Aluminum glass phones like the idea that you know for our grandkids the idea that if you drop your phone on the sidewalk that it
[02:43:18.580 --> 02:43:20.580]  Would break it's gonna sound idiotic
[02:43:20.580 --> 02:43:23.700]  It's gonna sound like like we were using the glass shampoo bottles from prel again
[02:43:23.700 --> 02:43:27.060]  Like why would you bring glass into the shower? It's so stupid. Why don't you use plastic, right?
[02:43:27.060 --> 02:43:34.500]  But right now or that you're like when eyeglasses were made out of glass. Yeah shatter and just go into your eyeball and you know
[02:43:35.300 --> 02:43:39.700]  It's like you do the best with the materials you have an aluminum glass like it took them a while to get to that
[02:43:39.700 --> 02:43:45.220]  And you know that lots of plastic and plastic is pretty good material too, especially for radio reception and titanium
[02:43:45.220 --> 02:43:49.380]  But like they went with aluminum and glass because I feel like it's just a higher quality experience
[02:43:49.380 --> 02:43:51.380]  Like it feels nicer and more expensive glass
[02:43:51.380 --> 02:43:56.020]  Obviously the screen is better than plastic as we learned from the ipod nano like the plastic is going to scratch so you want
[02:43:56.020 --> 02:44:01.860]  Something that's scratch resistant for the screen and then aluminum for the back. It's just I mean 3gs was plastic but
[02:44:02.660 --> 02:44:09.460]  The the you know and they use glass for the 4 and 4s and like but aluminum glass is a pretty solid combo right now
[02:44:09.460 --> 02:44:11.460]  And to get better than it you basically need
[02:44:12.820 --> 02:44:18.020]  Something that's not going to shatter so it has to be more flexible for the display and for the back part
[02:44:18.500 --> 02:44:21.700]  I guess you'd probably have to go with something that's equal strength, but lighter so like
[02:44:21.700 --> 02:44:26.420]  Graphite composite plus really hard flexible screens, uh, you know, or as i've always said
[02:44:26.900 --> 02:44:29.940]  Get the thing down to the size and weight of a credit card and really doesn't much matter
[02:44:30.260 --> 02:44:34.340]  What material you make it out of because you drop your credit card on the pavement and just you pick it back up
[02:44:34.340 --> 02:44:36.740]  Like it's not nothing's going to happen. It weighs too little
[02:44:37.700 --> 02:44:43.940]  That air resistance becomes a factor that doesn't even fall that fast and if it does it's flexible enough that it's not going to shatter or break
[02:44:44.900 --> 02:44:46.980]  Yeah, I thought of an idea. I was thinking about drops today
[02:44:46.980 --> 02:44:53.060]  I was watching jonas play destiny and he jumped off a giant cliff and it seemed like he should have taken damage and didn't
[02:44:53.300 --> 02:44:57.780]  I was like how come you don't take damage because oh you just you have like some kind of jets on your feet or something
[02:44:58.100 --> 02:45:01.860]  You know like a jet you play the game so, you know, they're but you need to give me his psn name
[02:45:01.860 --> 02:45:03.860]  I'll help him out. He'll help me out
[02:45:04.420 --> 02:45:08.020]  Yeah, i'll hook you up. Uh, and I thought oh that's clever and then I watched it, you know
[02:45:08.020 --> 02:45:12.260]  So it's more or less like your boba fett you jump off a thing and at the very end you just put on your jetpack
[02:45:12.260 --> 02:45:14.980]  A little bit to slow down. I thought you know, that would be a clever thing for a iphone
[02:45:14.980 --> 02:45:19.060]  to have it just if you dropped it if it had
[02:45:20.180 --> 02:45:25.140]  That is the jetsons era solution to this problem, you know, we could do everything had jets
[02:45:25.860 --> 02:45:30.500]  Just to slow down just enough pop of air at the last moment would keep it from and to gently land
[02:45:30.980 --> 02:45:33.940]  Uh, but you're right, you know something like that, but something's got it
[02:45:33.940 --> 02:45:39.140]  I think the other thing that's going to seem barbaric is the way that with the everything made out of aluminum that they're
[02:45:39.140 --> 02:45:44.340]  They're like, can you even imagine how much raw aluminum apple is?
[02:45:44.820 --> 02:45:47.860]  Sending to china every single day. That's just being cut
[02:45:48.580 --> 02:45:51.940]  Into these shapes by the the cnc machines
[02:45:52.420 --> 02:45:56.420]  Well, I mean the great thing about aluminum is all the shavings and scraps and crap that come off of the machine
[02:45:56.420 --> 02:46:00.420]  Like all the material that is removed that can just go back into the whole recycling thing is you know
[02:46:00.420 --> 02:46:04.980]  It just it just it's not it's not waste in the sense that you can just recycle that melt it back down and put
[02:46:04.980 --> 02:46:06.980]  Them into another ingot and it comes back to you
[02:46:06.980 --> 02:46:11.860]  Uh, but it's a tremendous amount of stuff that they're just cutting which is an incredibly difficult process
[02:46:12.740 --> 02:46:13.860]  Yeah
[02:46:13.860 --> 02:46:18.660]  Yeah, I mean like but it's it's what they settled on and we saw we all we all saw the development of like
[02:46:18.660 --> 02:46:23.380]  How can you make a sturdy laptop that's also thin with it doesn't creak or crack or break or feel cheap?
[02:46:23.860 --> 02:46:26.020]  and they try lots and lots of different things and
[02:46:26.660 --> 02:46:31.460]  Boy, this one with the original macbook air the the machined out piece of aluminum just seems great
[02:46:31.460 --> 02:46:34.980]  I mean eventually they'll get to the point where they're kind of getting to that now with the macbook one where it's like
[02:46:34.980 --> 02:46:39.460]  Strength of materials at this thickness. Do I feel like I can take this macbook?
[02:46:39.460 --> 02:46:43.460]  I'm talking the macbook one is atv parlance for the macbook that only has one port on the side of it
[02:46:43.460 --> 02:46:45.460]  Just it's just called the macbook. Anyway
[02:46:46.100 --> 02:46:50.340]  Can I bend this over my knee because it looks like I might be able to bend this over my knee and i'm just not a
[02:46:50.340 --> 02:46:53.620]  comfortable feeling like eventually aluminum becomes
[02:46:54.260 --> 02:46:56.260]  no good because
[02:46:56.260 --> 02:47:02.500]  At certain thin, you know thickness if it gets very thin you can bend it and it stays bent and that's not really a good thing
[02:47:02.500 --> 02:47:08.820]  That's why you think about things like carbon fiber where they bend but spring back and they're also very light and very strong and so on
[02:47:08.820 --> 02:47:13.060]  So well, they switched this year to a new aluminum for the phones
[02:47:13.060 --> 02:47:17.380]  So though they look the same the 6s and 6s plus are made from this new
[02:47:17.380 --> 02:47:21.860]  I don't was it 7000 series whatever they want to call it, but it's apple's new fancy pants
[02:47:22.500 --> 02:47:23.940]  version of aluminum
[02:47:23.940 --> 02:47:29.380]  Um, and who knows maybe they have you know, maybe maybe this it'll be a take a lot longer than I think
[02:47:29.380 --> 02:47:33.060]  It may be a couple years from now. They're going to have 8000 series of aluminum. I don't know but
[02:47:33.860 --> 02:47:39.700]  I kind of feel like by upgrading the aluminum they've used that they're sort of approaching this is as good as it's going to get
[02:47:39.700 --> 02:47:41.060]  and that's well
[02:47:41.060 --> 02:47:45.620]  yeah, but it's like they're they're holding back the tide in that one because it's kind of like samurai swords where you can pick like
[02:47:46.420 --> 02:47:51.780]  Flexibility or hardness and you want you know hardness on the on the edge the sharp edge because you want it to
[02:47:52.100 --> 02:47:53.860]  Be sharp and be able to cut through things
[02:47:53.860 --> 02:47:57.860]  But if it's that hardness through the whole blade the blade will shatter when you hit something so you need a core that's
[02:47:57.860 --> 02:48:03.460]  Flexible, right? So going with it with the aluminum like it's not they're making up these new things so you can make aluminum
[02:48:03.460 --> 02:48:08.580]  You can decide do I want it to be very strong and hard or do I want it to be?
[02:48:08.980 --> 02:48:12.340]  Like malleable and flexible and not not that it's gonna shatter or anything but like
[02:48:12.980 --> 02:48:16.580]  With the aluminum what they're doing now is well, we still want to make the phones really thin
[02:48:16.580 --> 02:48:21.380]  We want to make them harder to bend and so can we make it so this is stronger aluminum?
[02:48:21.380 --> 02:48:26.260]  Hopefully maintain the weight but at a certain point like it, you know, like aluminum foil
[02:48:26.260 --> 02:48:33.300]  Like aluminum foil certain point it's gonna bend and what you need is a material that springs back and aluminum is not going to spring
[02:48:33.300 --> 02:48:39.620]  back so you will reach a limit and thickness where aluminum is just a non-starter because
[02:48:39.940 --> 02:48:42.900]  If you just keep saying we'll just make it so strong that you can't bend it
[02:48:43.220 --> 02:48:46.500]  That will you won't be able to do that at a certain point. I'll just be too darn thin
[02:48:46.500 --> 02:48:51.540]  So their material revolution will come eventually and I'm sure Apple has been for many years now researching
[02:48:51.540 --> 02:48:57.020]  what will replace aluminum if anything in our thing is is it time to try to do a carbon fiber foam because it would be
[02:48:57.020 --> 02:49:03.420]  Great for radio reception and it would spring back better than than aluminum does and we wouldn't have to worry about bend gate as much
[02:49:03.540 --> 02:49:05.540]  But you know, can we manufacture it?
[02:49:06.100 --> 02:49:09.100]  In the design, so we want to we can't you can't machine carbon fiber
[02:49:09.100 --> 02:49:11.620]  You have to mold it and it's really complicated and super expensive
[02:49:11.620 --> 02:49:16.620]  And so I think I'll be waiting a while from the land of fantasy rumors based on like patent fillets and stuff
[02:49:16.620 --> 02:49:20.820]  There's the liquid metal stuff that people have been fantasizing about for years
[02:49:20.820 --> 02:49:26.380]  So who knows maybe there's something like that too or in the Jetson puffer jet thing. You can have that material where?
[02:49:26.900 --> 02:49:28.020]  Where you can bend it
[02:49:28.020 --> 02:49:32.780]  But if you subject it to some sort of like if you put it back in heat or you're like apply electricity to it
[02:49:32.780 --> 02:49:35.860]  It goes back into the original shape. Remember that? Yeah, I do. Remember that
[02:49:36.020 --> 02:49:41.220]  Yeah, no, we bet the circuit boards inside don't really like bending too much either by the way, so, all right
[02:49:41.220 --> 02:49:43.220]  Let me take one last break here and then we could talk about Star Wars
[02:49:44.460 --> 02:49:49.980]  I want to tell you about our last sponsor. It's our good friends at Harry's now the holiday season is here
[02:49:49.980 --> 02:49:53.140]  This show will be airing tomorrow December 14th. I
[02:49:53.740 --> 02:49:55.740]  Think it's up till December
[02:49:55.940 --> 02:50:00.060]  18th free shipping is over, but they if you order up to the 18th
[02:50:02.220 --> 02:50:05.300]  Holiday shipping economy shipping for the holidays ends on the 18th
[02:50:05.300 --> 02:50:08.020]  So you got a couple of days this you're probably listening to it
[02:50:08.020 --> 02:50:12.760]  If you're a fan of the show because I feel like there's gonna be big news that that Craig Federighi was on the show
[02:50:13.180 --> 02:50:18.620]  You've got till December 18th. You can order it. You can pay for economy shipping. It'll get there before Christmas
[02:50:18.620 --> 02:50:26.160]  What a great gift if there's any kind of men fathers brothers husbands in your life. You can just buy them the holiday kit
[02:50:26.160 --> 02:50:28.160]  They've got these holiday kits
[02:50:28.640 --> 02:50:35.120]  With razor blade with the handle with some shaving cream and stuff. They sent me one that had
[02:50:35.800 --> 02:50:37.800]  This facial stuff, you know
[02:50:38.360 --> 02:50:43.080]  You know, you clean your face with it. I like it. It's good. My skin looks good with it
[02:50:43.080 --> 02:50:49.480]  a really cool stuff awesome, you know packaging this is one of those things you give him a gift if you want to give somebody a
[02:50:49.480 --> 02:50:54.440]  Gift with razor and stuff like that. Give them these Harry's things and they open it up. It looks great
[02:50:54.440 --> 02:50:56.440]  It makes you look like you have good taste
[02:50:56.760 --> 02:50:59.120]  go there check out these holiday kits and
[02:51:00.720 --> 02:51:02.720]  Really great prices to
[02:51:03.280 --> 02:51:09.480]  High quality blade high quality shaving creams and lotions and gels, whatever you want in the thing
[02:51:09.480 --> 02:51:16.200]  So go there save yourself the hassle. I hate Christmas shopping. Good. God almighty. This is like the most right
[02:51:16.200 --> 02:51:17.360]  I did it's the worst
[02:51:17.360 --> 02:51:21.600]  So I'm just you just buy people stuff from sponsors of the show and then you're done with it
[02:51:21.600 --> 02:51:24.240]  Get them a mattress and get them a shaving kit from from Harry's
[02:51:25.400 --> 02:51:27.400]  Where do you go to find out more?
[02:51:27.400 --> 02:51:29.400]  go to
[02:51:30.000 --> 02:51:36.000]  Harry's calm and then use this code talk show know the and their code either use that code and
[02:51:36.000 --> 02:51:43.640]  You'll save five bucks off your order. And remember you got to the 18th December 18th 2015 and you can still get it
[02:51:44.040 --> 02:51:46.040]  Express shipping for the holidays
[02:51:48.080 --> 02:51:50.540]  You're worried about I'm worried I'm worried to death about
[02:51:51.400 --> 02:51:55.640]  I've had two things on my mind the last week John I've had I found out I you know
[02:51:55.640 --> 02:51:59.720]  I was stressing over this interview with Craig Federighi. I wanted to do a good job with that and
[02:52:00.400 --> 02:52:02.720]  I don't want to have any Star Wars spoilers
[02:52:02.720 --> 02:52:09.280]  And now I've got this interview out of the way. We've got a little nice little post interview discussion with me and you about it
[02:52:09.280 --> 02:52:14.200]  I feel a great sense of relief and there right now as I speak to you on Sunday, December 13th
[02:52:14.200 --> 02:52:19.380]  I am now I'm breaking out into a sweat worrying about spoilers for the force awakens
[02:52:19.520 --> 02:52:21.160]  At least you can just hide in your house
[02:52:21.160 --> 02:52:22.240]  I've got to go to an office
[02:52:22.240 --> 02:52:25.800]  So with people who people who may be watching the trailers and reading every single thing
[02:52:25.800 --> 02:52:28.640]  They can find out about these things and as you approach the date, you're right
[02:52:28.640 --> 02:52:35.040]  It's like when you get close to an Apple event like the day before that's when the real leaks start coming like oh, you know
[02:52:35.040 --> 02:52:38.760]  Here's what's actually gonna come out and you find it after the fact actually that that you know
[02:52:38.800 --> 02:52:41.040]  Seven hour before a thing was a hundred percent true
[02:52:41.480 --> 02:52:46.880]  My I don't my friend Moises Chelu. He's down in Austin. He's a big film film
[02:52:47.640 --> 02:52:52.760]  Fan, he's trying to get in he's trying to angle his way into the press screening down there, which is Tuesday morning
[02:52:52.760 --> 02:52:59.280]  But I think the big the big one is in Los Angeles tomorrow. I think it's on Monday. So I feel like
[02:53:00.080 --> 02:53:04.440]  And the critics I think usually know, you know to keep keep their spoilers to themselves
[02:53:04.440 --> 02:53:09.440]  but that it's not just like a it's not a critics only screening like all sorts of in anybody who's anybody in
[02:53:09.580 --> 02:53:12.500]  Hollywood can go to the screening a Monday night and
[02:53:13.160 --> 02:53:17.640]  Blab about whatever the secrets are so now I don't know what to do and you just got it like
[02:53:17.640 --> 02:53:23.400]  Just think about like the stupid think pieces that are gonna be like I can't believe they did this thing in Star Wars
[02:53:23.520 --> 02:53:26.480]  People gotta have a big think piece about what it means for the franchise
[02:53:26.480 --> 02:53:31.960]  like no one's even seen the movie and don't have to think pieces on it and that and that that's gonna make people go like
[02:53:31.960 --> 02:53:33.200]  they're like that's
[02:53:33.200 --> 02:53:38.120]  That's gonna make people want to read the story and I don't want to know so and I can't hide from the world like I can
[02:53:38.120 --> 02:53:39.460]  I can ignore the internet
[02:53:39.460 --> 02:53:44.520]  but if there's people of the office who have read the think pieces and are discussing how amazing it is the Jar Jar Binks comes
[02:53:44.520 --> 02:53:47.680]  Back and destroys everybody. Like I don't want to hear about it, right?
[02:53:48.560 --> 02:53:53.440]  And I'm so worried that it will it'll pop up in one of those, you know
[02:53:53.440 --> 02:53:58.320]  Like you can get to the bottom of an article on most news sites today and they have these
[02:53:58.520 --> 02:54:02.320]  All other things around the web. You might want to know I
[02:54:03.640 --> 02:54:05.320]  Am so worried that the head, you know
[02:54:05.320 --> 02:54:10.080]  And like you said that they're just gonna put the spoiler right in the goddamn headline and it'll be right there in front
[02:54:10.080 --> 02:54:10.560]  of course
[02:54:10.560 --> 02:54:15.680]  It'll be because it'll be a think piece that assumes everybody already knows the spoiler and it's like now I want to discuss this spoiler
[02:54:15.680 --> 02:54:17.440]  right, I
[02:54:17.440 --> 02:54:24.800]  Have I don't know it's almost like worse that I've been successful at keeping myself almost entirely spoiler free
[02:54:25.800 --> 02:54:28.840]  And I also have a I have a good ability
[02:54:29.640 --> 02:54:34.940]  You know, maybe it's a bad ability in the long run, but in certain aspects, but at least for this movie
[02:54:34.940 --> 02:54:39.880]  I can willfully forget some some things and so I don't have that ability. So
[02:54:41.400 --> 02:54:47.300]  Like I can't even think there's been like at least two minor spoilers that I've
[02:54:47.720 --> 02:54:51.320]  Encountered in the last few weeks and as I speak to you right now
[02:54:51.320 --> 02:54:56.080]  I can't bring them to mind and I think I could if I tried but I've I have you know
[02:54:56.080 --> 02:55:02.600]  There's a weird ability in my mind to compartmentalize where I've I've kept them away and when I see them in the movie
[02:55:02.600 --> 02:55:07.000]  I'll be like, oh, yeah, I knew that but I'd forgotten it. But I remember that I knew it I can do that
[02:55:08.280 --> 02:55:13.360]  I'm trying to just like not think about the things I already know the future because if I think about them
[02:55:13.360 --> 02:55:17.520]  I'll figure crap out. So I just like I just avoid that part of my mind. Like don't even think about that
[02:55:17.520 --> 02:55:19.240]  I don't know if that's gonna work
[02:55:19.240 --> 02:55:22.200]  But it's the same type of thing like once it once I see it in the movie to be like, yeah
[02:55:22.200 --> 02:55:27.520]  I could have derived that from the information I had at hand, but I didn't want to so here's what I've done
[02:55:27.520 --> 02:55:31.200]  I just to be clear. I did watch the first trailer
[02:55:31.200 --> 02:55:34.720]  And and then I instant as soon as it was over
[02:55:34.720 --> 02:55:40.520]  I was excited and then I hit play again and watched it again. And then I thought shit. Why did I watch that?
[02:55:40.520 --> 02:55:47.040]  I shouldn't have watched that. I feel like I've already had things spoiled and I know that JJ Abrams is sort of an anti-spoiler
[02:55:48.280 --> 02:55:54.560]  Director and largely it seems so far. They've kept a lot of stuff under wraps. It really seems like I could be wrong
[02:55:54.560 --> 02:55:59.100]  Maybe there's other websites where like the whole thing is spoiled. I haven't seen it
[02:55:59.100 --> 02:56:04.240]  I trusted him to make a trailer that didn't really have spoilers. I wouldn't say that it did
[02:56:04.240 --> 02:56:08.200]  I think it was a good trailer, but I still regretted it. I still regretted it
[02:56:08.200 --> 02:56:11.240]  I regret that I've seen the stupid lightsaber with the the
[02:56:12.120 --> 02:56:16.240]  Side blades. Yeah, I mean so I watched the first trailer too
[02:56:16.240 --> 02:56:19.620]  Just because I was so desperate to know like what is this gonna be like?
[02:56:19.620 --> 02:56:24.720]  like what is what is it even gonna look like because it because all bets were off like who knows where they were gonna go with
[02:56:24.720 --> 02:56:31.600]  this franchise it could have was it gonna look like the trailer for Prometheus and be like dark and gritty was it gonna look like
[02:56:32.040 --> 02:56:36.120]  Tomorrow and be happy and like like how what is there?
[02:56:36.120 --> 02:56:39.320]  What was their take on Star Wars gonna be so I felt like I had to watch the first trailer
[02:56:39.320 --> 02:56:42.740]  But after that, I've been often like so far
[02:56:42.740 --> 02:56:46.920]  my barriers held up pretty well through a series of filters and people who are nice to me and everything but
[02:56:47.560 --> 02:56:53.380]  The one the one place that's been tearing down a little bit television shows. I almost almost don't even want to tell you this but
[02:56:53.380 --> 02:56:55.140]  I
[02:56:55.140 --> 02:56:58.540]  discovered by 30 seconds skipping through ads on my TiVo as
[02:56:59.180 --> 02:57:01.860]  The 30-second skip went by occasionally a frame
[02:57:02.460 --> 02:57:08.220]  That my mind would register as Star Wars would come by and it was enough for me to know that oh my god
[02:57:08.220 --> 02:57:10.300]  They're running. They're running Star Wars TV ads
[02:57:10.300 --> 02:57:13.500]  I don't know if you knew this but on television there are ads for this movie
[02:57:13.500 --> 02:57:19.740]  I did and it's my my weakness for sports got me. I was watching I watched the Dallas Cowboys
[02:57:19.740 --> 02:57:25.620]  Redskins on Monday Night Football and it's apparently it seemed to me as though
[02:57:27.020 --> 02:57:28.140]  that
[02:57:28.140 --> 02:57:34.340]  Disney had purchased a commercial in every at least one commercial in every single commercial break like a
[02:57:34.640 --> 02:57:37.780]  true carpet bombing marketing campaign and it's
[02:57:38.380 --> 02:57:45.300]  there is you know, there's I I took to like skipping through the commercials like with my this is
[02:57:45.300 --> 02:57:51.740]  The you couldn't do it, but I just skip through the commercials with my good eye closed
[02:57:53.700 --> 02:57:58.460]  And so I was only using my you're listening with your good ear my damaged left eye
[02:57:58.460 --> 02:58:04.860]  Which I could still see certain things and had like a sense of some things that were going on and like oh
[02:58:04.860 --> 02:58:08.540]  That's a red lightsaber, but it's like at least the details were blurred out
[02:58:08.980 --> 02:58:09.460]  Yeah
[02:58:09.460 --> 02:58:13.740]  when I saw that the single frames I got nothing from it and I was I was satisfied with that because
[02:58:13.740 --> 02:58:18.420]  Every like because most of them I would see zero frames and like once every five shows
[02:58:18.420 --> 02:58:20.180]  I would see one frame depending on where it landed
[02:58:20.180 --> 02:58:21.600]  but the other day
[02:58:21.600 --> 02:58:23.540]  the very first commercial
[02:58:23.540 --> 02:58:28.220]  Like the very first commercial in the commercial break was a Star Wars one and I got like half a sentence out
[02:58:28.220 --> 02:58:32.380]  I'm like, oh damn it like you know, you're not you got to find the remote you got to pick it up
[02:58:32.380 --> 02:58:33.380]  You got a you know what I mean?
[02:58:33.380 --> 02:58:37.460]  Like I was I was too slow on the draws like in the Old West I got I got shot. I
[02:58:38.540 --> 02:58:42.580]  Really don't know how this week is gonna go especially once people start saying I got my tickets
[02:58:42.580 --> 02:58:48.240]  My first screening is Thursday night, which I'd seems like cheating to me if it if it premieres on Friday
[02:58:48.240 --> 02:58:50.820]  I don't know how I'm going to a 10 o'clock Thursday
[02:58:50.820 --> 02:58:51.340]  Yeah
[02:58:51.340 --> 02:58:54.900]  Some I mentioned that too and someone was saying like it was because of that it was after that
[02:58:54.900 --> 02:58:59.540]  I don't know if that's true after that Aurora shooting in Colorado that the midnight showing stop being at midnight
[02:58:59.540 --> 02:59:02.380]  I feel like that was happening before that but who knows anyway
[02:59:02.380 --> 02:59:08.340]  Yeah, so it's like it's like it's like so my 10 o'clock Thursday night screening is a midnight screening
[02:59:08.340 --> 02:59:12.940]  But there's like an asterisk which is we know it's not really a bit right and that like they do 7 p.m
[02:59:12.940 --> 02:59:14.980]  Screens like give the midnight show is now at 7 p.m
[02:59:14.980 --> 02:59:19.580]  It's like it's like, you know Christmas creep or anything. I assume the midnight showing will be like the Wednesday before
[02:59:19.580 --> 02:59:26.420]  Yeah, or it's like the Saturday night 7 o'clock mass if you're Catholic. Yeah. Well, we're calling it Sunday. It's Sunday someone
[02:59:26.740 --> 02:59:33.340]  Yeah, my showing is on Thursday as well. Yeah, so, you know then Friday, I'm gonna spoil it
[02:59:33.340 --> 02:59:35.460]  Yeah, I'm gonna spoil everything for everybody else
[02:59:35.460 --> 02:59:40.380]  I'll just feel so much better if I make it into that and like I said the the most dangerous time
[02:59:40.380 --> 02:59:43.860]  I said this in the account for the most dangerous time is when you're waiting in line to go theater
[02:59:43.860 --> 02:59:45.540]  And people are coming out of the theater
[02:59:45.540 --> 02:59:50.980]  especially if it's a theater that doesn't exit them out the back like if the people who are done seeing the movie walk piece past
[02:59:50.980 --> 02:59:57.540]  The people who are still waiting to see the movie super dangerous. Yeah. Yeah famous. Everybody has famous. Maybe it's even
[02:59:59.620 --> 03:00:03.300]  Apocryphal stories of waiting in line for the Empire Strikes Back and then some
[03:00:03.300 --> 03:00:09.180]  Dipshit runs by and purposefully screams at the top of his lung. Darth is Luke's father
[03:00:09.340 --> 03:00:11.380]  Yeah, and in the age of internet trolling
[03:00:11.380 --> 03:00:17.620]  I remember seeing this terrible YouTube video of someone driving a car past that people lined up waiting for like whatever was the
[03:00:18.180 --> 03:00:22.820]  Fifth book or some Harry Potter book where something dramatic happens other people didn't expect them
[03:00:22.820 --> 03:00:27.340]  So people are waiting in line at the bookstore to get like an opening night to buy the copy of the book and someone like
[03:00:27.340 --> 03:00:31.220]  Films it for YouTube and drives past and yells a phrase that I'm not gonna yell because it will spoil
[03:00:31.220 --> 03:00:35.420]  Harry Potter for a bunch of little kids listening to this but yells it to the entire line
[03:00:35.420 --> 03:00:38.300]  And the worst part is like they don't know if it's true
[03:00:38.300 --> 03:00:40.480]  He could the person could be making stuff up
[03:00:40.700 --> 03:00:47.220]  But in your heart of hearts like as you're reading the book as they approached you're like that guy was right and he wrote it
[03:00:47.940 --> 03:00:50.140]  Don't be that person. That's that's the worst thing ever
[03:00:51.100 --> 03:00:55.740]  What's the only Star Wars movie that doesn't take have some part of it take place on tattooing?
[03:00:56.860 --> 03:00:58.860]  Is it one of the fake ones?
[03:00:58.860 --> 03:01:04.540]  No, it's not one of the Empire. I guess right now all the fake ones have scenes on tattooing. Yeah, you're right
[03:01:07.500 --> 03:01:13.380]  In special edition to the editing tattooing parts the Empire don't remember just so that they had a Khorasan to Jedi
[03:01:13.380 --> 03:01:16.060]  Who knows what the hell that really that would have been the worst thing
[03:01:16.100 --> 03:01:21.500]  It's like in between a cutaway as big as circular white from Dagobah. They instead of going to the asteroid field
[03:01:21.500 --> 03:01:23.180]  they they cut to the
[03:01:23.180 --> 03:01:26.480]  Some droids doodling around in the sand. Yeah, or like
[03:01:26.480 --> 03:01:30.400]  Like when they first start hunting for the Millennium Falcon like that
[03:01:30.400 --> 03:01:36.480]  There's a phone call from Darth Vader to the Boba Fett and job his palace like come here. I need you
[03:01:36.480 --> 03:01:41.200]  Yeah, so what Lucas is really concerned about is like, how did those bounty hunters all get on to the Death Star?
[03:01:41.200 --> 03:01:43.640]  I want to see them remember he did that change for Jedi
[03:01:43.640 --> 03:01:47.000]  It's like that he showed like a Vader's shuttle taking him from point A to point B
[03:01:47.000 --> 03:01:50.780]  So we weren't confused about how he arrived like it closed city or whatever. It's like right get it
[03:01:50.780 --> 03:01:53.120]  They flew there in their spaceships. We don't need to see it. I
[03:01:53.120 --> 03:01:55.120]  Think
[03:01:55.720 --> 03:01:59.080]  Yeah, I don't even want to get into what he had it
[03:01:59.080 --> 03:02:01.080]  It's the some of the additions though
[03:02:01.080 --> 03:02:04.680]  like there's the when you get into the list of like what it was taken out of the
[03:02:04.880 --> 03:02:08.200]  Despecialized or whatever you want to call it the ones that were taken out of the despecialized
[03:02:08.200 --> 03:02:12.680]  You know sham is that prints or the you know, what was added to the specialized?
[03:02:12.960 --> 03:02:18.580]  Everybody thinks of Han shot Han shooting first and all of these gratuitous things and the ridiculous CGI backgrounds
[03:02:18.580 --> 03:02:24.880]  They put behind the windows of Bespin and all these things that really really stand out or the god-awful CGI stuff
[03:02:24.880 --> 03:02:27.160]  They added to Mos Eisley and in a new hope
[03:02:29.440 --> 03:02:36.280]  It's the little things though like your anger your boiling anger is over these big ugly changes that really stand out and
[03:02:36.520 --> 03:02:39.540]  Just don't add anything and take away some of the magic
[03:02:39.540 --> 03:02:45.560]  But then when you read some of the little things that that Lucas had added you're like what what this man went insane
[03:02:45.560 --> 03:02:52.720]  Like it's the little things that make you realize that he he's somehow lost his marbles the one I had forgotten about until I was
[03:02:52.720 --> 03:02:56.040]  Reminded I think in some slack channel somewhere. I think they were talking to you about it was the
[03:02:56.720 --> 03:03:00.960]  Dagobah when R2 gets spit out of the big swamp creature and
[03:03:01.440 --> 03:03:04.800]  The the actual line in the movie is you're lucky you don't taste very good
[03:03:04.800 --> 03:03:06.980]  That's what Luke says to him, which is a good laugh line
[03:03:06.980 --> 03:03:10.600]  You know whatever for a silly situation and he changed it to a less funny line
[03:03:10.640 --> 03:03:13.840]  Like it's not like he was like you're lucky you got out of there
[03:03:13.840 --> 03:03:19.160]  No, no, the first the first one was better. It was adding a little bit of levity. It was sarcastic
[03:03:19.160 --> 03:03:24.240]  It was and Luke is kind of like sarcastic and and a little bit cranky in that scene
[03:03:24.240 --> 03:03:29.080]  So it's perfect. Like you're lucky. You don't taste very good. You're lucky you got out of there. That's your improvement
[03:03:29.080 --> 03:03:31.140]  It's like, you know when you bring someone in to punch up a script
[03:03:31.140 --> 03:03:37.040]  This is the opposite the guy who unpunches it punches it down it it's that's a perfect example
[03:03:37.080 --> 03:03:43.280]  Maybe the canonical example, maybe that's like the best example because it it sounds inconsequential
[03:03:43.280 --> 03:03:47.300]  But it was a little funny and then it's not funny at all. And it also was like
[03:03:48.600 --> 03:03:52.600]  establishes the characters it is like hey Luke and r2 have a
[03:03:55.240 --> 03:03:59.040]  Friendship right? It's not just a device that's owned by Luke
[03:03:59.240 --> 03:04:05.520]  he's you know, there's a rapport between these two and you know, everybody who's seen the first one knows that r2d2 is
[03:04:06.120 --> 03:04:08.800]  Clearly a sort of sarcastic wise ass
[03:04:08.800 --> 03:04:16.080]  Right. He's a wise ass robot. You don't know what he's saying, but you can tell from 3PO's responses that he's a he's a wise ass and
[03:04:17.040 --> 03:04:18.560]  Luke is giving it back to him
[03:04:18.560 --> 03:04:24.280]  It actually is meaningful in some small way in terms of shaping the relationship between the characters
[03:04:24.600 --> 03:04:30.660]  and it fits perfectly in that scene like I think one of my favorite cuts in the Dagobah sequences where like
[03:04:31.040 --> 03:04:33.680]  Luke is just like he just crashed his ship
[03:04:33.680 --> 03:04:39.920]  Everything's all crappy and it's like his droid was attacked by a monster and spit out and he's covered with with water and his droids
[03:04:39.920 --> 03:04:44.280]  Covered in mud. He's like, I don't even know what we're doing here and r2 like to end the scene r2
[03:04:44.560 --> 03:04:46.840]  expels mud from on husband's the top goes
[03:04:48.120 --> 03:04:56.080]  Like that basically sums it up. I can just it's like slapstick slapstick comedy comedy, but also commentary on the situation
[03:04:56.080 --> 03:04:59.920]  We're just you know, what? This is crap. We're we're not doing well here
[03:04:59.920 --> 03:05:01.920]  So
[03:05:02.880 --> 03:05:09.080]  To wrap it up what what is your expectation going you think there's gonna be a movie that makes you happy or you think it's
[03:05:09.080 --> 03:05:11.080]  Gonna be another disappointment
[03:05:11.360 --> 03:05:15.040]  Do you have show notes? You should put the incomparable episode where we talked about this in the show notes
[03:05:15.040 --> 03:05:17.680]  I went the entire episode of the incomparable about
[03:05:18.400 --> 03:05:21.840]  Anticipating the force awakens and it's not what I said there
[03:05:22.680 --> 03:05:26.960]  I'm of two minds about it on the one hand when I might do on a little bit
[03:05:26.960 --> 03:05:30.640]  I started to get depressed because I'm like there's just no way
[03:05:31.320 --> 03:05:35.040]  That this can be as meaningful to me as the original three movies are which is fine
[03:05:35.040 --> 03:05:37.040]  like, you know, whatever like I
[03:05:37.120 --> 03:05:42.920]  Start to think that there's just no way this can be as meaningful to me because things you experience in your formative years always
[03:05:42.920 --> 03:05:45.040]  Have a certain extra amount of impact
[03:05:46.560 --> 03:05:51.960]  But on the other hand I say well, but isn't it possible it's not as if as an adult
[03:05:51.960 --> 03:05:57.760]  It is impossible to get to me. It's impossible to be affecting and I was I try to do is think of what?
[03:05:58.200 --> 03:06:04.000]  Media movies or whatever have seen as an adult that have like really stuck with me and affected me
[03:06:04.000 --> 03:06:05.760]  Just basically to put like what what is the bar?
[03:06:05.760 --> 03:06:09.480]  Like have I just become such a jaded individual that no movie can really get to me
[03:06:09.480 --> 03:06:11.960]  And so I should just put that out of my mind
[03:06:11.960 --> 03:06:15.880]  The Star Wars is not gonna be like that and what I came back to was like a lot of the Miyazaki movies
[03:06:15.880 --> 03:06:16.920]  I saw as an adult
[03:06:16.920 --> 03:06:22.520]  really stick with me and are meaningful and important movies that I would put right up there with Star Wars movies and then maybe
[03:06:22.520 --> 03:06:25.880]  They're not as big because they I didn't see them in my formative years, but I saw them as an adult
[03:06:25.880 --> 03:06:29.600]  So basically what I'm doing is I'm reassuring myself that that a movie can get to me
[03:06:29.600 --> 03:06:32.440]  And so that's the top bar. And then the other thing I have to say
[03:06:33.200 --> 03:06:38.960]  Is like so it's you've decided that you as an adult are able to be affected by a movie
[03:06:39.080 --> 03:06:43.520]  What if you watch this movie this new Star Wars movie and it's merely a pretty good movie
[03:06:43.520 --> 03:06:47.560]  Are you okay with that? And what I used was a Star Trek movies like the recent reboot Star Trek's I
[03:06:48.120 --> 03:06:51.760]  Enjoyed those and when I've rewatched them I said, you know what? This was a fun movie
[03:06:51.760 --> 03:06:53.640]  But I don't really care that much about Star Trek
[03:06:53.640 --> 03:06:55.160]  So there's way less baggage there
[03:06:55.160 --> 03:06:58.280]  But what I've been trying to think about is if I go into this movie
[03:06:58.600 --> 03:07:04.740]  There's not the most amazing movie ever saw but it's competently made. It's fun. It's exciting. I have fun watching it
[03:07:05.360 --> 03:07:09.520]  Do I say yeah, but it was Star Wars and it's supposed to be way better than that
[03:07:09.520 --> 03:07:15.640]  Or do I cut am I able to enjoy it the same way that I could enjoy those Star Trek movies that I care way
[03:07:15.640 --> 03:07:16.920]  way less about
[03:07:16.920 --> 03:07:21.240]  and I don't know what the answer to that is, but really what I've come down to is I think I
[03:07:22.120 --> 03:07:25.520]  Believe it is possible for this movie to be really important and meaningful
[03:07:26.160 --> 03:07:28.840]  I probably I think it probably won't be and
[03:07:29.440 --> 03:07:36.040]  I'm trying to be okay with with it merely being a good fun movie and just me being so much so excited that it wasn't
[03:07:36.040 --> 03:07:40.020]  Like the prequels. I my big fear is I feel like
[03:07:40.680 --> 03:07:44.720]  The big problem with the prequels was well, there's so many and we and we've talked
[03:07:44.760 --> 03:07:49.380]  We've talked about them at length on this show and others but to me at a fundamental level
[03:07:49.380 --> 03:07:56.140]  It's that that the characters were flat and the dialogue was flat and there is no camaraderie and and no
[03:07:56.360 --> 03:08:00.240]  Set and and and in plot wise and story wise there was no sense of mystery
[03:08:00.240 --> 03:08:07.440]  in fact, the whole point of the prequel trilogy was to explain all the mysteries that that the original thriller trilogy lied on and
[03:08:07.960 --> 03:08:12.760]  I've said this before like it always seemed like the original trilogy could have you know
[03:08:12.760 --> 03:08:18.040]  and there were rumors from when we were kids that Lucas but the next three movies wouldn't be after the
[03:08:18.320 --> 03:08:23.560]  Return of the Jedi they would be before when Ben Kenobi and Anakin Skywalker were younger
[03:08:24.200 --> 03:08:27.660]  And it always seemed like well, of course he could do that because my god
[03:08:27.660 --> 03:08:32.360]  There's so much stuff that they could explain what the hell the Clone Wars were how the Emperor came to be how the Emperor
[03:08:32.600 --> 03:08:38.240]  Empire came to be all of these things could you know could be a movie but the fact that they were were
[03:08:38.520 --> 03:08:41.840]  mysteries or were only gently or vaguely alluded to
[03:08:42.840 --> 03:08:49.300]  It gave a weight to the original trilogy that the prequels didn't have because all they tried to do is piss away and explain everything
[03:08:49.520 --> 03:08:52.520]  Right down to explaining how the force worked. I
[03:08:52.520 --> 03:08:57.320]  I don't think that's gonna be a problem. I feel like JJ one thing JJ Abrams knows how to do is have
[03:08:57.720 --> 03:09:02.940]  engaging characters and a sense of camaraderie and and a good
[03:09:03.760 --> 03:09:08.000]  Siri a good ear for dialogue. My big concern is that that the modern
[03:09:10.340 --> 03:09:17.720]  Needs or perceived needs in Hollywood of a big-budget action movie are such that there's no way, you know
[03:09:17.960 --> 03:09:21.540]  it's still gonna be filled with 110 minutes of
[03:09:21.540 --> 03:09:29.300]  CGI action chases. Yeah, I talked about that in the incomparable to in the context of like modern movie making sensibilities
[03:09:31.260 --> 03:09:35.260]  Because this using the Star Trek's again as example, you've seen those right there. Yeah
[03:09:36.780 --> 03:09:42.740]  Especially Star Trek rather. Yeah, especially like the first one. Yeah, and so those definitely
[03:09:43.460 --> 03:09:49.340]  Look at Star Trek with modern movie making sensibilities and I like them like I thought they were enjoyable
[03:09:49.340 --> 03:09:52.300]  but but you have to say like those movies are
[03:09:53.180 --> 03:09:59.680]  Star Trek as reimagined through the loan through the lens of a modern filmmaker and for the Star Wars things. I
[03:10:00.380 --> 03:10:02.540]  I really fervently hope that
[03:10:03.580 --> 03:10:07.780]  JJ is a big enough Star Wars fan that what they do what he does instead is
[03:10:10.500 --> 03:10:14.980]  You know it this the certain Star Wars magic that I want to feel in this movie
[03:10:14.980 --> 03:10:18.500]  Not that it's any worse or better than modern movie making sensibilities
[03:10:18.500 --> 03:10:25.180]  But it's a different set of sensibilities that inform the original trilogy and I feel like those those still work and are still fresh
[03:10:25.180 --> 03:10:28.700]  So I want this movie to feel like Star Wars first and foremost
[03:10:28.700 --> 03:10:35.780]  I don't want it to feel like Star Wars as the scene through the lens of a modern filmmaker and this it's a continuum
[03:10:35.780 --> 03:10:38.180]  I'm not saying it's like you're on one side of it on the other but I
[03:10:38.500 --> 03:10:45.460]  Desperately want this and again, I use Miyazaki's my example Miyazaki movies are about all sorts of different topics across decades
[03:10:45.460 --> 03:10:48.960]  But they all feel like Miyazaki movies. So I'm okay with
[03:10:49.460 --> 03:10:56.660]  This movie being different from the original trilogy in fundamental ways, but it has to feel like Star Wars. It shouldn't feel like a
[03:10:57.500 --> 03:11:02.740]  Modern movie a modern reimagining of Star Wars. I want it to feel like Star Wars at least just these three
[03:11:03.220 --> 03:11:10.300]  After that fine then totally reimagine everything about it, but I want these three movies seven eight nine to feel like Star Wars
[03:11:10.300 --> 03:11:14.860]  Yeah, that's a good way to put it. I agree and there's it is it's almost like a branding thing
[03:11:14.860 --> 03:11:21.580]  You know that there was a certain way that the the original series just lacked bombastic
[03:11:22.700 --> 03:11:28.700]  scenes, I mean, I mean like the the the space battle in return of the Jedi sort of I think set that
[03:11:29.300 --> 03:11:33.580]  Set the stage for modern action movies and it was so awesome at the time and I do love it
[03:11:33.580 --> 03:11:37.600]  It's one of the and it's one of my favorite things in the whole return of the Jedi. It's fantastic
[03:11:38.700 --> 03:11:43.380]  the way that the ships are so dynamic and the camera moves around and stuff like that, but
[03:11:43.380 --> 03:11:49.620]  It's it's if you just use a stopwatch and measure how much of the movie is taken up by that battle
[03:11:49.620 --> 03:11:53.820]  It's actually very little because it was so incredibly hard for them to do it
[03:11:53.820 --> 03:11:57.960]  You know that the computer controlled where everything was actually like a an actual model
[03:11:58.580 --> 03:12:04.000]  and in the modern filmmaking where it's once you have all this stuff set up you can just let like
[03:12:04.700 --> 03:12:10.340]  You know like it's I got the way that transformer movies work where they're really just to our CGI
[03:12:10.340 --> 03:12:14.800]  Chases through us, you know, we're transformers are throwing themselves into skyscrapers
[03:12:15.520 --> 03:12:20.540]  Yeah, and like you're trying to think about what is it to make something feel like Star Wars a lot of it is
[03:12:20.900 --> 03:12:25.360]  The limitations of motion control cameras and and the you know, the 70s and 80s, right?
[03:12:26.160 --> 03:12:30.440]  That defined the look of the space battles because what could you do with the motion control camera?
[03:12:30.440 --> 03:12:32.580]  We can do this move that move that move in this move and we can
[03:12:32.720 --> 03:12:37.680]  Optically composite them together and that kind of defines it but also stuff that didn't have anything to do with technology
[03:12:37.680 --> 03:12:44.200]  Like how it's scored how there's like music behind everything and how its orchestral like that's not the modern way movies are scored
[03:12:44.200 --> 03:12:49.340]  That is that is an older way movies are scored like it's not that's not done and you know
[03:12:49.480 --> 03:12:51.480]  John Williams doesn't put an orchestra behind
[03:12:52.140 --> 03:12:58.200]  the transformers movie during like every scene like Star Wars movies are practically musicals for the amount of music that's in them and the
[03:12:58.200 --> 03:13:01.380]  Type of music is a weird old style of music
[03:13:01.380 --> 03:13:05.780]  So you can go a long way towards making a movie feel like Star Wars without you know
[03:13:05.780 --> 03:13:08.220]  Like yes, you can do anything in CG
[03:13:08.500 --> 03:13:14.020]  But make it feel kind of like Star Wars and you can you can do a twist on like in the trailer that we both
[03:13:14.020 --> 03:13:15.420]  saw the
[03:13:15.420 --> 03:13:19.500]  The camera movement around the Millennium Falcon when it's doing all these strange maneuvers
[03:13:19.500 --> 03:13:23.900]  You couldn't really do that feasibly with the motion-drill camera, especially with the crazy backgrounds and everything
[03:13:23.900 --> 03:13:25.460]  You can do it with CG
[03:13:25.460 --> 03:13:31.940]  But in some sense it still feels Star Wars because lots of those swoopy moves where the camera was following the ship and the ship
[03:13:31.940 --> 03:13:33.420]  Was twirling around
[03:13:33.420 --> 03:13:38.780]  this is just like that cranked up a little bit more it isn't it's the difference between that and like
[03:13:39.100 --> 03:13:45.220]  The like the fancy with the fancy way that Han piloted the Falcon into the asteroid crater
[03:13:45.660 --> 03:13:52.500]  In Empire Strikes Back where it was like this exuberant like straight up straight down paperclip
[03:13:52.500 --> 03:13:54.500]  You know like you motion
[03:13:55.820 --> 03:13:57.300]  You know, it's this show, you know
[03:13:57.300 --> 03:14:04.100]  It's a show-off type type of guy accompanied by an ascending and descending scale in the soundtrack from John Williams with like the flutes or
[03:14:04.100 --> 03:14:04.980]  Whatever going in there
[03:14:04.980 --> 03:14:10.740]  Like that's totally a Star Wars type thing and comparing it to like remember. Did you watch the Battlestar Galactica reboot? Yeah, I did
[03:14:11.420 --> 03:14:13.580]  Remember they used to do the thing that made it look like
[03:14:14.180 --> 03:14:18.900]  The the Vipers or whatever were being filmed by someone with a handheld camera far away
[03:14:18.900 --> 03:14:22.060]  So it would shake and then they would do that the really dramatic zoom in
[03:14:22.060 --> 03:14:27.580]  Yeah, it's like to acquire the ship and then try to get it centered in the frame like someone trying to catch like a long
[03:14:27.580 --> 03:14:32.180]  Hail Mary pass like a bad cameraman trying to say where the hell is the football I got it zoom in
[03:14:32.420 --> 03:14:36.040]  They don't do that these days. I saw that big hail Mary and like they were headed the camera back the whole time
[03:14:36.040 --> 03:14:40.640]  Don't they follow the ball anymore? Whatever the hell happened to NFL films where you get to see the things spiraling towards you
[03:14:40.740 --> 03:14:42.740]  Where is that tech anyway?
[03:14:43.700 --> 03:14:45.940]  Yeah, you can you can make something
[03:14:46.500 --> 03:14:50.820]  Feel like Star Wars and be modern without making it look like Battlestar Galactica
[03:14:50.820 --> 03:14:54.900]  Like all of a sudden everything is handheld shaky cam and there was shaky cam in the trailer
[03:14:54.900 --> 03:14:56.540]  So I'm like, I'm not saying you can't use shaky cam
[03:14:56.540 --> 03:15:01.100]  You totally can't I just I just overall I want the movie to feel like Star Wars, right?
[03:15:01.100 --> 03:15:05.180]  And part of that to me is that it has to you have to let certain scenes
[03:15:05.300 --> 03:15:11.060]  Just just let them breathe and don't worry about whether there's a lot going on. Like give us something. That's a mystery
[03:15:11.060 --> 03:15:14.340]  Give us something that's new and then just let us figure it out
[03:15:14.340 --> 03:15:18.740]  Like some of my favorite scenes in the original trilogy are just like r2d2 by himself
[03:15:18.740 --> 03:15:24.500]  Just off in the desert on Tatooine and you just slowly watch the r2d2 roll across the desert
[03:15:24.500 --> 03:15:29.060]  But there's it it's engaging because you're like well, where the hell is this robot going?
[03:15:30.060 --> 03:15:37.060]  Yeah, and like Empire my favorite one like this. There's so many scenes that end like with with the mud being spit out
[03:15:37.060 --> 03:15:39.900]  That's the end of that scene before they cut to a different one
[03:15:39.900 --> 03:15:40.860]  It's like but wait
[03:15:40.860 --> 03:15:46.320]  How does that it doesn't have to conclude with a line or an event or in a call to action that can end with the?
[03:15:46.320 --> 03:15:53.300]  feeling or we're just showing like some you know Yoda walking off into the misty swamp and Luke just saying stay at the can't like
[03:15:54.580 --> 03:15:58.260]  There's something else is going to happen, but you're left with the feeling. How are the characters feeling this more?
[03:15:58.260 --> 03:16:01.380]  Are they dejected? Are they hopeful? Are they cautious? Are they afraid?
[03:16:02.660 --> 03:16:07.620]  That's so much more important than ending every scene with a call to action that leads to the next scene
[03:16:07.620 --> 03:16:09.980]  We have to do the whatever and then go show the whatever and you know
[03:16:09.980 --> 03:16:14.300]  it's just as I get excited about this movie Amy keeps reminding me of
[03:16:14.300 --> 03:16:15.860]  the
[03:16:15.860 --> 03:16:19.100]  movie AI and at you know, which was
[03:16:19.820 --> 03:16:24.860]  Written by Stanley Kubrick. I think he even got a producer credit, but it came out after he had died
[03:16:26.660 --> 03:16:27.660]  But the you know
[03:16:27.660 --> 03:16:32.940]  the basic story is that it was a movie he had been to Kubrick had been developing for a long time many years and
[03:16:33.700 --> 03:16:36.020]  Decided that he didn't want to direct it that
[03:16:36.240 --> 03:16:42.780]  Spielberg should direct it because it needed a warmth a human empathy that he knew that his movies lacked that
[03:16:42.780 --> 03:16:47.700]  Coldness would be the wrong way to approach it. And so he called up Steven Spielberg and said, you know
[03:16:47.700 --> 03:16:49.140]  What do you think about that? I got this movie
[03:16:49.140 --> 03:16:53.900]  Would you want to work with me and Spielberg is a huge Kubrick fan and they'd been friends over the phone for years
[03:16:53.900 --> 03:17:00.180]  I was like, okay, and then the poor guy died, but Spielberg made it anyway, and we're going to see it opening night
[03:17:00.180 --> 03:17:00.700]  Of course
[03:17:00.700 --> 03:17:05.180]  I could not wait and we're going to see it opening night and I just paused and we had another friend with those me Amy
[03:17:05.180 --> 03:17:08.720]  And my friend Don and I just said I just want to tell you guys I just want to make a prediction right here
[03:17:08.720 --> 03:17:13.260]  I think there's a very strong chance that we're about to see the greatest movie that's ever
[03:17:14.860 --> 03:17:19.460]  Had you not seen any other Spielberg movies like yeah, he's got human warmth, but he's also a little sappy
[03:17:20.940 --> 03:17:22.940]  That's what I said going into CA
[03:17:23.940 --> 03:17:28.620]  Seriously, I said in all seriousness. I wanted it like I wanted the the being right points
[03:17:29.300 --> 03:17:35.500]  Before we did I think we might be going to I believe there's a good chance that we might be going to see the greatest
[03:17:35.500 --> 03:17:41.460]  Movie that's ever been made. Oh, I mean not that AI was incredibly terrible, but it was not it
[03:17:41.980 --> 03:17:43.980]  Missed the mark. I think most people agree
[03:17:43.980 --> 03:17:48.800]  I don't think it makes it's not a bad movie, but it is certainly bad given the pedigree of the
[03:17:50.020 --> 03:17:54.220]  Filmmaker so that's why that's what a B keeps reminding me of with the force awakens
[03:17:54.220 --> 03:17:58.460]  Well, but you're not making strong predictions about no just we're cautiously optimistic
[03:17:58.460 --> 03:18:00.260]  But like this has everything going for it
[03:18:00.260 --> 03:18:05.380]  Like the thing I think about in this movie that the things that have faded it to exist is I mean
[03:18:05.380 --> 03:18:08.180]  Obviously the reason exists at all is Lucas sells gets him out of the picture
[03:18:08.180 --> 03:18:11.740]  So we don't have to worry about his picadillos messing with things. You know what I mean? Yeah
[03:18:11.740 --> 03:18:17.940]  Um, and who do they get to direct it the guy who's basically admitted so many times before this like that
[03:18:17.940 --> 03:18:19.940]  He's a super big Star Wars fan
[03:18:20.580 --> 03:18:25.460]  Like when he when he directed Star Trek my that's kind of a shame because he's always said what a big Star Wars fan
[03:18:25.460 --> 03:18:26.960]  He is and I'm sure he likes Star Trek
[03:18:26.960 --> 03:18:30.060]  I'm sure he'll do a good job, but it boy wouldn't it be great if he could do Star Wars
[03:18:30.060 --> 03:18:31.100]  But now that he's done Star Trek
[03:18:31.100 --> 03:18:35.020]  There's no way he's gonna do Star Wars cuz the same guy's not gonna get the same guy to do Star Trek and Star Wars
[03:18:35.020 --> 03:18:42.380]  well, he got to like essentially warm up on the lesser franchise Star Trek right and finally and hone his craft over a
[03:18:42.780 --> 03:18:48.300]  Series of movies and television shows over the years and then you could say like he's at the top of his game now
[03:18:48.620 --> 03:18:54.980]  Fulfilling his childhood fantasy as anyone child, you know child at a similar age to direct a new Star Wars movie
[03:18:54.980 --> 03:18:56.980]  And he's the guy doing it right now
[03:18:56.980 --> 03:18:59.460]  I've heard there's been creative tensions between him and
[03:18:59.740 --> 03:19:04.300]  The people who are running the franchise and that's kind of makes me worry about the future of this or whatever
[03:19:04.300 --> 03:19:10.820]  But like boy the stars really aligned for both us and JJ Abrams to have I like JJ Abrams. I like his other movies
[03:19:10.820 --> 03:19:11.560]  I like that
[03:19:11.560 --> 03:19:14.500]  he got to practice on Star Trek and I really hope that he like
[03:19:14.860 --> 03:19:19.860]  Uses all his skills and all his powers and the godfather parlance to just like put everything he has
[03:19:20.380 --> 03:19:26.120]  Into this this, you know, it's it's his childhood dreams as long as well as ours tied up into this movie
[03:19:26.120 --> 03:19:30.780]  And I really hope it comes together. Yeah, so I'm optimistic. We'll see we'll see how it goes
[03:19:30.780 --> 03:19:32.780]  Anyway
[03:19:33.540 --> 03:19:38.740]  John Syracuse that thank you for your time. This has been extremely generous of you. We've gone on a long time
[03:19:39.100 --> 03:19:42.820]  Yeah, Craig didn't take all my time. This would have been you know, no
[03:19:42.820 --> 03:19:44.760]  I told you you weren't gonna get cheated out of time
[03:19:44.760 --> 03:19:50.260]  You weren't John was worried when I asked him to do the show that he'd get shortchanged on time because of the the Craig
[03:19:50.260 --> 03:19:56.400]  Federighi segment not to worry. Yeah, we'll just make it a three hour show. Whatever. Yeah big long big long healthy
[03:19:56.400 --> 03:20:00.540]  It's like a holiday meal big long healthy meal. I should thank all of our sponsors
[03:20:00.540 --> 03:20:05.220]  We've got Harry's go to them buy their shaving stuff wealth front. You can invest your money
[03:20:06.020 --> 03:20:10.340]  Squarespace you can build your own website and Casper you can buy a mattress which I again
[03:20:10.340 --> 03:20:12.700]  I'm telling you what a holiday gift idea that would be
[03:20:13.660 --> 03:20:18.980]  John Syracuse that you can find him on his weekly podcast with the the other guys ATP
[03:20:19.100 --> 03:20:23.300]  that's accidental tech podcast at ATP FM and he's
[03:20:24.620 --> 03:20:27.300]  Just at Syracuse on Twitter anything else
[03:20:27.300 --> 03:20:31.900]  No, I think you covered it. There we go. Thank you John. Thank you
